/* Automated generated idl file <winsatlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IInitiateWinSATAssessment;
interface IWinSATInitiateEvents;
interface IProvideWinSATVisuals;
interface IAccessibleWinSAT;
interface IQueryOEMWinSATCustomization;

/* Structure forward declarations.  */
struct _RemotableHandle;
struct _userHBITMAP;
struct _userBITMAP;

/* Union record forward declarations.  */
union __MIDL_IWinTypes_0009;
union __MIDL_IWinTypes_0007;

/* Union record forward declarations.  */
dispinterface IQueryRecentWinSATAssessment;
dispinterface IXMLDOMNodeList;
dispinterface IXMLDOMNode;
dispinterface IXMLDOMNamedNodeMap;
dispinterface IXMLDOMDocument;
dispinterface IXMLDOMDocumentType;
dispinterface IXMLDOMImplementation;
dispinterface IXMLDOMElement;
dispinterface IXMLDOMAttribute;
dispinterface IXMLDOMDocumentFragment;
dispinterface IXMLDOMText;
dispinterface IXMLDOMCharacterData;
dispinterface IXMLDOMComment;
dispinterface IXMLDOMCDATASection;
dispinterface IXMLDOMProcessingInstruction;
dispinterface IXMLDOMEntityReference;
dispinterface IXMLDOMParseError;
dispinterface IProvideWinSATResultsInfo;
dispinterface IProvideWinSATAssessmentInfo;
dispinterface IQueryAllWinSATAssessments;
dispinterface IAccessible;

/* Union record forward declarations.  */
coclass CInitiateWinSAT;
coclass CQueryWinSAT;
coclass CQueryAllWinSAT;
coclass CProvideWinSATVisuals;
coclass CAccessiblityWinSAT;
coclass CQueryOEMWinSATCustomization;

/* Enumeration declarations.  */
[
  helpstring("Constants that define a node's type")
]
enum tagDOMNodeType
{
  NODE_INVALID = (int) 201326592,
  NODE_ELEMENT = (int) 201326593,
  NODE_ATTRIBUTE = (int) 201326594,
  NODE_TEXT = (int) 201326595,
  NODE_CDATA_SECTION = (int) 201326596,
  NODE_ENTITY_REFERENCE = (int) 201326597,
  NODE_ENTITY = (int) 201326598,
  NODE_PROCESSING_INSTRUCTION = (int) 201326599,
  NODE_COMMENT = (int) 201326600,
  NODE_DOCUMENT = (int) 201326601,
  NODE_DOCUMENT_TYPE = (int) 201326602,
  NODE_DOCUMENT_FRAGMENT = (int) 201326603,
  NODE_NOTATION = (int) 201326604
};
enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0003
{
  WINSAT_ASSESSMENT_MEMORY = (int) 201326592,
  WINSAT_ASSESSMENT_CPU = (int) 201326593,
  WINSAT_ASSESSMENT_DISK = (int) 201326594,
  WINSAT_ASSESSMENT_D3D = (int) 201326595,
  WINSAT_ASSESSMENT_GRAPHICS = (int) 201326596
};
enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0002
{
  WINSAT_ASSESSMENT_STATE_MIN = (int) 201326592,
  WINSAT_ASSESSMENT_STATE_UNKNOWN = (int) 201326592,
  WINSAT_ASSESSMENT_STATE_VALID = (int) 201326593,
  WINSAT_ASSESSMENT_STATE_INCOHERENT_WITH_HARDWARE = (int) 201326594,
  WINSAT_ASSESSMENT_STATE_NOT_AVAILABLE = (int) 201326595,
  WINSAT_ASSESSMENT_STATE_INVALID = (int) 201326596,
  WINSAT_ASSESSMENT_STATE_MAX = (int) 201326596
};
enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0004
{
  WINSAT_BITMAP_SIZE_SMALL = (int) 201326592,
  WINSAT_BITMAP_SIZE_NORMAL = (int) 201326593
};
enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001
{
  WINSAT_OEM_DATA_VALID = (int) 201326592,
  WINSAT_OEM_DATA_NON_SYS_CONFIG_MATCH = (int) 201326593,
  WINSAT_OEM_DATA_INVALID = (int) 201326594,
  WINSAT_OEM_NO_DATA_SUPPLIED = (int) 201326595
};

/* Structure/union declarations.  */
struct _RemotableHandle
{
  long fContext;
  union __MIDL_IWinTypes_0009 u;
};
union __MIDL_IWinTypes_0009
{
  long hInproc;
  long hRemote;
};
struct _userHBITMAP
{
  long fContext;
  union __MIDL_IWinTypes_0007 u;
};
union __MIDL_IWinTypes_0007
{
  long hInproc;
  struct _userBITMAP *hRemote;
  LONGLONG hInproc64;
};
struct _userBITMAP
{
  long bmType;
  long bmWidth;
  long bmHeight;
  long bmWidthBytes;
  USHORT bmPlanes;
  USHORT bmBitsPixel;
  UINT cbSize;
  UCHAR *pBuffer;
};

/* Type definitions.  */
typedef struct _RemotableHandle * wireHWND;
[
  helpstring("Constants that define a node's type")
]
typedef enum tagDOMNodeType DOMNodeType;
typedef enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0003 WINSAT_ASSESSMENT_TYPE;
typedef enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0002 WINSAT_ASSESSMENT_STATE;
typedef enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0004 WINSAT_BITMAP_SIZE;
typedef struct _userHBITMAP * wireHBITMAP;
typedef enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001 WINSAT_OEM_CUSTOMIZATION_STATE;

[
  uuid(15AE3A36-E53B-454D-A816-A7C61CBAB8A4),
  version(1.0),
  helpstring("WinSAT 1.0 Type Library")
]
library winsatlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(489331DC-F5E0-4528-9FDA-45331BF4A571),
     cancreate
   ]
   coclass CInitiateWinSAT
   {
     interface IInitiateWinSATAssessment;
   };
   [
     uuid(F3BDFAD3-F276-49E9-9B17-C474F48F0764),
     cancreate
   ]
   coclass CQueryWinSAT
   {
     dispinterface IQueryRecentWinSATAssessment;
   };
   [
     uuid(05DF8D13-C355-47F4-A11E-851B338CEFB8),
     cancreate
   ]
   coclass CQueryAllWinSAT
   {
     dispinterface IQueryAllWinSATAssessments;
   };
   [
     uuid(9F377D7E-E551-44F8-9F94-9DB392B03B7B),
     cancreate
   ]
   coclass CProvideWinSATVisuals
   {
     interface IProvideWinSATVisuals;
   };
   [
     uuid(6E18F9C6-A3EB-495A-89B7-956482E19F7A),
     cancreate
   ]
   coclass CAccessiblityWinSAT
   {
     interface IAccessibleWinSAT;
   };
   [
     uuid(C47A41B7-B729-424F-9AF9-5CB3934F2DFA),
     cancreate
   ]
   coclass CQueryOEMWinSATCustomization
   {
     interface IQueryOEMWinSATCustomization;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(F8AD5D1F-3B47-4BDC-9375-7C6B1DA4ECA7),
     helpstring("IQueryWinSAT Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IQueryRecentWinSATAssessment : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall xml (
       [in] BSTR xPath,
       [in opt] BSTR namespaces = L"",
       [out retval] dispinterface IXMLDOMNodeList **ppDomNodeList
     );
     [propget]
     HRESULT __stdcall Info (
       [out retval] dispinterface IProvideWinSATResultsInfo **ppWinSATAssessmentInfo
     );
   };
   [
     uuid(2933BF82-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNodeList : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] dispinterface IXMLDOMNode **listItem
     );
     [id(74), propget]
     HRESULT __stdcall length (
       [out retval] long *listLength
     );
     [id(76)]
     HRESULT __stdcall nextNode (
       [out retval] dispinterface IXMLDOMNode **nextItem
     );
     HRESULT __stdcall reset (void);
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(2933BF80-7B36-11D2-B20E-00C04F983E60),
     helpstring("Core DOM node interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNode : IDispatch
   {
     [id(2), propget]
     HRESULT __stdcall nodeName (
       [out retval] BSTR *name
     );
     [propget]
     HRESULT __stdcall nodeValue (
       [out retval] VARIANT *value
     );
     [id(3), propput]
     HRESULT __stdcall nodeValue (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall nodeType (
       [out retval] DOMNodeType *type
     );
     [id(6), propget]
     HRESULT __stdcall parentNode (
       [out retval] dispinterface IXMLDOMNode **parent
     );
     [propget]
     HRESULT __stdcall childNodes (
       [out retval] dispinterface IXMLDOMNodeList ***childList
     );
     [propget]
     HRESULT __stdcall firstChild (
       [out retval] dispinterface IXMLDOMNode **firstChild
     );
     [propget]
     HRESULT __stdcall lastChild (
       [out retval] dispinterface IXMLDOMNode **lastChild
     );
     [propget]
     HRESULT __stdcall previousSibling (
       [out retval] dispinterface IXMLDOMNode **previousSibling
     );
     [propget]
     HRESULT __stdcall nextSibling (
       [out retval] dispinterface IXMLDOMNode **nextSibling
     );
     [propget]
     HRESULT __stdcall attributes (
       [out retval] dispinterface IXMLDOMNamedNodeMap ***attributeMap
     );
     HRESULT __stdcall insertBefore (
       [in] dispinterface IXMLDOMNode *newChild,
       [in] VARIANT refChild,
       [out retval] dispinterface IXMLDOMNode **outNewChild
     );
     HRESULT __stdcall replaceChild (
       [in] dispinterface IXMLDOMNode *newChild,
       [in] dispinterface IXMLDOMNode *oldChild,
       [out retval] dispinterface IXMLDOMNode **outOldChild
     );
     HRESULT __stdcall removeChild (
       [in] dispinterface IXMLDOMNode *childNode,
       [out retval] dispinterface IXMLDOMNode **oldChild
     );
     HRESULT __stdcall appendChild (
       [in] dispinterface IXMLDOMNode *newChild,
       [out retval] dispinterface IXMLDOMNode **outNewChild
     );
     HRESULT __stdcall hasChildNodes (
       [out retval] WINBOOL *hasChild
     );
     [propget]
     HRESULT __stdcall ownerDocument (
       [out retval] dispinterface IXMLDOMDocument ***DOMDocument
     );
     HRESULT __stdcall cloneNode (
       [in] WINBOOL deep,
       [out retval] dispinterface IXMLDOMNode **cloneRoot
     );
     [id(21), propget]
     HRESULT __stdcall nodeTypeString (
       [out retval] BSTR *nodeType
     );
     [id(24), propget]
     HRESULT __stdcall text (
       [out retval] BSTR *text
     );
     [id(24), propput]
     HRESULT __stdcall text (
       [in] BSTR argNo1
     );
     [id(22), propget]
     HRESULT __stdcall specified (
       [out retval] WINBOOL *isSpecified
     );
     [propget]
     HRESULT __stdcall definition (
       [out retval] dispinterface IXMLDOMNode **definitionNode
     );
     [id(25), propget]
     HRESULT __stdcall nodeTypedValue (
       [out retval] VARIANT *typedValue
     );
     [id(25), propput]
     HRESULT __stdcall nodeTypedValue (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall dataType (
       [out retval] VARIANT *dataTypeName
     );
     [id(26), propput]
     HRESULT __stdcall dataType (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall xml (
       [out retval] BSTR *xmlString
     );
     HRESULT __stdcall transformNode (
       [in] dispinterface IXMLDOMNode *stylesheet,
       [out retval] BSTR *xmlString
     );
     HRESULT __stdcall selectNodes (
       [in] BSTR queryString,
       [out retval] dispinterface IXMLDOMNodeList **resultList
     );
     HRESULT __stdcall selectSingleNode (
       [in] BSTR queryString,
       [out retval] dispinterface IXMLDOMNode **resultNode
     );
     [propget]
     HRESULT __stdcall parsed (
       [out retval] WINBOOL *isParsed
     );
     [propget]
     HRESULT __stdcall namespaceURI (
       [out retval] BSTR *namespaceURI
     );
     [propget]
     HRESULT __stdcall prefix (
       [out retval] BSTR *prefixString
     );
     [propget]
     HRESULT __stdcall baseName (
       [out retval] BSTR *nameString
     );
     HRESULT __stdcall transformNodeToObject (
       [in] dispinterface IXMLDOMNode *stylesheet,
       [in] VARIANT outputObject
     );
   };
   [
     uuid(2933BF83-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNamedNodeMap : IDispatch
   {
     [id(83)]
     HRESULT __stdcall getNamedItem (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMNode **namedItem
     );
     HRESULT __stdcall setNamedItem (
       [in] dispinterface IXMLDOMNode *newItem,
       [out retval] dispinterface IXMLDOMNode **nameItem
     );
     HRESULT __stdcall removeNamedItem (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMNode **namedItem
     );
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] dispinterface IXMLDOMNode **listItem
     );
     [id(74), propget]
     HRESULT __stdcall length (
       [out retval] long *listLength
     );
     [id(87)]
     HRESULT __stdcall getQualifiedItem (
       [in] BSTR baseName,
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **qualifiedItem
     );
     HRESULT __stdcall removeQualifiedItem (
       [in] BSTR baseName,
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **qualifiedItem
     );
     HRESULT __stdcall nextNode (
       [out retval] dispinterface IXMLDOMNode **nextItem
     );
     HRESULT __stdcall reset (void);
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(2933BF81-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocument : IXMLDOMNode
   {
     [id(38), propget]
     HRESULT __stdcall doctype (
       [out retval] dispinterface IXMLDOMDocumentType ***documentType
     );
     [propget]
     HRESULT __stdcall implementation (
       [out retval] dispinterface IXMLDOMImplementation ***impl
     );
     [propget]
     HRESULT __stdcall documentElement (
       [out retval] dispinterface IXMLDOMElement ***DOMElement
     );
     [id(40), propputref]
     HRESULT __stdcall documentElement (
       [in] dispinterface IXMLDOMElement *argNo1
     );
     HRESULT __stdcall createElement (
       [in] BSTR tagName,
       [out retval] dispinterface IXMLDOMElement **element
     );
     HRESULT __stdcall createDocumentFragment (
       [out retval] dispinterface IXMLDOMDocumentFragment ***docFrag
     );
     HRESULT __stdcall createTextNode (
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMText ***text
     );
     HRESULT __stdcall createComment (
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMComment ***comment
     );
     HRESULT __stdcall createCDATASection (
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMCDATASection ***cdata
     );
     HRESULT __stdcall createProcessingInstruction (
       [in] BSTR target,
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMProcessingInstruction ***pi
     );
     HRESULT __stdcall createAttribute (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMAttribute ***attribute
     );
     [id(49)]
     HRESULT __stdcall createEntityReference (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMEntityReference ***entityRef
     );
     HRESULT __stdcall getElementsByTagName (
       [in] BSTR tagName,
       [out retval] dispinterface IXMLDOMNodeList **resultList
     );
     [id(54)]
     HRESULT __stdcall createNode (
       [in] VARIANT type,
       [in] BSTR name,
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **node
     );
     [id(56)]
     HRESULT __stdcall nodeFromID (
       [in] BSTR idString,
       [out retval] dispinterface IXMLDOMNode **node
     );
     [id(58)]
     HRESULT __stdcall load (
       [in] VARIANT xmlSource,
       [out retval] WINBOOL *isSuccessful
     );
     [id(-525), propget]
     HRESULT __stdcall readyState (
       [out retval] long *value
     );
     [id(59), propget]
     HRESULT __stdcall parseError (
       [out retval] dispinterface IXMLDOMParseError ***errorObj
     );
     [propget]
     HRESULT __stdcall url (
       [out retval] BSTR *urlString
     );
     [propget]
     HRESULT __stdcall async (
       [out retval] WINBOOL *isAsync
     );
     [id(61), propput]
     HRESULT __stdcall async (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall abort (void);
     HRESULT __stdcall loadXML (
       [in] BSTR bstrXML,
       [out retval] WINBOOL *isSuccessful
     );
     HRESULT __stdcall save (
       [in] VARIANT desination
     );
     [propget]
     HRESULT __stdcall validateOnParse (
       [out retval] WINBOOL *isValidating
     );
     [id(65), propput]
     HRESULT __stdcall validateOnParse (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall resolveExternals (
       [out retval] WINBOOL *isResolving
     );
     [id(66), propput]
     HRESULT __stdcall resolveExternals (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall preserveWhiteSpace (
       [out retval] WINBOOL *isPreserving
     );
     [id(67), propput]
     HRESULT __stdcall preserveWhiteSpace (
       [in] WINBOOL argNo1
     );
     [propput]
     HRESULT __stdcall onreadystatechange (
       [in] VARIANT argNo1
     );
     [propput]
     HRESULT __stdcall ondataavailable (
       [in] VARIANT argNo1
     );
     [propput]
     HRESULT __stdcall ontransformnode (
       [in] VARIANT argNo1
     );
   };
   [
     uuid(2933BF8B-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocumentType : IXMLDOMNode
   {
     [id(131), propget]
     HRESULT __stdcall name (
       [out retval] BSTR *rootName
     );
     [propget]
     HRESULT __stdcall entities (
       [out retval] dispinterface IXMLDOMNamedNodeMap **entityMap
     );
     [propget]
     HRESULT __stdcall notations (
       [out retval] dispinterface IXMLDOMNamedNodeMap **notationMap
     );
   };
   [
     uuid(2933BF8F-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMImplementation : IDispatch
   {
     [id(145)]
     HRESULT __stdcall hasFeature (
       [in] BSTR feature,
       [in] BSTR version,
       [out retval] WINBOOL *hasFeature
     );
   };
   [
     uuid(2933BF86-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMElement : IXMLDOMNode
   {
     [id(97), propget]
     HRESULT __stdcall tagName (
       [out retval] BSTR *tagName
     );
     [id(99)]
     HRESULT __stdcall getAttribute (
       [in] BSTR name,
       [out retval] VARIANT *value
     );
     HRESULT __stdcall setAttribute (
       [in] BSTR name,
       [in] VARIANT value
     );
     HRESULT __stdcall removeAttribute (
       [in] BSTR name
     );
     HRESULT __stdcall getAttributeNode (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMAttribute **attributeNode
     );
     HRESULT __stdcall setAttributeNode (
       [in] dispinterface IXMLDOMAttribute *DOMAttribute,
       [out retval] dispinterface IXMLDOMAttribute **attributeNode
     );
     HRESULT __stdcall removeAttributeNode (
       [in] dispinterface IXMLDOMAttribute *DOMAttribute,
       [out retval] dispinterface IXMLDOMAttribute **attributeNode
     );
     HRESULT __stdcall getElementsByTagName (
       [in] BSTR tagName,
       [out retval] dispinterface IXMLDOMNodeList **resultList
     );
     HRESULT __stdcall normalize (void);
   };
   [
     uuid(2933BF85-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMAttribute : IXMLDOMNode
   {
     [id(118), propget]
     HRESULT __stdcall name (
       [out retval] BSTR *attributeName
     );
     [id(120), propget]
     HRESULT __stdcall value (
       [out retval] VARIANT *attributeValue
     );
     [id(120), propput]
     HRESULT __stdcall value (
       [in] VARIANT argNo1
     );
   };
   [
     uuid(3EFAA413-272F-11D2-836F-0000F87A7782),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocumentFragment : IXMLDOMNode
   {
   };
   [
     uuid(2933BF87-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMText : IXMLDOMCharacterData
   {
     [id(123)]
     HRESULT __stdcall splitText (
       [in] long offset,
       [out retval] dispinterface IXMLDOMText **rightHandTextNode
     );
   };
   [
     uuid(2933BF84-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMCharacterData : IXMLDOMNode
   {
     [id(109), propget]
     HRESULT __stdcall data (
       [out retval] BSTR *data
     );
     [id(109), propput]
     HRESULT __stdcall data (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall length (
       [out retval] long *dataLength
     );
     HRESULT __stdcall substringData (
       [in] long offset,
       [in] long count,
       [out retval] BSTR *data
     );
     HRESULT __stdcall appendData (
       [in] BSTR data
     );
     HRESULT __stdcall insertData (
       [in] long offset,
       [in] BSTR data
     );
     HRESULT __stdcall deleteData (
       [in] long offset,
       [in] long count
     );
     HRESULT __stdcall replaceData (
       [in] long offset,
       [in] long count,
       [in] BSTR data
     );
   };
   [
     uuid(2933BF88-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMComment : IXMLDOMCharacterData
   {
   };
   [
     uuid(2933BF8A-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMCDATASection : IXMLDOMText
   {
   };
   [
     uuid(2933BF89-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMProcessingInstruction : IXMLDOMNode
   {
     [id(127), propget]
     HRESULT __stdcall target (
       [out retval] BSTR *name
     );
     [propget]
     HRESULT __stdcall data (
       [out retval] BSTR *value
     );
     [id(128), propput]
     HRESULT __stdcall data (
       [in] BSTR argNo1
     );
   };
   [
     uuid(2933BF8E-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMEntityReference : IXMLDOMNode
   {
   };
   [
     uuid(3EFAA426-272F-11D2-836F-0000F87A7782),
     helpstring("structure for reporting parser errors"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMParseError : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall errorCode (
       [out retval] long *errorCode
     );
     [id(179), propget]
     HRESULT __stdcall url (
       [out retval] BSTR *urlString
     );
     [propget]
     HRESULT __stdcall reason (
       [out retval] BSTR *reasonString
     );
     [propget]
     HRESULT __stdcall srcText (
       [out retval] BSTR *sourceString
     );
     [propget]
     HRESULT __stdcall line (
       [out retval] long *lineNumber
     );
     [propget]
     HRESULT __stdcall linepos (
       [out retval] long *linePosition
     );
     [propget]
     HRESULT __stdcall filepos (
       [out retval] long *filePosition
     );
   };
   [
     uuid(F8334D5D-568E-4075-875F-9DF341506640),
     helpstring("IProvideWinSATResultsInfo Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IProvideWinSATResultsInfo : IDispatch
   {
     [id(1)]
     HRESULT __stdcall GetAssessmentInfo (
       [in] WINSAT_ASSESSMENT_TYPE assessment,
       [out retval] dispinterface IProvideWinSATAssessmentInfo **ppinfo
     );
     [propget]
     HRESULT __stdcall AssessmentState (
       [out retval] WINSAT_ASSESSMENT_STATE *state
     );
     [propget]
     HRESULT __stdcall AssessmentDateTime (
       [out retval] VARIANT *fileTime
     );
     [propget]
     HRESULT __stdcall SystemRating (
       [out retval] float *level
     );
     [propget]
     HRESULT __stdcall RatingStateDesc (
       [out retval] BSTR *Description
     );
   };
   [
     uuid(0CD1C380-52D3-4678-AC6F-E929E480BE9E),
     helpstring("IProvideWinSATAssessmentInfo Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IProvideWinSATAssessmentInfo : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Score (
       [out retval] float *Score
     );
     [id(3), propget]
     HRESULT __stdcall Title (
       [out retval] BSTR *Title
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *Description
     );
   };
   [
     uuid(0B89ED1D-6398-4FEA-87FC-567D8D19176F),
     helpstring("IQueryWinSAT Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IQueryAllWinSATAssessments : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall AllXML (
       [in] BSTR xPath,
       [in opt] BSTR namespaces = L"",
       [out retval] dispinterface IXMLDOMNodeList **ppDomNodeList
     );
   };
   [
     uuid(618736E0-3C3D-11CF-810C-00AA00389B71),
     hidden,
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IAccessible : IDispatch
   {
     [id(-5000), propget, hidden]
     HRESULT __stdcall accParent (
       [out retval] IDispatch **ppdispParent
     );
     [id(-5001), propget, hidden]
     HRESULT __stdcall accChildCount (
       [out retval] long *pcountChildren
     );
     [id(-5002), propget, hidden]
     HRESULT __stdcall accChild (
       [in] VARIANT varChild,
       [out retval] IDispatch **ppdispChild
     );
     [id(-5003), propget, hidden]
     HRESULT __stdcall accName (
       [in opt] VARIANT varChild,
       [out retval] BSTR *pszName
     );
     [id(-5004), propget, hidden]
     HRESULT __stdcall accValue (
       [in opt] VARIANT varChild,
       [out retval] BSTR *pszValue
     );
     [id(-5005), propget, hidden]
     HRESULT __stdcall accDescription (
       [in opt] VARIANT varChild,
       [out retval] BSTR *pszDescription
     );
     [id(-5006), propget, hidden]
     HRESULT __stdcall accRole (
       [in opt] VARIANT varChild,
       [out retval] VARIANT *pvarRole
     );
     [id(-5007), propget, hidden]
     HRESULT __stdcall accState (
       [in opt] VARIANT varChild,
       [out retval] VARIANT *pvarState
     );
     [id(-5008), propget, hidden]
     HRESULT __stdcall accHelp (
       [in opt] VARIANT varChild,
       [out retval] BSTR *pszHelp
     );
     [id(-5009), propget, hidden]
     HRESULT __stdcall accHelpTopic (
       [out] BSTR *pszHelpFile,
       [in opt] VARIANT varChild,
       [out retval] long *pidTopic
     );
     [id(-5010), propget, hidden]
     HRESULT __stdcall accKeyboardShortcut (
       [in opt] VARIANT varChild,
       [out retval] BSTR *pszKeyboardShortcut
     );
     [id(-5011), propget, hidden]
     HRESULT __stdcall accFocus (
       [out retval] VARIANT *pvarChild
     );
     [id(-5012), propget, hidden]
     HRESULT __stdcall accSelection (
       [out retval] VARIANT *pvarChildren
     );
     [id(-5013), propget, hidden]
     HRESULT __stdcall accDefaultAction (
       [in opt] VARIANT varChild,
       [out retval] BSTR *pszDefaultAction
     );
     [id(-5014), hidden]
     HRESULT __stdcall accSelect (
       [in] long flagsSelect,
       [in opt] VARIANT varChild
     );
     [id(-5015), hidden]
     HRESULT __stdcall accLocation (
       [out] long *pxLeft,
       [out] long *pyTop,
       [out] long *pcxWidth,
       [out] long *pcyHeight,
       [in opt] VARIANT varChild
     );
     [id(-5016), hidden]
     HRESULT __stdcall accNavigate (
       [in] long navDir,
       [in opt] VARIANT varStart,
       [out retval] VARIANT *pvarEndUpAt
     );
     [id(-5017), hidden]
     HRESULT __stdcall accHitTest (
       [in] long xLeft,
       [in] long yTop,
       [out retval] VARIANT *pvarChild
     );
     [id(-5018), hidden]
     HRESULT __stdcall accDoDefaultAction (
       [in opt] VARIANT varChild
     );
     [id(-5003), propput, hidden]
     HRESULT __stdcall accName (
       [in opt] VARIANT varChild,
       [in] BSTR argNo2
     );
     [id(-5004), propput, hidden]
     HRESULT __stdcall accValue (
       [in opt] VARIANT varChild,
       [in] BSTR argNo2
     );
   };

};

/* Interface declarations.  */
[
  uuid(D983FC50-F5BF-49D5-B5ED-CCCB18AA7FC1)
]
interface IInitiateWinSATAssessment : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall InitiateAssessment (
    [in] LPWSTR cmdLine,
    [in opt] interface IWinSATInitiateEvents *pCallbacks,
    [in opt] wireHWND callerHwnd
  );
  HRESULT __stdcall InitiateFormalAssessment (
    [in opt] interface IWinSATInitiateEvents *pCallbacks,
    [in opt] wireHWND callerHwnd
  );
  HRESULT __stdcall CancelAssessment (void);
};
[
  uuid(262A1918-BA0D-41D5-92C2-FAB4633EE74F)
]
interface IWinSATInitiateEvents : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall WinSATComplete (
    [in] HRESULT hresult,
    [in] LPWSTR strDescription
  );
  HRESULT __stdcall WinSATUpdate (
    [in] unsigned int uCurrentTick,
    [in] unsigned int uTickTotal,
    [in] LPWSTR strCurrentState
  );
};
[
  uuid(A9F4ADE0-871A-42A3-B813-3078D25162C9),
  helpstring("IProvideWinSATVisuals Interface")
]
interface IProvideWinSATVisuals : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall get_Bitmap (
    [in] WINSAT_BITMAP_SIZE bitmapSize,
    WINSAT_ASSESSMENT_STATE state,
    float rating,
    [out] wireHBITMAP *pBitmap
  );
};
[
  uuid(30E6018A-94A8-4FF8-A69A-71B67413F07B),
  dispatchable
]
interface IAccessibleWinSAT : IAccessible
{
  [id(1610809344)]
  HRESULT __stdcall SetAccessiblityData (
    [in] LPWSTR wsName,
    [in] LPWSTR wsValue,
    [in] LPWSTR wsDesc
  );
};
[
  uuid(BC9A6A9F-AD4E-420E-9953-B34671E9DF22)
]
interface IQueryOEMWinSATCustomization : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetOEMPrePopulationInfo (
    [out retval] WINSAT_OEM_CUSTOMIZATION_STATE *state
  );
};

