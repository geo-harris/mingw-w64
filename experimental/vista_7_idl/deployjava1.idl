/* Automated generated idl file <deployhelperlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Union record forward declarations.  */
dispinterface IBrowserJVM;
dispinterface IRunningJVM;
dispinterface IJVM;
dispinterface IJVMList;
dispinterface IDeployHelper;

/* Union record forward declarations.  */
coclass DeployHelper;

[
  uuid(07836B29-446F-41FE-9120-DC179CA43452),
  version(1.0),
  helpstring("DeployHelper 1.0 Type Library")
]
library deployhelperlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA),
     helpstring("DeployHelper Class"),
     cancreate
   ]
   coclass DeployHelper
   {
     dispinterface IDeployHelper;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(C119A577-E2C6-4D94-836D-FDFBE198007C),
     helpstring("IBrowserJVM Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IBrowserJVM : IDispatch
   {
     [id(256), propget]
     HRESULT __stdcall version (
       [out retval] BSTR *pVal
     );
     [id(512)]
     HRESULT __stdcall isBrowserDefault (
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall isRunning (
       [out retval] VARIANT *pVal
     );
   };
   [
     uuid(C7B59637-9D64-4FF4-9417-D777C69896EB),
     helpstring("IRunningJVM Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IRunningJVM : IDispatch
   {
     [id(256), propget]
     HRESULT __stdcall version (
       [out retval] BSTR *pVal
     );
     [id(512)]
     HRESULT __stdcall isRunning (
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall isBrowserDefault (
       [out retval] VARIANT *pVal
     );
   };
   [
     uuid(F3137586-FBDF-4C6C-973E-90A329C9C531),
     helpstring("IJVM Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IJVM : IDispatch
   {
     [id(256), propget]
     HRESULT __stdcall version (
       [out retval] BSTR *pVal
     );
     [id(512)]
     HRESULT __stdcall isBrowserDefault (
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall isRunning (
       [out retval] VARIANT *pVal
     );
   };
   [
     uuid(F745B077-81C9-4365-B2F9-B86E528913DF),
     helpstring("IJVMList Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IJVMList : IDispatch
   {
     [id(256), propget]
     HRESULT __stdcall Count (
       [out retval] VARIANT *pVal
     );
     [id(512)]
     HRESULT __stdcall get (
       long Index,
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall getLength (
       [out retval] VARIANT *pVal
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pVal
     );
     [id(0), propget]
     HRESULT __stdcall Item (
       long Index,
       [out retval] VARIANT *pVal
     );
   };
   [
     uuid(890D4C8A-CA7E-4BA9-B1C7-E89ECF75DE05),
     helpstring("IDeployHelper Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeployHelper : IDispatch
   {
     [id(256), propget]
     HRESULT __stdcall browserJVM (
       [out retval] VARIANT *pVal
     );
     [propget]
     HRESULT __stdcall runningJVM (
       [out retval] VARIANT *pVal
     );
     [propget]
     HRESULT __stdcall jvms (
       [out retval] VARIANT *pVal
     );
     [propget]
     HRESULT __stdcall version (
       [out retval] BSTR *pVal
     );
     [id(512)]
     HRESULT __stdcall compareVersion (
       VARIANT *ver1,
       VARIANT *ver2,
       [out retval] VARIANT *pVal
     );
     [id(514)]
     HRESULT __stdcall launch (
       VARIANT *pJNLP,
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall installLatestJRE (
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall installJRE (
       VARIANT *pVersion,
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall getStaticCLSID (
       VARIANT *pVer,
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall getDynamicCLSID (
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall setInstallerType (
       VARIANT *pInstallerType,
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall setAdditionalPackages (
       VARIANT *pPackageList,
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall isAutoUpdateEnabled (
       [out retval] VARIANT *pVal
     );
     [id(528)]
     HRESULT __stdcall setAutoUpdateEnabled (
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall isPlugin2 (
       [out retval] VARIANT *pVal
     );
   };

};

