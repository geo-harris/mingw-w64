/* Automated generated idl file <mmc20>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Union record forward declarations.  */
dispinterface _Application;
dispinterface Document;
dispinterface Views;
dispinterface View;
dispinterface Node;
dispinterface Nodes;
dispinterface ContextMenu;
dispinterface MenuItem;
dispinterface Frame;
dispinterface Columns;
dispinterface Column;
dispinterface SnapIns;
dispinterface SnapIn;
dispinterface Extensions;
dispinterface Extension;
dispinterface Properties;
dispinterface Property;
dispinterface ScopeNamespace;
dispinterface _AppEvents;
dispinterface AppEvents;
dispinterface _EventConnector;

/* Union record forward declarations.  */
coclass Application;
coclass AppEventsDHTMLConnector;

/* Enumeration declarations.  */
[
  helpstring("Document Mode enumeration")
]
enum DocumentMode
{
  DocumentMode_Author = (int) 201326592,
  DocumentMode_User = (int) 201326593,
  DocumentMode_User_MDI = (int) 201326594,
  DocumentMode_User_SDI = (int) 201326595
};
[
  helpstring("List View Mode enumeration")
]
enum ListViewMode
{
  ListMode_Small_Icons = (int) 201326592,
  ListMode_Large_Icons = (int) 201326593,
  ListMode_List = (int) 201326594,
  ListMode_Detail = (int) 201326595,
  ListMode_Filtered = (int) 201326596
};
[
  helpstring("View Options enumeration")
]
enum ViewOptions
{
  ViewOption_Default = (int) 201326592,
  ViewOption_ScopeTreeHidden = (int) 201326593,
  ViewOption_NoToolBars = (int) 201326594,
  ViewOption_NotPersistable = (int) 201326596,
  ViewOption_ActionPaneHidden = (int) 201326600
};
[
  helpstring("List Export Option enumeration")
]
enum ExportListOptions
{
  ExportListOptions_Default = (int) 201326592,
  ExportListOptions_Unicode = (int) 201326593,
  ExportListOptions_TabDelimited = (int) 201326594,
  ExportListOptions_SelectedItemsOnly = (int) 201326596
};
enum ColumnSortOrder
{
  SortOrder_Ascending = (int) 201326592,
  SortOrder_Descending = (int) 201326593
};

/* Type definitions.  */
[
  helpstring("Document Mode enumeration")
]
typedef enum DocumentMode _DocumentMode;
[
  helpstring("List View Mode enumeration")
]
typedef enum ListViewMode _ListViewMode;
[
  helpstring("View Options enumeration")
]
typedef enum ViewOptions _ViewOptions;
[
  helpstring("List Export Option enumeration")
]
typedef enum ExportListOptions _ExportListOptions;

[
  uuid(8E80422B-CAC4-472B-B272-9635F1DFEF3B),
  version(1.0),
  helpstring("Microsoft Management Console 2.0")
]
library mmc20
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(49B2791A-B1AE-4C90-9B8E-E860BA07F889),
     cancreate
   ]
   coclass Application
   {
     dispinterface _Application;
     dispinterface AppEvents;
   };
   [
     uuid(ADE6444B-C91F-4E37-92A4-5BB430A33340),
     helpstring("Connector class to enable access from DHTML page to the events of current MMC instance"),
     cancreate
   ]
   coclass AppEventsDHTMLConnector
   {
     dispinterface _EventConnector;
     dispinterface AppEvents;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(A3AFB9CC-B653-4741-86AB-F0470EC1384C),
     helpstring("_Application Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface _Application : IDispatch
   {
     [id(2)]
     void __stdcall Help (void);
     void __stdcall Quit (void);
     [propget]
     HRESULT __stdcall Document (
       [out retval] dispinterface Document **Document
     );
     HRESULT __stdcall Load (
       [in] BSTR Filename
     );
     [propget]
     HRESULT __stdcall Frame (
       [out retval] dispinterface Frame **Frame
     );
     [propget]
     HRESULT __stdcall Visible (
       [out retval] long *Visible
     );
     HRESULT __stdcall Show (void);
     HRESULT __stdcall Hide (void);
     [propget]
     HRESULT __stdcall UserControl (
       [out retval] long *UserControl
     );
     [id(10), propput]
     HRESULT __stdcall UserControl (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall VersionMajor (
       [out retval] long *VersionMajor
     );
     [propget]
     HRESULT __stdcall VersionMinor (
       [out retval] long *VersionMinor
     );
   };
   [
     uuid(225120D6-1E0F-40A3-93FE-1079E6A8017B),
     helpstring("Document Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Document : IDispatch
   {
     [id(1)]
     HRESULT __stdcall Save (void);
     HRESULT __stdcall SaveAs (
       [in] BSTR Filename
     );
     HRESULT __stdcall Close (
       [in] long SaveChanges
     );
     [propget]
     HRESULT __stdcall Views (
       [out retval] dispinterface Views **Views
     );
     [propget]
     HRESULT __stdcall SnapIns (
       [out retval] dispinterface SnapIns **SnapIns
     );
     [propget]
     HRESULT __stdcall ActiveView (
       [out retval] dispinterface View **View
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [id(7), propput]
     HRESULT __stdcall Name (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Location (
       [out retval] BSTR *Location
     );
     [propget]
     HRESULT __stdcall IsSaved (
       [out retval] long *IsSaved
     );
     [propget]
     HRESULT __stdcall Mode (
       [out retval] enum DocumentMode *Mode
     );
     [id(10), propput]
     HRESULT __stdcall Mode (
       [in] enum DocumentMode argNo1
     );
     [propget]
     HRESULT __stdcall RootNode (
       [out retval] dispinterface Node **Node
     );
     [propget]
     HRESULT __stdcall ScopeNamespace (
       [out retval] dispinterface ScopeNamespace **ScopeNamespace
     );
     HRESULT __stdcall CreateProperties (
       [out retval] dispinterface Properties **Properties
     );
     [id(20), propget]
     HRESULT __stdcall Application (
       [out retval] dispinterface _Application **Application
     );
   };
   [
     uuid(D6B8C29D-A1FF-4D72-AAB0-E381E9B9338D),
     helpstring("Views Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Views : IDispatch
   {
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface View **View
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     HRESULT __stdcall Add (
       [in] dispinterface Node *Node,
       [in opt] enum ViewOptions ViewOptions = (int) 201326592
     );
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
   };
   [
     uuid(6EFC2DA2-B38C-457E-9ABB-ED2D189B8C38),
     helpstring("View Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface View : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall ActiveScopeNode (
       [out retval] dispinterface Node **Node
     );
     [id(1), propput]
     HRESULT __stdcall ActiveScopeNode (
       [in] dispinterface Node *argNo1
     );
     [propget]
     HRESULT __stdcall Selection (
       [out retval] dispinterface Nodes **Nodes
     );
     [propget]
     HRESULT __stdcall ListItems (
       [out retval] dispinterface Nodes **Nodes
     );
     HRESULT __stdcall SnapinScopeObject (
       [in opt] VARIANT ScopeNode,
       [out retval] IDispatch **ScopeNodeObject
     );
     HRESULT __stdcall SnapinSelectionObject (
       [out retval] IDispatch **SelectionObject
     );
     [id(9)]
     HRESULT __stdcall Is (
       [in] dispinterface View *View,
       [out retval] WINBOOL *TheSame
     );
     [propget]
     HRESULT __stdcall Document (
       [out retval] dispinterface Document **Document
     );
     [id(20)]
     HRESULT __stdcall SelectAll (void);
     HRESULT __stdcall Select (
       [in] dispinterface Node *Node
     );
     HRESULT __stdcall Deselect (
       [in] dispinterface Node *Node
     );
     HRESULT __stdcall IsSelected (
       [in] dispinterface Node *Node,
       [out retval] long *IsSelected
     );
     [id(40)]
     HRESULT __stdcall DisplayScopeNodePropertySheet (
       [in opt] VARIANT ScopeNode
     );
     HRESULT __stdcall DisplaySelectionPropertySheet (void);
     HRESULT __stdcall CopyScopeNode (
       [in opt] VARIANT ScopeNode
     );
     HRESULT __stdcall CopySelection (void);
     HRESULT __stdcall DeleteScopeNode (
       [in opt] VARIANT ScopeNode
     );
     HRESULT __stdcall DeleteSelection (void);
     HRESULT __stdcall RenameScopeNode (
       [in] BSTR NewName,
       [in opt] VARIANT ScopeNode
     );
     HRESULT __stdcall RenameSelectedItem (
       [in] BSTR NewName
     );
     [propget]
     HRESULT __stdcall ScopeNodeContextMenu (
       [in opt] VARIANT ScopeNode,
       [out retval] dispinterface ContextMenu **ContextMenu
     );
     [propget]
     HRESULT __stdcall SelectionContextMenu (
       [out retval] dispinterface ContextMenu **ContextMenu
     );
     HRESULT __stdcall RefreshScopeNode (
       [in opt] VARIANT ScopeNode
     );
     HRESULT __stdcall RefreshSelection (void);
     HRESULT __stdcall ExecuteSelectionMenuItem (
       [in] BSTR MenuItemPath
     );
     HRESULT __stdcall ExecuteScopeNodeMenuItem (
       [in] BSTR MenuItemPath,
       [in opt] VARIANT ScopeNode
     );
     HRESULT __stdcall ExecuteShellCommand (
       [in] BSTR Command,
       [in] BSTR Directory,
       [in] BSTR Parameters,
       [in] BSTR WindowState
     );
     [id(60), propget]
     HRESULT __stdcall Frame (
       [out retval] dispinterface Frame **Frame
     );
     HRESULT __stdcall Close (void);
     [propget]
     HRESULT __stdcall ScopeTreeVisible (
       [out retval] long *Visible
     );
     [id(62), propput]
     HRESULT __stdcall ScopeTreeVisible (
       [in] long argNo1
     );
     [id(66)]
     HRESULT __stdcall Back (void);
     HRESULT __stdcall Forward (void);
     [propput]
     HRESULT __stdcall StatusBarText (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Memento (
       [out retval] BSTR *Memento
     );
     HRESULT __stdcall ViewMemento (
       [in] BSTR Memento
     );
     [id(80), propget]
     HRESULT __stdcall Columns (
       [out retval] dispinterface Columns **Columns
     );
     [propget]
     HRESULT __stdcall CellContents (
       [in] dispinterface Node *Node,
       [in] long Column,
       [out retval] BSTR *CellContents
     );
     HRESULT __stdcall ExportList (
       [in] BSTR File,
       [in opt] enum ExportListOptions exportoptions = (int) 201326592
     );
     [propget]
     HRESULT __stdcall ListViewMode (
       [out retval] enum ListViewMode *Mode
     );
     [id(83), propput]
     HRESULT __stdcall ListViewMode (
       [in] enum ListViewMode argNo1
     );
     [id(100), propget]
     HRESULT __stdcall ControlObject (
       [out retval] IDispatch **Control
     );
   };
   [
     uuid(F81ED800-7839-4447-945D-8E15DA59CA55),
     helpstring("Node Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Node : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall Property (
       [in] BSTR PropertyName,
       [out retval] BSTR *PropertyValue
     );
     [propget]
     HRESULT __stdcall Bookmark (
       [out retval] BSTR *Bookmark
     );
     HRESULT __stdcall IsScopeNode (
       [out retval] long *IsScopeNode
     );
     [propget]
     HRESULT __stdcall Nodetype (
       [out retval] BSTR *Nodetype
     );
   };
   [
     uuid(313B01DF-B22F-4D42-B1B8-483CDCF51D35),
     helpstring("Nodes Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Nodes : IDispatch
   {
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface Node **Node
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
   };
   [
     uuid(DAB39CE0-25E6-4E07-8362-BA9C95706545),
     helpstring("ContextMenu Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ContextMenu : IDispatch
   {
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] VARIANT IndexOrPath,
       [out retval] dispinterface MenuItem **MenuItem
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
   };
   [
     uuid(0178FAD1-B361-4B27-96AD-67C57EBF2E1D),
     helpstring("MenuItem Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface MenuItem : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall DisplayName (
       [out retval] BSTR *DisplayName
     );
     [propget]
     HRESULT __stdcall LanguageIndependentName (
       [out retval] BSTR *LanguageIndependentName
     );
     [propget]
     HRESULT __stdcall Path (
       [out retval] BSTR *Path
     );
     [propget]
     HRESULT __stdcall LanguageIndependentPath (
       [out retval] BSTR *LanguageIndependentPath
     );
     HRESULT __stdcall Execute (void);
     [propget]
     HRESULT __stdcall Enabled (
       [out retval] long *Enabled
     );
   };
   [
     uuid(E5E2D970-5BB3-4306-8804-B0968A31C8E6),
     helpstring("Frame Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Frame : IDispatch
   {
     [id(1)]
     HRESULT __stdcall Maximize (void);
     HRESULT __stdcall Minimize (void);
     HRESULT __stdcall Restore (void);
     [propget]
     HRESULT __stdcall Top (
       [out retval] int *Top
     );
     [id(4), propput]
     HRESULT __stdcall Top (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall Bottom (
       [out retval] int *Bottom
     );
     [id(5), propput]
     HRESULT __stdcall Bottom (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall Left (
       [out retval] int *Left
     );
     [id(6), propput]
     HRESULT __stdcall Left (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall Right (
       [out retval] int *Right
     );
     [id(7), propput]
     HRESULT __stdcall Right (
       [in] int argNo1
     );
   };
   [
     uuid(383D4D97-FC44-478B-B139-6323DC48611C),
     helpstring("Columns Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Columns : IDispatch
   {
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface Column **Column
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
   };
   [
     uuid(FD1C5F63-2B16-4D06-9AB3-F45350B940AB),
     helpstring("Column Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Column : IDispatch
   {
     [id(0)]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall Width (
       [out retval] long *Width
     );
     [id(1), propput]
     HRESULT __stdcall Width (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall DisplayPosition (
       [out retval] long *DisplayPosition
     );
     [id(2), propput]
     HRESULT __stdcall DisplayPosition (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Hidden (
       [out retval] long *Hidden
     );
     [id(3), propput]
     HRESULT __stdcall Hidden (
       [in] long argNo1
     );
     HRESULT __stdcall SetAsSortColumn (
       [in] enum ColumnSortOrder SortOrder
     );
     HRESULT __stdcall IsSortColumn (
       [out retval] long *IsSortColumn
     );
   };
   [
     uuid(2EF3DE1D-B12A-49D1-92C5-0B00798768F1),
     helpstring("SnapIns Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface SnapIns : IDispatch
   {
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface SnapIn **SnapIn
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     HRESULT __stdcall Add (
       [in] BSTR SnapinNameOrCLSID,
       [in opt] VARIANT ParentSnapin,
       [in opt] VARIANT Properties,
       [out retval] dispinterface SnapIn **SnapIn
     );
     HRESULT __stdcall Remove (
       [in] dispinterface SnapIn *SnapIn
     );
   };
   [
     uuid(3BE910F6-3459-49C6-A1BB-41E6BE9DF3EA),
     helpstring("SnapIn Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface SnapIn : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall Vendor (
       [out retval] BSTR *Vendor
     );
     [propget]
     HRESULT __stdcall Version (
       [out retval] BSTR *Version
     );
     [propget]
     HRESULT __stdcall Extensions (
       [out retval] dispinterface Extensions **Extensions
     );
     [propget]
     HRESULT __stdcall SnapinCLSID (
       [out retval] BSTR *SnapinCLSID
     );
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface Properties **Properties
     );
     HRESULT __stdcall EnableAllExtensions (
       [in] long Enable
     );
   };
   [
     uuid(82DBEA43-8CA4-44BC-A2CA-D18741059EC8),
     helpstring("Extensions Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Extensions : IDispatch
   {
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface Extension **Extension
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
   };
   [
     uuid(AD4D6CA6-912F-409B-A26E-7FD234AEF542),
     helpstring("Extension Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Extension : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall Vendor (
       [out retval] BSTR *Vendor
     );
     [propget]
     HRESULT __stdcall Version (
       [out retval] BSTR *Version
     );
     [propget]
     HRESULT __stdcall Extensions (
       [out retval] dispinterface Extensions **Extensions
     );
     [propget]
     HRESULT __stdcall SnapinCLSID (
       [out retval] BSTR *SnapinCLSID
     );
     HRESULT __stdcall EnableAllExtensions (
       [in] long Enable
     );
     HRESULT __stdcall Enable (
       [in] long Enable
     );
   };
   [
     uuid(2886ABC2-A425-42B2-91C6-E25C0E04581C),
     helpstring("Properties Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Properties : IDispatch
   {
     [id(-4), propget]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **retval
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] BSTR Name,
       [out retval] dispinterface Property **Property
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     HRESULT __stdcall Remove (
       [in] BSTR Name
     );
   };
   [
     uuid(4600C3A5-E301-41D8-B6D0-EF2E4212E0CA),
     helpstring("Property Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface Property : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Value (
       [out retval] VARIANT *Value
     );
     [id(0), propput]
     HRESULT __stdcall Value (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
   };
   [
     uuid(EBBB48DC-1A3B-4D86-B786-C21B28389012),
     helpstring("ScopeNamespace Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ScopeNamespace : IDispatch
   {
     [id(1)]
     HRESULT __stdcall GetParent (
       [in] dispinterface Node *Node,
       [out retval] dispinterface Node **Parent
     );
     HRESULT __stdcall GetChild (
       [in] dispinterface Node *Node,
       [out retval] dispinterface Node **Child
     );
     HRESULT __stdcall GetNext (
       [in] dispinterface Node *Node,
       [out retval] dispinterface Node **Next
     );
     HRESULT __stdcall GetRoot (
       [out retval] dispinterface Node **Root
     );
     HRESULT __stdcall Expand (
       [in] dispinterface Node *Node
     );
   };
   [
     uuid(DE46CBDD-53F5-4635-AF54-4FE71E923D3F),
     helpstring("_AppEvents Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface _AppEvents : IDispatch
   {
     [id(1)]
     HRESULT __stdcall OnQuit (
       [in] dispinterface _Application *Application
     );
     HRESULT __stdcall OnDocumentOpen (
       [in] dispinterface Document *Document,
       [in] long New
     );
     HRESULT __stdcall OnDocumentClose (
       [in] dispinterface Document *Document
     );
     HRESULT __stdcall OnSnapInAdded (
       [in] dispinterface Document *Document,
       [in] dispinterface SnapIn *SnapIn
     );
     HRESULT __stdcall OnSnapInRemoved (
       [in] dispinterface Document *Document,
       [in] dispinterface SnapIn *SnapIn
     );
     HRESULT __stdcall OnNewView (
       [in] dispinterface View *View
     );
     HRESULT __stdcall OnViewClose (
       [in] dispinterface View *View
     );
     HRESULT __stdcall OnViewChange (
       [in] dispinterface View *View,
       [in] dispinterface Node *NewOwnerNode
     );
     HRESULT __stdcall OnSelectionChange (
       [in] dispinterface View *View,
       [in] dispinterface Nodes *NewNodes
     );
     [id(11)]
     HRESULT __stdcall OnContextMenuExecuted (
       [in] dispinterface MenuItem *MenuItem
     );
     HRESULT __stdcall OnToolbarButtonClicked (void);
     HRESULT __stdcall OnListUpdated (
       [in] dispinterface View *View
     );
   };
   [
     uuid(FC7A4252-78AC-4532-8C5A-563CFE138863),
     helpstring("AppEvents Interface"),
     dispatchable
   ]
   dispinterface AppEvents : _AppEvents
   {
   };
   [
     uuid(C0BCCD30-DE44-4528-8403-A05A6A1CC8EA),
     helpstring("_EventConnector Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface _EventConnector : IDispatch
   {
     [id(1)]
     HRESULT __stdcall ConnectTo (
       [in] dispinterface _Application *Application
     );
     HRESULT __stdcall Disconnect (void);
   };

};

