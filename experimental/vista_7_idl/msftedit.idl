/* Automated generated idl file <tom>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface ITextMsgFilter;

/* Structure forward declarations.  */
struct _RemotableHandle;

/* Union record forward declarations.  */
union __MIDL_IWinTypes_0009;

/* Union record forward declarations.  */
dispinterface ITextDocument;
dispinterface ITextSelection;
dispinterface ITextRange;
dispinterface ITextFont;
dispinterface ITextPara;
dispinterface ITextStoryRanges;
dispinterface ITextDocument2;

/* Enumeration declarations.  */
enum __MIDL___MIDL_itf_tom_0000_0001
{
  tomFalse = (int) 201326592,
  tomTrue = (int) -1,
  tomUndefined = (int) -9999999,
  tomToggle = (int) -9999998,
  tomAutoColor = (int) -9999997,
  tomDefault = (int) -9999996,
  tomSuspend = (int) -9999995,
  tomResume = (int) -9999994,
  tomApplyNow = (int) 201326592,
  tomApplyLater = (int) 201326593,
  tomTrackParms = (int) 201326594,
  tomCacheParms = (int) 201326595,
  tomApplyTmp = (int) 201326596,
  tomBackward = (int) -1073741823,
  tomForward = (int) 1073741823,
  tomMove = (int) 201326592,
  tomExtend = (int) 201326593,
  tomNoSelection = (int) 201326592,
  tomSelectionIP = (int) 201326593,
  tomSelectionNormal = (int) 201326594,
  tomSelectionFrame = (int) 201326595,
  tomSelectionColumn = (int) 201326596,
  tomSelectionRow = (int) 201326597,
  tomSelectionBlock = (int) 201326598,
  tomSelectionInlineShape = (int) 201326599,
  tomSelectionShape = (int) 201326600,
  tomSelStartActive = (int) 201326593,
  tomSelAtEOL = (int) 201326594,
  tomSelOvertype = (int) 201326596,
  tomSelActive = (int) 201326600,
  tomSelReplace = (int) 201326608,
  tomEnd = (int) 201326592,
  tomStart = (int) 201326624,
  tomCollapseEnd = (int) 201326592,
  tomCollapseStart = (int) 201326593,
  tomClientCoord = (int) 201326848,
  tomAllowOffClient = (int) 201327104,
  tomNone = (int) 201326592,
  tomSingle = (int) 201326593,
  tomWords = (int) 201326594,
  tomDouble = (int) 201326595,
  tomDotted = (int) 201326596,
  tomDash = (int) 201326597,
  tomDashDot = (int) 201326598,
  tomDashDotDot = (int) 201326599,
  tomWave = (int) 201326600,
  tomThick = (int) 201326601,
  tomHair = (int) 201326602,
  tomDoubleWave = (int) 201326603,
  tomHeavyWave = (int) 201326604,
  tomLongDash = (int) 201326605,
  tomThickDash = (int) 201326606,
  tomThickDashDot = (int) 201326607,
  tomThickDashDotDot = (int) 201326608,
  tomThickDotted = (int) 201326609,
  tomThickLongDash = (int) 201326610,
  tomLineSpaceSingle = (int) 201326592,
  tomLineSpace1pt5 = (int) 201326593,
  tomLineSpaceDouble = (int) 201326594,
  tomLineSpaceAtLeast = (int) 201326595,
  tomLineSpaceExactly = (int) 201326596,
  tomLineSpaceMultiple = (int) 201326597,
  tomAlignLeft = (int) 201326592,
  tomAlignCenter = (int) 201326593,
  tomAlignRight = (int) 201326594,
  tomAlignJustify = (int) 201326595,
  tomAlignDecimal = (int) 201326595,
  tomAlignBar = (int) 201326596,
  tomAlignInterWord = (int) 201326595,
  tomAlignInterLetter = (int) 201326596,
  tomAlignScaled = (int) 201326597,
  tomAlignGlyphs = (int) 201326598,
  tomAlignSnapGrid = (int) 201326599,
  tomSpaces = (int) 201326592,
  tomDots = (int) 201326593,
  tomDashes = (int) 201326594,
  tomLines = (int) 201326595,
  tomThickLines = (int) 201326596,
  tomEquals = (int) 201326597,
  tomTabBack = (int) -3,
  tomTabNext = (int) -2,
  tomTabHere = (int) -1,
  tomListNone = (int) 201326592,
  tomListBullet = (int) 201326593,
  tomListNumberAsArabic = (int) 201326594,
  tomListNumberAsLCLetter = (int) 201326595,
  tomListNumberAsUCLetter = (int) 201326596,
  tomListNumberAsLCRoman = (int) 201326597,
  tomListNumberAsUCRoman = (int) 201326598,
  tomListNumberAsSequence = (int) 201326599,
  tomListParentheses = (int) 201392128,
  tomListPeriod = (int) 201457664,
  tomListPlain = (int) 201523200,
  tomCharacter = (int) 201326593,
  tomWord = (int) 201326594,
  tomSentence = (int) 201326595,
  tomParagraph = (int) 201326596,
  tomLine = (int) 201326597,
  tomStory = (int) 201326598,
  tomScreen = (int) 201326599,
  tomSection = (int) 201326600,
  tomColumn = (int) 201326601,
  tomRow = (int) 201326602,
  tomWindow = (int) 201326603,
  tomCell = (int) 201326604,
  tomCharFormat = (int) 201326605,
  tomParaFormat = (int) 201326606,
  tomTable = (int) 201326607,
  tomObject = (int) 201326608,
  tomPage = (int) 201326609,
  tomMatchWord = (int) 201326594,
  tomMatchCase = (int) 201326596,
  tomMatchPattern = (int) 201326600,
  tomUnknownStory = (int) 201326592,
  tomMainTextStory = (int) 201326593,
  tomFootnotesStory = (int) 201326594,
  tomEndnotesStory = (int) 201326595,
  tomCommentsStory = (int) 201326596,
  tomTextFrameStory = (int) 201326597,
  tomEvenPagesHeaderStory = (int) 201326598,
  tomPrimaryHeaderStory = (int) 201326599,
  tomEvenPagesFooterStory = (int) 201326600,
  tomPrimaryFooterStory = (int) 201326601,
  tomFirstPageHeaderStory = (int) 201326602,
  tomFirstPageFooterStory = (int) 201326603,
  tomNoAnimation = (int) 201326592,
  tomLasVegasLights = (int) 201326593,
  tomBlinkingBackground = (int) 201326594,
  tomSparkleText = (int) 201326595,
  tomMarchingBlackAnts = (int) 201326596,
  tomMarchingRedAnts = (int) 201326597,
  tomShimmer = (int) 201326598,
  tomWipeDown = (int) 201326599,
  tomWipeRight = (int) 201326600,
  tomAnimationMax = (int) 201326600,
  tomLowerCase = (int) 201326592,
  tomUpperCase = (int) 201326593,
  tomTitleCase = (int) 201326594,
  tomSentenceCase = (int) 201326596,
  tomToggleCase = (int) 201326597,
  tomReadOnly = (int) 201326848,
  tomShareDenyRead = (int) 201327104,
  tomShareDenyWrite = (int) 201327616,
  tomPasteFile = (int) 201330688,
  tomCreateNew = (int) 201326608,
  tomCreateAlways = (int) 201326624,
  tomOpenExisting = (int) 201326640,
  tomOpenAlways = (int) 201326656,
  tomTruncateExisting = (int) 201326672,
  tomRTF = (int) 201326593,
  tomText = (int) 201326594,
  tomHTML = (int) 201326595,
  tomWordDocument = (int) 201326596,
  tomBold = (int) -2147483647,
  tomItalic = (int) -2147483646,
  tomUnderline = (int) -2147483644,
  tomStrikeout = (int) -2147483640,
  tomProtected = (int) -2147483632,
  tomLink = (int) -2147483616,
  tomSmallCaps = (int) -2147483584,
  tomAllCaps = (int) -2147483520,
  tomHidden = (int) -2147483392,
  tomOutline = (int) -2147483136,
  tomShadow = (int) -2147482624,
  tomEmboss = (int) -2147481600,
  tomImprint = (int) -2147479552,
  tomDisabled = (int) -2147475456,
  tomRevised = (int) -2147467264,
  tomNormalCaret = (int) 201326592,
  tomKoreanBlockCaret = (int) 201326593,
  tomIncludeInset = (int) 201326593,
  tomIgnoreCurrentFont = (int) 201326592,
  tomMatchFontCharset = (int) 201326593,
  tomMatchFontSignature = (int) 201326594,
  tomCharset = (int) -2147483648,
  tomRE10Mode = (int) 201326593,
  tomUseAtFont = (int) 201326594,
  tomTextFlowMask = (int) 201326604,
  tomTextFlowES = (int) 201326592,
  tomTextFlowSW = (int) 201326596,
  tomTextFlowWN = (int) 201326600,
  tomTextFlowNE = (int) 201326604,
  tomUsePassword = (int) 201326608,
  tomNoIME = (int) 201850880,
  tomSelfIME = (int) 201588736
};

/* Structure/union declarations.  */
struct _RemotableHandle
{
  long fContext;
  union __MIDL_IWinTypes_0009 u;
};
union __MIDL_IWinTypes_0009
{
  long hInproc;
  long hRemote;
};

/* Type definitions.  */
typedef enum __MIDL___MIDL_itf_tom_0000_0001 tomConstants;
typedef struct _RemotableHandle * wireHWND;
typedef UINT UINT_PTR;
typedef long LONG_PTR;

[
  uuid(8CC497C9-A1DF-11CE-8098-00AA0047BE5D),
  version(1.0)
]
library tom
{
  importlib("stdole2.tlb");

   /* Dispatch interface declarations.  */
   [
     uuid(8CC497C0-A1DF-11CE-8098-00AA0047BE5D),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextDocument : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pName
     );
     [propget]
     HRESULT __stdcall Selection (
       [out retval] dispinterface ITextSelection **ppSel
     );
     [propget]
     HRESULT __stdcall StoryCount (
       [out retval] long *pCount
     );
     [propget]
     HRESULT __stdcall StoryRanges (
       [out retval] dispinterface ITextStoryRanges **ppStories
     );
     [propget]
     HRESULT __stdcall Saved (
       [out retval] long *pValue
     );
     [id(4), propput]
     HRESULT __stdcall Saved (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall DefaultTabStop (
       [out retval] float *pValue
     );
     [id(5), propput]
     HRESULT __stdcall DefaultTabStop (
       [in] float argNo1
     );
     HRESULT __stdcall New (void);
     HRESULT __stdcall Open (
       [in] VARIANT *pVar,
       [in] long Flags,
       [in] long CodePage
     );
     HRESULT __stdcall Save (
       [in] VARIANT *pVar,
       [in] long Flags,
       [in] long CodePage
     );
     HRESULT __stdcall Freeze (
       [out retval] long *pCount
     );
     HRESULT __stdcall Unfreeze (
       [out retval] long *pCount
     );
     HRESULT __stdcall BeginEditCollection (void);
     HRESULT __stdcall EndEditCollection (void);
     HRESULT __stdcall Undo (
       [in] long Count,
       [out retval] long *prop
     );
     HRESULT __stdcall Redo (
       [in] long Count,
       [out retval] long *prop
     );
     HRESULT __stdcall Range (
       [in] long cp1,
       [in] long cp2,
       [out retval] dispinterface ITextRange **ppRange
     );
     HRESULT __stdcall RangeFromPoint (
       [in] long x,
       [in] long y,
       [out retval] dispinterface ITextRange **ppRange
     );
   };
   [
     uuid(8CC497C1-A1DF-11CE-8098-00AA0047BE5D),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextSelection : ITextRange
   {
     [id(257), propget]
     HRESULT __stdcall Flags (
       [out retval] long *pFlags
     );
     [id(257), propput]
     HRESULT __stdcall Flags (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Type (
       [out retval] long *pType
     );
     HRESULT __stdcall MoveLeft (
       [in] long Unit,
       [in] long Count,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveRight (
       [in] long Unit,
       [in] long Count,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveUp (
       [in] long Unit,
       [in] long Count,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveDown (
       [in] long Unit,
       [in] long Count,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall HomeKey (
       [in] long Unit,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall EndKey (
       [in] long Unit,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall TypeText (
       [in] BSTR bstr
     );
   };
   [
     uuid(8CC497C2-A1DF-11CE-8098-00AA0047BE5D),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextRange : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Text (
       [out retval] BSTR *pbstr
     );
     [id(0), propput]
     HRESULT __stdcall Text (
       [in] BSTR argNo1
     );
     [id(513), propget]
     HRESULT __stdcall Char (
       [out retval] long *pch
     );
     [id(513), propput]
     HRESULT __stdcall Char (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Duplicate (
       [out retval] dispinterface ITextRange **ppRange
     );
     [propget]
     HRESULT __stdcall FormattedText (
       [out retval] dispinterface ITextRange **ppRange
     );
     [id(515), propput]
     HRESULT __stdcall FormattedText (
       [in] dispinterface ITextRange *argNo1
     );
     [propget]
     HRESULT __stdcall Start (
       [out retval] long *pcpFirst
     );
     [id(516), propput]
     HRESULT __stdcall Start (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall End (
       [out retval] long *pcpLim
     );
     [id(517), propput]
     HRESULT __stdcall End (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Font (
       [out retval] dispinterface ITextFont **pFont
     );
     [id(518), propput]
     HRESULT __stdcall Font (
       [in] dispinterface ITextFont *argNo1
     );
     [propget]
     HRESULT __stdcall Para (
       [out retval] dispinterface ITextPara **pPara
     );
     [id(519), propput]
     HRESULT __stdcall Para (
       [in] dispinterface ITextPara *argNo1
     );
     [propget]
     HRESULT __stdcall StoryLength (
       [out retval] long *pcch
     );
     [propget]
     HRESULT __stdcall StoryType (
       [out retval] long *pValue
     );
     [id(528)]
     HRESULT __stdcall Collapse (
       [in] long bStart
     );
     HRESULT __stdcall Expand (
       [in] long Unit,
       [out retval] long *pDelta
     );
     HRESULT __stdcall GetIndex (
       [in] long Unit,
       [out retval] long *pIndex
     );
     HRESULT __stdcall SetIndex (
       [in] long Unit,
       [in] long Index,
       [in] long Extend
     );
     HRESULT __stdcall SetRange (
       [in] long cpActive,
       [in] long cpOther
     );
     HRESULT __stdcall InRange (
       [in] dispinterface ITextRange *pRange,
       [out retval] long *pB
     );
     HRESULT __stdcall InStory (
       [in] dispinterface ITextRange *pRange,
       [out retval] long *pB
     );
     HRESULT __stdcall IsEqual (
       [in] dispinterface ITextRange *pRange,
       [out retval] long *pB
     );
     HRESULT __stdcall Select (void);
     HRESULT __stdcall StartOf (
       [in] long Unit,
       [in] long Extend,
       [out retval] long *pDelta
     );
     [id(544)]
     HRESULT __stdcall EndOf (
       [in] long Unit,
       [in] long Extend,
       [out retval] long *pDelta
     );
     HRESULT __stdcall Move (
       [in] long Unit,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveStart (
       [in] long Unit,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveEnd (
       [in] long Unit,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveWhile (
       [in] VARIANT *Cset,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveStartWhile (
       [in] VARIANT *Cset,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveEndWhile (
       [in] VARIANT *Cset,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveUntil (
       [in] VARIANT *Cset,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveStartUntil (
       [in] VARIANT *Cset,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall MoveEndUntil (
       [in] VARIANT *Cset,
       [in] long Count,
       [out retval] long *pDelta
     );
     [id(560)]
     HRESULT __stdcall FindText (
       [in] BSTR bstr,
       [in] long cch,
       [in] long Flags,
       [out retval] long *pLength
     );
     HRESULT __stdcall FindTextStart (
       [in] BSTR bstr,
       [in] long cch,
       [in] long Flags,
       [out retval] long *pLength
     );
     HRESULT __stdcall FindTextEnd (
       [in] BSTR bstr,
       [in] long cch,
       [in] long Flags,
       [out retval] long *pLength
     );
     HRESULT __stdcall Delete (
       [in] long Unit,
       [in] long Count,
       [out retval] long *pDelta
     );
     HRESULT __stdcall Cut (
       [out] VARIANT *pVar
     );
     HRESULT __stdcall Copy (
       [out] VARIANT *pVar
     );
     HRESULT __stdcall Paste (
       [in] VARIANT *pVar,
       [in] long Format
     );
     HRESULT __stdcall CanPaste (
       [in] VARIANT *pVar,
       [in] long Format,
       [out retval] long *pB
     );
     HRESULT __stdcall CanEdit (
       [out retval] long *pbCanEdit
     );
     HRESULT __stdcall ChangeCase (
       [in] long Type
     );
     [id(576)]
     HRESULT __stdcall GetPoint (
       [in] long Type,
       [out] long *px,
       [out] long *py
     );
     HRESULT __stdcall SetPoint (
       [in] long x,
       [in] long y,
       [in] long Type,
       [in] long Extend
     );
     HRESULT __stdcall ScrollIntoView (
       [in] long Value
     );
     HRESULT __stdcall GetEmbeddedObject (
       [out retval] IUnknown **ppv
     );
   };
   [
     uuid(8CC497C3-A1DF-11CE-8098-00AA0047BE5D),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextFont : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Duplicate (
       [out retval] dispinterface ITextFont **ppFont
     );
     [id(0), propput]
     HRESULT __stdcall Duplicate (
       [in] dispinterface ITextFont *argNo1
     );
     [id(769)]
     HRESULT __stdcall CanChange (
       [out retval] long *pB
     );
     HRESULT __stdcall IsEqual (
       [in] dispinterface ITextFont *pFont,
       [out retval] long *pB
     );
     HRESULT __stdcall Reset (
       [in] long Value
     );
     [propget]
     HRESULT __stdcall Style (
       [out retval] long *pValue
     );
     [id(772), propput]
     HRESULT __stdcall Style (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall AllCaps (
       [out retval] long *pValue
     );
     [id(773), propput]
     HRESULT __stdcall AllCaps (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Animation (
       [out retval] long *pValue
     );
     [id(774), propput]
     HRESULT __stdcall Animation (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall BackColor (
       [out retval] long *pValue
     );
     [id(775), propput]
     HRESULT __stdcall BackColor (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Bold (
       [out retval] long *pValue
     );
     [id(776), propput]
     HRESULT __stdcall Bold (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Emboss (
       [out retval] long *pValue
     );
     [id(777), propput]
     HRESULT __stdcall Emboss (
       [in] long argNo1
     );
     [id(784), propget]
     HRESULT __stdcall ForeColor (
       [out retval] long *pValue
     );
     [id(784), propput]
     HRESULT __stdcall ForeColor (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Hidden (
       [out retval] long *pValue
     );
     [id(785), propput]
     HRESULT __stdcall Hidden (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Engrave (
       [out retval] long *pValue
     );
     [id(786), propput]
     HRESULT __stdcall Engrave (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Italic (
       [out retval] long *pValue
     );
     [id(787), propput]
     HRESULT __stdcall Italic (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Kerning (
       [out retval] float *pValue
     );
     [id(788), propput]
     HRESULT __stdcall Kerning (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall LanguageID (
       [out retval] long *pValue
     );
     [id(789), propput]
     HRESULT __stdcall LanguageID (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstr
     );
     [id(790), propput]
     HRESULT __stdcall Name (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Outline (
       [out retval] long *pValue
     );
     [id(791), propput]
     HRESULT __stdcall Outline (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Position (
       [out retval] float *pValue
     );
     [id(792), propput]
     HRESULT __stdcall Position (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall Protected (
       [out retval] long *pValue
     );
     [id(793), propput]
     HRESULT __stdcall Protected (
       [in] long argNo1
     );
     [id(800), propget]
     HRESULT __stdcall Shadow (
       [out retval] long *pValue
     );
     [id(800), propput]
     HRESULT __stdcall Shadow (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Size (
       [out retval] float *pValue
     );
     [id(801), propput]
     HRESULT __stdcall Size (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall SmallCaps (
       [out retval] long *pValue
     );
     [id(802), propput]
     HRESULT __stdcall SmallCaps (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Spacing (
       [out retval] float *pValue
     );
     [id(803), propput]
     HRESULT __stdcall Spacing (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall StrikeThrough (
       [out retval] long *pValue
     );
     [id(804), propput]
     HRESULT __stdcall StrikeThrough (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Subscript (
       [out retval] long *pValue
     );
     [id(805), propput]
     HRESULT __stdcall Subscript (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Superscript (
       [out retval] long *pValue
     );
     [id(806), propput]
     HRESULT __stdcall Superscript (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Underline (
       [out retval] long *pValue
     );
     [id(807), propput]
     HRESULT __stdcall Underline (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Weight (
       [out retval] long *pValue
     );
     [id(808), propput]
     HRESULT __stdcall Weight (
       [in] long argNo1
     );
   };
   [
     uuid(8CC497C4-A1DF-11CE-8098-00AA0047BE5D),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextPara : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Duplicate (
       [out retval] dispinterface ITextPara **ppPara
     );
     [id(0), propput]
     HRESULT __stdcall Duplicate (
       [in] dispinterface ITextPara *argNo1
     );
     [id(1025)]
     HRESULT __stdcall CanChange (
       [out retval] long *pB
     );
     HRESULT __stdcall IsEqual (
       [in] dispinterface ITextPara *pPara,
       [out retval] long *pB
     );
     HRESULT __stdcall Reset (
       [in] long Value
     );
     [propget]
     HRESULT __stdcall Style (
       [out retval] long *pValue
     );
     [id(1028), propput]
     HRESULT __stdcall Style (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Alignment (
       [out retval] long *pValue
     );
     [id(1029), propput]
     HRESULT __stdcall Alignment (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Hyphenation (
       [out retval] long *pValue
     );
     [id(1030), propput]
     HRESULT __stdcall Hyphenation (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall FirstLineIndent (
       [out retval] float *pValue
     );
     [propget]
     HRESULT __stdcall KeepTogether (
       [out retval] long *pValue
     );
     [id(1032), propput]
     HRESULT __stdcall KeepTogether (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall KeepWithNext (
       [out retval] long *pValue
     );
     [id(1033), propput]
     HRESULT __stdcall KeepWithNext (
       [in] long argNo1
     );
     [id(1040), propget]
     HRESULT __stdcall LeftIndent (
       [out retval] float *pValue
     );
     [propget]
     HRESULT __stdcall LineSpacing (
       [out retval] float *pValue
     );
     [propget]
     HRESULT __stdcall LineSpacingRule (
       [out retval] long *pValue
     );
     [propget]
     HRESULT __stdcall ListAlignment (
       [out retval] long *pValue
     );
     [id(1043), propput]
     HRESULT __stdcall ListAlignment (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall ListLevelIndex (
       [out retval] long *pValue
     );
     [id(1044), propput]
     HRESULT __stdcall ListLevelIndex (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall ListStart (
       [out retval] long *pValue
     );
     [id(1045), propput]
     HRESULT __stdcall ListStart (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall ListTab (
       [out retval] float *pValue
     );
     [id(1046), propput]
     HRESULT __stdcall ListTab (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall ListType (
       [out retval] long *pValue
     );
     [id(1047), propput]
     HRESULT __stdcall ListType (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall NoLineNumber (
       [out retval] long *pValue
     );
     [id(1048), propput]
     HRESULT __stdcall NoLineNumber (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall PageBreakBefore (
       [out retval] long *pValue
     );
     [id(1049), propput]
     HRESULT __stdcall PageBreakBefore (
       [in] long argNo1
     );
     [id(1056), propget]
     HRESULT __stdcall RightIndent (
       [out retval] float *pValue
     );
     [id(1056), propput]
     HRESULT __stdcall RightIndent (
       [in] float argNo1
     );
     HRESULT __stdcall SetIndents (
       [in] float StartIndent,
       [in] float LeftIndent,
       [in] float RightIndent
     );
     HRESULT __stdcall SetLineSpacing (
       [in] long LineSpacingRule,
       [in] float LineSpacing
     );
     [propget]
     HRESULT __stdcall SpaceAfter (
       [out retval] float *pValue
     );
     [id(1059), propput]
     HRESULT __stdcall SpaceAfter (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall SpaceBefore (
       [out retval] float *pValue
     );
     [id(1060), propput]
     HRESULT __stdcall SpaceBefore (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall WidowControl (
       [out retval] long *pValue
     );
     [id(1061), propput]
     HRESULT __stdcall WidowControl (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall TabCount (
       [out retval] long *pCount
     );
     HRESULT __stdcall AddTab (
       [in] float tbPos,
       [in] long tbAlign,
       [in] long tbLeader
     );
     HRESULT __stdcall ClearAllTabs (void);
     HRESULT __stdcall DeleteTab (
       [in] float tbPos
     );
     [id(1072)]
     HRESULT __stdcall GetTab (
       [in] long iTab,
       [out] float *ptbPos,
       [out] long *ptbAlign,
       [out] long *ptbLeader
     );
   };
   [
     uuid(8CC497C5-A1DF-11CE-8098-00AA0047BE5D),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextStoryRanges : IDispatch
   {
     [id(-4), restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppunkEnum
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface ITextRange **ppRange
     );
     [id(2), propget]
     HRESULT __stdcall Count (
       [out retval] long *pCount
     );
   };
   [
     uuid(01C25500-4268-11D1-883A-3C8B00C10000),
     version(1.0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITextDocument2 : ITextDocument
   {
     [id(21)]
     HRESULT __stdcall AttachMsgFilter (
       [in] IUnknown * pFilter
     );
     HRESULT __stdcall SetEffectColor (
       [in] long Index,
       [in] UINT cr
     );
     HRESULT __stdcall GetEffectColor (
       [in] long Index,
       [out] UINT *pcr
     );
     [propget]
     HRESULT __stdcall CaretType (
       [out retval] long *pCaretType
     );
     [id(24), propput]
     HRESULT __stdcall CaretType (
       [in] long argNo1
     );
     HRESULT __stdcall GetImmContext (
       [out retval] long *pContext
     );
     HRESULT __stdcall ReleaseImmContext (
       [in] long Context
     );
     HRESULT __stdcall GetPreferredFont (
       [in] long cp,
       [in] long CodePage,
       [in] long Option,
       [in] long curCodepage,
       [in] long curFontSize,
       [out] BSTR *pbstr,
       [out] long *pPitchAndFamily,
       [out] long *pNewFontSize
     );
     [propget]
     HRESULT __stdcall NotificationMode (
       [out retval] long *pMode
     );
     [id(28), propput]
     HRESULT __stdcall NotificationMode (
       [in] long argNo1
     );
     HRESULT __stdcall GetClientRect (
       [in] long Type,
       [out] long *pLeft,
       [out] long *pTop,
       [out] long *pRight,
       [out] long *pBottom
     );
     [propget]
     HRESULT __stdcall SelectionEx (
       [out retval] dispinterface ITextSelection **ppSel
     );
     HRESULT __stdcall GetWindow (
       [out] long *phWnd
     );
     HRESULT __stdcall GetFEFlags (
       [out] long *pFlags
     );
     HRESULT __stdcall UpdateWindow (void);
     HRESULT __stdcall CheckTextLimit (
       long cch,
       long *pcch
     );
     HRESULT __stdcall IMEInProgress (
       long Mode
     );
     HRESULT __stdcall SysBeep (void);
     HRESULT __stdcall Update (
       [in] long Mode
     );
     HRESULT __stdcall Notify (
       [in] long Notify
     );
     HRESULT __stdcall GetDocumentFont (
       [out retval] dispinterface ITextFont **ppITextFont
     );
     HRESULT __stdcall GetDocumentPara (
       [out retval] dispinterface ITextPara **ppITextPara
     );
     HRESULT __stdcall GetCallManager (
       [out retval] IUnknown **ppVoid
     );
     HRESULT __stdcall ReleaseCallManager (
       IUnknown * pVoid
     );
   };

};

/* Interface declarations.  */
[
  uuid(A3787420-4267-11D1-883A-3C8B00C10000),
  version(1.0),
  nonextensible
]
interface ITextMsgFilter : IUnknown
{
  [id(1)]
  HRESULT __stdcall AttachDocument (
    [in] wireHWND hwnd,
    [in] dispinterface ITextDocument2 *pTextDoc,
    [in] IUnknown * punk
  );
  HRESULT __stdcall HandleMessage (
    [in out] unsigned int *pmsg,
    [in out] UINT_PTR *pwparam,
    [in out] LONG_PTR *plparam,
    [out] LONG_PTR *plres
  );
  HRESULT __stdcall AttachMsgFilter (
    [in] interface ITextMsgFilter *pMsgFilter
  );
};

