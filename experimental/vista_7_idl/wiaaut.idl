/* Automated generated idl file <wia>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Union record forward declarations.  */
dispinterface IRational;
dispinterface IImageFile;
dispinterface IVector;
dispinterface IProperties;
dispinterface IProperty;
dispinterface IFilterInfo;
dispinterface IFilterInfos;
dispinterface IFilter;
dispinterface IFilters;
dispinterface IImageProcess;
dispinterface IFormats;
dispinterface IDeviceCommand;
dispinterface IDeviceCommands;
dispinterface IItems;
dispinterface IItem;
dispinterface IDeviceEvent;
dispinterface IDeviceEvents;
dispinterface IDevice;
dispinterface IDeviceInfo;
dispinterface IDeviceInfos;
dispinterface ICommonDialog;
dispinterface IDeviceManager;
dispinterface _IDeviceManagerEvents;

/* Union record forward declarations.  */
coclass Rational;
coclass Vector;
coclass Property;
coclass Properties;
coclass ImageFile;
coclass FilterInfo;
coclass FilterInfos;
coclass Filter;
coclass Filters;
coclass ImageProcess;
coclass Formats;
coclass DeviceCommand;
coclass DeviceCommands;
coclass Item;
coclass Items;
coclass DeviceEvent;
coclass DeviceEvents;
coclass DeviceInfo;
coclass DeviceInfos;
coclass Device;
coclass CommonDialog;
coclass DeviceManager;

/* Enumeration declarations.  */
[
  uuid(A5EDDA89-E79A-44A7-BBE1-42397D62FE79),
  helpstring("The WiaSubType enumeration specifies more detail about the property value. Use the SubType property on the Property object to obtain these values for the property.")
]
enum WiaSubType
{
  UnspecifiedSubType = (int) 201326592,
  RangeSubType = (int) 201326593,
  ListSubType = (int) 201326594,
  FlagSubType = (int) 201326595
};
[
  uuid(E1FCB780-C848-4076-9637-7609156F47A2),
  helpstring("The WiaDeviceType enumeration specifies the type of device attached to a user's computer. Use the Type property on the DeviceInfo object or the Device object to obtain these values from the device.")
]
enum WiaDeviceType
{
  UnspecifiedDeviceType = (int) 201326592,
  ScannerDeviceType = (int) 201326593,
  CameraDeviceType = (int) 201326594,
  VideoDeviceType = (int) 201326595
};
[
  uuid(7F17D8AE-01D7-4C01-B341-096607BE3ECF),
  helpstring("An Item's type is composed of bits from the WiaItemFlags enumeration. You can test an Item's type by using the AND operation with Item.Properties("Item Flags") and a member from the WiaItemFlags enumeration.")
]
enum WiaItemFlag
{
  FreeItemFlag = (int) 201326592,
  ImageItemFlag = (int) 201326593,
  FileItemFlag = (int) 201326594,
  FolderItemFlag = (int) 201326596,
  RootItemFlag = (int) 201326600,
  AnalyzeItemFlag = (int) 201326608,
  AudioItemFlag = (int) 201326624,
  DeviceItemFlag = (int) 201326656,
  DeletedItemFlag = (int) 201326720,
  DisconnectedItemFlag = (int) 201326848,
  HPanoramaItemFlag = (int) 201327104,
  VPanoramaItemFlag = (int) 201327616,
  BurstItemFlag = (int) 201328640,
  StorageItemFlag = (int) 201330688,
  TransferItemFlag = (int) 201334784,
  GeneratedItemFlag = (int) 201342976,
  HasAttachmentsItemFlag = (int) 201359360,
  VideoItemFlag = (int) 201392128,
  RemovedItemFlag = (int) -2147483648
};
[
  uuid(652C190A-EEFA-4B91-B0FF-632139BE9BBA),
  helpstring("The WiaPropertyType enumeration specifies the type of the value of an item property. Item properties can be found in the Properties collection of a Device or Item object.")
]
enum WiaPropertyType
{
  UnsupportedPropertyType = (int) 201326592,
  BooleanPropertyType = (int) 201326593,
  BytePropertyType = (int) 201326594,
  IntegerPropertyType = (int) 201326595,
  UnsignedIntegerPropertyType = (int) 201326596,
  LongPropertyType = (int) 201326597,
  UnsignedLongPropertyType = (int) 201326598,
  ErrorCodePropertyType = (int) 201326599,
  LargeIntegerPropertyType = (int) 201326600,
  UnsignedLargeIntegerPropertyType = (int) 201326601,
  SinglePropertyType = (int) 201326602,
  DoublePropertyType = (int) 201326603,
  CurrencyPropertyType = (int) 201326604,
  DatePropertyType = (int) 201326605,
  FileTimePropertyType = (int) 201326606,
  ClassIDPropertyType = (int) 201326607,
  StringPropertyType = (int) 201326608,
  ObjectPropertyType = (int) 201326609,
  HandlePropertyType = (int) 201326610,
  VariantPropertyType = (int) 201326611,
  VectorOfBooleansPropertyType = (int) 201326693,
  VectorOfBytesPropertyType = (int) 201326694,
  VectorOfIntegersPropertyType = (int) 201326695,
  VectorOfUnsignedIntegersPropertyType = (int) 201326696,
  VectorOfLongsPropertyType = (int) 201326697,
  VectorOfUnsignedLongsPropertyType = (int) 201326698,
  VectorOfErrorCodesPropertyType = (int) 201326699,
  VectorOfLargeIntegersPropertyType = (int) 201326700,
  VectorOfUnsignedLargeIntegersPropertyType = (int) 201326701,
  VectorOfSinglesPropertyType = (int) 201326702,
  VectorOfDoublesPropertyType = (int) 201326703,
  VectorOfCurrenciesPropertyType = (int) 201326704,
  VectorOfDatesPropertyType = (int) 201326705,
  VectorOfFileTimesPropertyType = (int) 201326706,
  VectorOfClassIDsPropertyType = (int) 201326707,
  VectorOfStringsPropertyType = (int) 201326708,
  VectorOfVariantsPropertyType = (int) 201326711
};
[
  uuid(9E6A0011-6F26-4904-BF25-0D6760DBFB58),
  helpstring("The WiaImagePropertyType enumeration specifies the type of the value of an image property. Image properties can be found in the Properties collection of an ImageFile object.")
]
enum WiaImagePropertyType
{
  UndefinedImagePropertyType = (int) 201327592,
  ByteImagePropertyType = (int) 201327593,
  StringImagePropertyType = (int) 201327594,
  UnsignedIntegerImagePropertyType = (int) 201327595,
  LongImagePropertyType = (int) 201327596,
  UnsignedLongImagePropertyType = (int) 201327597,
  RationalImagePropertyType = (int) 201327598,
  UnsignedRationalImagePropertyType = (int) 201327599,
  VectorOfUndefinedImagePropertyType = (int) 201327692,
  VectorOfBytesImagePropertyType = (int) 201327693,
  VectorOfUnsignedIntegersImagePropertyType = (int) 201327694,
  VectorOfLongsImagePropertyType = (int) 201327695,
  VectorOfUnsignedLongsImagePropertyType = (int) 201327696,
  VectorOfRationalsImagePropertyType = (int) 201327697,
  VectorOfUnsignedRationalsImagePropertyType = (int) 201327698
};
[
  uuid(D346BBB7-9EDC-4FC9-AB79-A65E2F204ED3),
  helpstring("A DeviceEvent's type is composed of bits from the WiaEventFlags enumeration. You can test a DeviceEvent's type by using the AND operation with DeviceEvent.Type and a member from the WiaEventFlags enumeration.")
]
enum WiaEventFlag
{
  NotificationEvent = (int) 201326593,
  ActionEvent = (int) 201326594
};
[
  uuid(6165F914-C665-442C-B90B-D73DE216BE77),
  helpstring("The WiaImageIntent enumeration helps specify what type of data the image is intended to represent.")
]
enum WiaImageIntent
{
  UnspecifiedIntent = (int) 201326592,
  ColorIntent = (int) 201326593,
  GrayscaleIntent = (int) 201326594,
  TextIntent = (int) 201326596
};
[
  uuid(19E509B8-519E-48DE-90DC-D732144F7B9A),
  helpstring("The WiaImageBias enumeration helps specify what type of data the image is intended to represent.")
]
enum WiaImageBias
{
  MinimizeSize = (int) 201392128,
  MaximizeQuality = (int) 201457664
};

[
  uuid(94A0E92D-43C0-494E-AC29-FD45948A5221),
  version(1.0),
  helpstring("Microsoft Windows Image Acquisition Library v2.0"),
  helpfile("wiaaut.chm")
]
library wia
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(0C5672F9-3EDC-4B24-95B5-A6C54C0B79AD),
     helpstring("The Rational object is a container for the rational values found in Exif tags. It is a supported element type of the Vector object and may be created using "WIA.Rational" in a call to CreateObject."),
     cancreate
   ]
   coclass Rational
   {
     dispinterface IRational;
   };
   [
     uuid(4DD1D1C3-B36A-4EB4-AAEF-815891A58A30),
     helpstring("The Vector object is a collection of values of the same type. It is used throughout the library in many different ways. The Vector object may be created using "WIA.Vector" in a call to CreateObject."),
     cancreate
   ]
   coclass Vector
   {
     dispinterface IVector;
   };
   [
     uuid(2014DE3F-3723-4178-8643-3317A32D4A2B),
     helpstring("The Property object is a container for a property associated with a Device, DeviceInfo, Filter, ImageFile or Item object. See the Properties property on any of these objects for details on accessing Property objects.")
   ]
   coclass Property
   {
     dispinterface IProperty;
   };
   [
     uuid(96F887FC-08B1-4F97-A69C-75280C6A9CF8),
     helpstring("The Properties object is a collection of all the Property objects associated with a given Device, DeviceInfo, Filter, ImageFile or Item object. See the Properties property on any of these objects for detail on accessing the Properties object.")
   ]
   coclass Properties
   {
     dispinterface IProperties;
   };
   [
     uuid(A2E6DDA0-06EF-4DF3-B7BD-5AA224BB06E8),
     helpstring("The ImageFile object is a container for images transferred to your computer when you call Transfer or ShowTransfer. It also supports image files through LoadFile. An ImageFile object can be created using "WIA.ImageFile" in a call to CreateObject."),
     cancreate
   ]
   coclass ImageFile
   {
     dispinterface IImageFile;
   };
   [
     uuid(318D6B52-9B1C-4E3B-8D90-1F0E857FA9B0),
     helpstring("The FilterInfo object is a container that describes a Filter object without requiring a Filter to be Added to the process chain. See the FilterInfos property on the ImageProcess object for details on accessing FilterInfo objects.")
   ]
   coclass FilterInfo
   {
     dispinterface IFilterInfo;
   };
   [
     uuid(56FA88D3-F3DA-4DE3-94E8-811040C3CCD4),
     helpstring("The FilterInfos object is a collection of all the available FilterInfo objects. See the FilterInfos property on the ImageProcess object for detail on accessing the FilterInfos object.")
   ]
   coclass FilterInfos
   {
     dispinterface IFilterInfos;
   };
   [
     uuid(52AD8A74-F064-4F4C-8544-FF494D349F7B),
     helpstring("The Filter object represents a unit of modification on an ImageFile. To use a Filter, add it to the Filters collection, then set the filter's properties and finally use the Apply method of the ImageProcess object to filter an ImageFile.")
   ]
   coclass Filter
   {
     dispinterface IFilter;
   };
   [
     uuid(31CDD60C-C04C-424D-95FC-36A52646D71C),
     helpstring("The Filters object is a collection of the Filters that will be applied to an ImageFile when you call the Apply method on the ImageProcess object.")
   ]
   coclass Filters
   {
     dispinterface IFilters;
   };
   [
     uuid(BD0D38E4-74C8-4904-9B5A-269F8E9994E9),
     helpstring("The ImageProcess object manages the filter chain. An ImageProcess object can be created using "WIA.ImageProcess" in a call to CreateObject."),
     cancreate
   ]
   coclass ImageProcess
   {
     dispinterface IImageProcess;
   };
   [
     uuid(6F62E261-0FE6-476B-A244-50CF7440DDEB),
     helpstring("The Formats object is a collection of supported FormatIDs that you can use when calling Transfer on an Item object or ShowTransfer on a CommonDialog object for this Item.")
   ]
   coclass Formats
   {
     dispinterface IFormats;
   };
   [
     uuid(72226184-AFBB-4059-BF55-0F6C076E669D),
     helpstring("The DeviceCommand object describes a CommandID that can be used when calling ExecuteCommand on a Device or Item object.")
   ]
   coclass DeviceCommand
   {
     dispinterface IDeviceCommand;
   };
   [
     uuid(25B047DB-4AAD-4FC2-A0BE-31DDA687FF32),
     helpstring("The DeviceCommands object is a collection of all the supported DeviceCommands for an imaging device. See the Commands property of a Device or Item object for more details on determining the collection of supported device commands.")
   ]
   coclass DeviceCommands
   {
     dispinterface IDeviceCommands;
   };
   [
     uuid(36F479F3-C258-426E-B5FA-2793DCFDA881),
     helpstring("The Item object is a container for an item on an imaging device object. See the Items property on the Device or Item object for details on accessing Item objects.")
   ]
   coclass Item
   {
     dispinterface IItem;
   };
   [
     uuid(B243B765-CA9C-4F30-A457-C8B2B57A585E),
     helpstring("The Items object contains a collection of Item objects. See the Items property on the Device or Item object for details on accessing the Items object.")
   ]
   coclass Items
   {
     dispinterface IItems;
   };
   [
     uuid(617CF892-783C-43D3-B04B-F0F1DE3B326D),
     helpstring("The DeviceEvent object describes an EventID that can be used when calling RegisterEvent or RegisterPersistentEvent on a DeviceManager object.")
   ]
   coclass DeviceEvent
   {
     dispinterface IDeviceEvent;
   };
   [
     uuid(3563A59A-BBCD-4C86-94A0-92136C80A8B4),
     helpstring("The DeviceEvents object is a collection of all the supported DeviceEvent for an imaging device. See the Events property of a Device object for more details on determining the collection of supported device events.")
   ]
   coclass DeviceEvents
   {
     dispinterface IDeviceEvents;
   };
   [
     uuid(F09CFB7A-E561-4625-9BB5-208BCA0DE09F),
     helpstring("The DeviceInfo object is a container that describes the unchanging (static) properties of an imaging device that is currently connected to the computer.")
   ]
   coclass DeviceInfo
   {
     dispinterface IDeviceInfo;
   };
   [
     uuid(2DFEE16B-E4AC-4A19-B660-AE71A745D34F),
     helpstring("The DeviceInfos object is a collection of all the imaging devices currently connected to the computer. See the DeviceInfos property on the DeviceManager object for detail on accessing the DeviceInfos object.")
   ]
   coclass DeviceInfos
   {
     dispinterface IDeviceInfos;
   };
   [
     uuid(DBAA8843-B1C4-4EDC-B7E0-D6F61162BE58),
     helpstring("The Device object represents an active connection to an imaging device.")
   ]
   coclass Device
   {
     dispinterface IDevice;
   };
   [
     uuid(850D1D11-70F3-4BE5-9A11-77AA6B2BB201),
     helpstring("The CommonDialog control is an invisible-at-runtime control that contains all the methods that display a User Interface. A CommonDialog control can be created using "WIA.CommonDialog" in a call to CreateObject or by dropping a CommonDialog on a form."),
     cancreate
   ]
   coclass CommonDialog
   {
     dispinterface ICommonDialog;
   };
   [
     uuid(E1C5D730-7E97-4D8A-9E42-BBAE87C2059F),
     helpstring("The DeviceManager control is an invisible-at-runtime control that manages the imaging devices connected to the computer. A DeviceManager control can be created using "WIA.DeviceManager" in a call to CreateObject or by dropping a DeviceManager on a form."),
     cancreate
   ]
   coclass DeviceManager
   {
     dispinterface IDeviceManager;
     dispinterface _IDeviceManagerEvents;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(3BF1B24A-01A5-4AA3-91F9-25A60B50E49B),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IRational : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Value (
       [out retval] double *pResult
     );
     [propget]
     HRESULT __stdcall Numerator (
       [out retval] long *plResult
     );
     [id(1), propput]
     HRESULT __stdcall Numerator (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Denominator (
       [out retval] long *plResult
     );
     [id(2), propput]
     HRESULT __stdcall Denominator (
       [in] long argNo1
     );
   };
   [
     uuid(F4243B65-3F63-4D99-93CD-86B6D62C5EB2),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IImageFile : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall FormatID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall FileExtension (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall FileData (
       [out retval] dispinterface IVector **ppResult
     );
     [propget]
     HRESULT __stdcall ARGBData (
       [out retval] dispinterface IVector **ppResult
     );
     [propget]
     HRESULT __stdcall Height (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall Width (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall HorizontalResolution (
       [out retval] double *plfResult
     );
     [propget]
     HRESULT __stdcall VerticalResolution (
       [out retval] double *plfResult
     );
     [propget]
     HRESULT __stdcall PixelDepth (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall IsIndexedPixelFormat (
       [out retval] WINBOOL *pboolResult
     );
     [propget]
     HRESULT __stdcall IsAlphaPixelFormat (
       [out retval] WINBOOL *pboolResult
     );
     [propget]
     HRESULT __stdcall IsExtendedPixelFormat (
       [out retval] WINBOOL *pboolResult
     );
     [propget]
     HRESULT __stdcall IsAnimated (
       [out retval] WINBOOL *pboolResult
     );
     [propget]
     HRESULT __stdcall FrameCount (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall ActiveFrame (
       [out retval] long *plResult
     );
     [id(15), propput]
     HRESULT __stdcall ActiveFrame (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface IProperties **ppResult
     );
     HRESULT __stdcall LoadFile (
       [in] BSTR Filename
     );
     HRESULT __stdcall SaveFile (
       [in] BSTR Filename
     );
   };
   [
     uuid(696F2367-6619-49BD-BA96-904DC2609990),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IVector : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] VARIANT *pResult
     );
     [id(0), propput]
     HRESULT __stdcall Item (
       [in] long Index,
       [in] VARIANT *argNo2
     );
     [id(0), propputref]
     HRESULT __stdcall Item (
       [in] long Index,
       [in] VARIANT *argNo2
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall Picture (
       [in opt] long Width = (int) 201326592,
       [in opt] long Height = (int) 201326592,
       [out retval] VARIANT *pvResult
     );
     [propget]
     HRESULT __stdcall ImageFile (
       [in opt] long Width = (int) 201326592,
       [in opt] long Height = (int) 201326592,
       [out retval] dispinterface IImageFile **ppResult
     );
     [propget]
     HRESULT __stdcall BinaryData (
       [out retval] VARIANT *pvResult
     );
     [id(4), propput]
     HRESULT __stdcall BinaryData (
       [in] VARIANT *argNo1
     );
     [propget]
     HRESULT __stdcall String (
       [in opt] WINBOOL Unicode = (BOOL) -1,
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Date (
       [out retval] DATE *pdResult
     );
     [id(6), propput]
     HRESULT __stdcall Date (
       [in] DATE argNo1
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
     [id(7)]
     HRESULT __stdcall Add (
       [in] VARIANT *Value,
       [in opt] long Index = (int) 201326592
     );
     HRESULT __stdcall Remove (
       [in] long Index,
       [out retval] VARIANT *pvResult
     );
     HRESULT __stdcall Clear (void);
     HRESULT __stdcall SetFromString (
       [in] BSTR Value,
       [in opt] WINBOOL Resizable = (BOOL) -1,
       [in opt] WINBOOL Unicode = (BOOL) -1
     );
   };
   [
     uuid(40571E58-A308-470A-80AA-FA10F88793A0),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IProperties : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] VARIANT *Index,
       [out retval] dispinterface IProperty **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     HRESULT __stdcall Exists (
       [in] VARIANT *Index,
       [out retval] WINBOOL *pboolResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
   };
   [
     uuid(706038DC-9F4B-4E45-88E2-5EB7D665B815),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IProperty : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Value (
       [out retval] VARIANT *pvResult
     );
     [id(0), propput]
     HRESULT __stdcall Value (
       [in] VARIANT *argNo1
     );
     [id(0), propputref]
     HRESULT __stdcall Value (
       [in] VARIANT *argNo1
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall PropertyID (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall Type (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall IsReadOnly (
       [out retval] WINBOOL *pboolResult
     );
     [propget]
     HRESULT __stdcall IsVector (
       [out retval] WINBOOL *pboolResult
     );
     [propget]
     HRESULT __stdcall SubType (
       [out retval] enum WiaSubType *pResult
     );
     [propget]
     HRESULT __stdcall SubTypeDefault (
       [out retval] VARIANT *pvResult
     );
     [propget]
     HRESULT __stdcall SubTypeValues (
       [out retval] dispinterface IVector **ppResult
     );
     [propget]
     HRESULT __stdcall SubTypeMin (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall SubTypeMax (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall SubTypeStep (
       [out retval] long *plResult
     );
   };
   [
     uuid(EFD1219F-8229-4B30-809D-8F6D83341569),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFilterInfo : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall FilterID (
       [out retval] BSTR *pbstrResult
     );
   };
   [
     uuid(AF49723A-499C-411C-B19A-1B8244D67E44),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFilterInfos : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] VARIANT *Index,
       [out retval] dispinterface IFilterInfo **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
   };
   [
     uuid(851E9802-B338-4AB3-BB6B-6AA57CC699D0),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFilter : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall FilterID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface IProperties **ppResult
     );
   };
   [
     uuid(C82FFED4-0A8D-4F85-B90A-AC8E720D39C1),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFilters : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IFilter **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
     [id(2)]
     HRESULT __stdcall Add (
       [in] BSTR FilterID,
       [in opt] long Index = (int) 201326592
     );
     HRESULT __stdcall Remove (
       [in] long Index
     );
   };
   [
     uuid(41506929-7855-4392-9E6F-98D88513E55D),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IImageProcess : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall FilterInfos (
       [out retval] dispinterface IFilterInfos **ppResult
     );
     [propget]
     HRESULT __stdcall Filters (
       [out retval] dispinterface IFilters **ppResult
     );
     [id(4)]
     HRESULT __stdcall Apply (
       [in] dispinterface IImageFile *Source,
       [out retval] dispinterface IImageFile **ppResult
     );
   };
   [
     uuid(882A274F-DF2F-4F6D-9F5A-AF4FD484530D),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFormats : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
   };
   [
     uuid(7CF694C0-F589-451C-B56E-398B5855B05E),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceCommand : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall CommandID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrResult
     );
   };
   [
     uuid(C53AE9D5-6D91-4815-AF93-5F1E1B3B08BD),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceCommands : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IDeviceCommand **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
   };
   [
     uuid(46102071-60B4-4E58-8620-397D17B0BB5B),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IItems : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IItem **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
     [id(2)]
     HRESULT __stdcall Add (
       [in] BSTR Name,
       [in] long Flags
     );
     HRESULT __stdcall Remove (
       [in] long Index
     );
   };
   [
     uuid(68F2BF12-A755-4E2B-9BCD-37A22587D078),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IItem : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall ItemID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface IProperties **ppResult
     );
     [propget]
     HRESULT __stdcall Items (
       [out retval] dispinterface IItems **ppResult
     );
     [propget]
     HRESULT __stdcall Formats (
       [out retval] dispinterface IFormats **ppResult
     );
     [propget]
     HRESULT __stdcall Commands (
       [out retval] dispinterface IDeviceCommands **ppResult
     );
     [propget]
     HRESULT __stdcall WiaItem (
       [out retval] IUnknown **ppResult
     );
     HRESULT __stdcall Transfer (
       [in opt] BSTR FormatID = L"{00000000-0000-0000-0000-000000000000}",
       [out retval] VARIANT *pvResult
     );
     HRESULT __stdcall ExecuteCommand (
       [in] BSTR CommandID,
       [out retval] dispinterface IItem **ppResult
     );
   };
   [
     uuid(80D0880A-BB10-4722-82D1-07DC8DA157E2),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceEvent : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall EventID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Type (
       [out retval] enum WiaEventFlag *pResult
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrResult
     );
   };
   [
     uuid(03985C95-581B-44D1-9403-8488B347538B),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceEvents : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IDeviceEvent **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
   };
   [
     uuid(3714EAC4-F413-426B-B1E8-DEF2BE99EA55),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDevice : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall DeviceID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Type (
       [out retval] enum WiaDeviceType *pResult
     );
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface IProperties **ppResult
     );
     [propget]
     HRESULT __stdcall Items (
       [out retval] dispinterface IItems **ppResult
     );
     [propget]
     HRESULT __stdcall Commands (
       [out retval] dispinterface IDeviceCommands **ppResult
     );
     [propget]
     HRESULT __stdcall Events (
       [out retval] dispinterface IDeviceEvents **ppResult
     );
     [propget]
     HRESULT __stdcall WiaItem (
       [out retval] IUnknown **ppResult
     );
     HRESULT __stdcall GetItem (
       [in] BSTR ItemID,
       [out retval] dispinterface IItem **ppResult
     );
     HRESULT __stdcall ExecuteCommand (
       [in] BSTR CommandID,
       [out retval] dispinterface IItem **ppResult
     );
   };
   [
     uuid(2A99020A-E325-4454-95E0-136726ED4818),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceInfo : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall DeviceID (
       [out retval] BSTR *pbstrResult
     );
     [propget]
     HRESULT __stdcall Type (
       [out retval] enum WiaDeviceType *pResult
     );
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface IProperties **ppResult
     );
     HRESULT __stdcall Connect (
       [out retval] dispinterface IDevice **ppResult
     );
   };
   [
     uuid(FE076B64-8406-4E92-9CAC-9093F378E05F),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceInfos : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] VARIANT *Index,
       [out retval] dispinterface IDeviceInfo **ppResult
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pResult
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppResult
     );
   };
   [
     uuid(B4760F13-D9F3-4DF8-94B5-D225F86EE9A1),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface ICommonDialog : IDispatch
   {
     [id(1)]
     HRESULT __stdcall ShowAcquisitionWizard (
       [in] dispinterface IDevice *Device,
       [out retval] VARIANT *pvResult
     );
     HRESULT __stdcall ShowAcquireImage (
       [in opt] enum WiaDeviceType DeviceType = (int) 201326592,
       [in opt] enum WiaImageIntent Intent = (int) 201326592,
       [in opt] enum WiaImageBias Bias = (int) 201457664,
       [in opt] BSTR FormatID = L"{00000000-0000-0000-0000-000000000000}",
       [in opt] WINBOOL AlwaysSelectDevice = (BOOL) 0,
       [in opt] WINBOOL UseCommonUI = (BOOL) -1,
       [in opt] WINBOOL CancelError = (BOOL) 0,
       [out retval] dispinterface IImageFile **ppResult
     );
     HRESULT __stdcall ShowSelectDevice (
       [in opt] enum WiaDeviceType DeviceType = (int) 201326592,
       [in opt] WINBOOL AlwaysSelectDevice = (BOOL) 0,
       [in opt] WINBOOL CancelError = (BOOL) 0,
       [out retval] dispinterface IDevice **ppResult
     );
     HRESULT __stdcall ShowSelectItems (
       [in] dispinterface IDevice *Device,
       [in opt] enum WiaImageIntent Intent = (int) 201326592,
       [in opt] enum WiaImageBias Bias = (int) 201457664,
       [in opt] WINBOOL SingleSelect = (BOOL) -1,
       [in opt] WINBOOL UseCommonUI = (BOOL) -1,
       [in opt] WINBOOL CancelError = (BOOL) 0,
       [out retval] dispinterface IItems **ppResult
     );
     HRESULT __stdcall ShowDeviceProperties (
       [in] dispinterface IDevice *Device,
       [in opt] WINBOOL CancelError = (BOOL) 0
     );
     HRESULT __stdcall ShowItemProperties (
       [in] dispinterface IItem *Item,
       [in opt] WINBOOL CancelError = (BOOL) 0
     );
     HRESULT __stdcall ShowTransfer (
       [in] dispinterface IItem *Item,
       [in opt] BSTR FormatID = L"{00000000-0000-0000-0000-000000000000}",
       [in opt] WINBOOL CancelError = (BOOL) 0,
       [out retval] VARIANT *pvResult
     );
     HRESULT __stdcall ShowPhotoPrintingWizard (
       [in] VARIANT *Files
     );
   };
   [
     uuid(73856D9A-2720-487A-A584-21D5774E9D0F),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDeviceManager : IDispatch
   {
     [id(1), propget, nonbrowsable]
     HRESULT __stdcall DeviceInfos (
       [out retval] dispinterface IDeviceInfos **ppResult
     );
     HRESULT __stdcall RegisterEvent (
       [in] BSTR EventID,
       [in opt] BSTR DeviceID = L"*"
     );
     HRESULT __stdcall UnregisterEvent (
       [in] BSTR EventID,
       [in opt] BSTR DeviceID = L"*"
     );
     HRESULT __stdcall RegisterPersistentEvent (
       [in] BSTR Command,
       [in] BSTR Name,
       [in] BSTR Description,
       [in] BSTR Icon,
       [in] BSTR EventID,
       [in opt] BSTR DeviceID = L"*"
     );
     HRESULT __stdcall UnregisterPersistentEvent (
       [in] BSTR Command,
       [in] BSTR Name,
       [in] BSTR Description,
       [in] BSTR Icon,
       [in] BSTR EventID,
       [in opt] BSTR DeviceID = L"*"
     );
   };
   [
     uuid(2E9A5206-2360-49DF-9D9B-1762B4BEAE77),
     dispatchable
   ]
   dispinterface _IDeviceManagerEvents
   {
     [id(1)]
     HRESULT __stdcall OnEvent (
       [in] BSTR EventID,
       [in] BSTR DeviceID,
       [in] BSTR ItemID
     );
   };

};

/* Module declarations.  */
[
  uuid(FDC77133-178E-475B-8E5B-044CD0CAFD41),
  helpstring("Miscellaneous string constants")
]
module Miscellaneous
{
  [id(1073741824)]
  CONST LPSTR wiaIDUnknown = L"{00000000-0000-0000-0000-000000000000}";
  CONST LPSTR wiaAnyDeviceID = L"*";
};
[
  uuid(9090D2F0-250B-45BF-AC03-5F8225AFA1F0),
  helpstring("String versions of globally unique identifiers (GUIDs) that indicate the file format of an image.")
]
module FormatID
{
  [id(1073741824)]
  CONST LPSTR wiaFormatBMP = L"{B96B3CAB-0728-11D3-9D7B-0000F81EF32E}";
  CONST LPSTR wiaFormatPNG = L"{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}";
  CONST LPSTR wiaFormatGIF = L"{B96B3CB0-0728-11D3-9D7B-0000F81EF32E}";
  CONST LPSTR wiaFormatJPEG = L"{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}";
  CONST LPSTR wiaFormatTIFF = L"{B96B3CB1-0728-11D3-9D7B-0000F81EF32E}";
};
[
  uuid(3A85CB32-A6CA-4F90-A428-DC49B87F6A28),
  helpstring("String versions of globally unique identifiers (GUIDs) that identify DeviceManager events.")
]
module EventID
{
  [id(1073741824)]
  CONST LPSTR wiaEventDeviceConnected = L"{A28BBADE-64B6-11D2-A231-00C04FA31809}";
  CONST LPSTR wiaEventDeviceDisconnected = L"{143E4E83-6497-11D2-A231-00C04FA31809}";
  CONST LPSTR wiaEventItemCreated = L"{4C8F4EF5-E14F-11D2-B326-00C04F68CE61}";
  CONST LPSTR wiaEventItemDeleted = L"{1D22A559-E14F-11D2-B326-00C04F68CE61}";
  CONST LPSTR wiaEventScanImage = L"{A6C5A715-8C6E-11D2-977A-0000F87A926F}";
  CONST LPSTR wiaEventScanPrintImage = L"{B441F425-8C6E-11D2-977A-0000F87A926F}";
  CONST LPSTR wiaEventScanFaxImage = L"{C00EB793-8C6E-11D2-977A-0000F87A926F}";
  CONST LPSTR wiaEventScanOCRImage = L"{9D095B89-37D6-4877-AFED-62A297DC6DBE}";
  CONST LPSTR wiaEventScanEmailImage = L"{C686DCEE-54F2-419E-9A27-2FC7F2E98F9E}";
  CONST LPSTR wiaEventScanFilmImage = L"{9B2B662C-6185-438C-B68B-E39EE25E71CB}";
  CONST LPSTR wiaEventScanImage2 = L"{FC4767C1-C8B3-48A2-9CFA-2E90CB3D3590}";
  CONST LPSTR wiaEventScanImage3 = L"{154E27BE-B617-4653-ACC5-0FD7BD4C65CE}";
  CONST LPSTR wiaEventScanImage4 = L"{A65B704A-7F3C-4447-A75D-8A26DFCA1FDF}";
};
[
  uuid(5131AB08-ADB4-480F-BEE1-1ECE4EF64065),
  helpstring("String versions of globally unique identifiers (GUIDs) that identify common Device and Item commands.")
]
module CommandID
{
  [id(1073741824)]
  CONST LPSTR wiaCommandSynchronize = L"{9B26B7B2-ACAD-11D2-A093-00C04F72DC3C}";
  CONST LPSTR wiaCommandTakePicture = L"{AF933CAC-ACAD-11D2-A093-00C04F72DC3C}";
  CONST LPSTR wiaCommandDeleteAllItems = L"{E208C170-ACAD-11D2-A093-00C04F72DC3C}";
  CONST LPSTR wiaCommandChangeDocument = L"{04E725B0-ACAE-11D2-A093-00C04F72DC3C}";
  CONST LPSTR wiaCommandUnloadDocument = L"{1F3B3D8E-ACAE-11D2-A093-00C04F72DC3C}";
};

