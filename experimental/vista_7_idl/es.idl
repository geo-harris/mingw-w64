/* Automated generated idl file <eventsystemlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IEnumEventObject;
interface IPublisherFilter;
interface IMultiInterfaceEventControl;
interface IMultiInterfacePublisherFilter;
interface IEventObjectChange;
interface IEventObjectChange2;
interface IDontSupportEventSubscription;
interface IEventClassInternal;
interface IAmAFiringAgent;
interface IEventClassParallelFiringTimeout;
interface IEventSubscriptionInternal;

/* Structure forward declarations.  */
struct __MIDL___MIDL_itf_ESTlb_0001_0072_0001;

/* Union record forward declarations.  */
dispinterface IEventObjectCollection;
dispinterface IEventControl;
dispinterface IFiringControl;
dispinterface IEventSubscription;
dispinterface IEventSystem;
dispinterface IEventPublisher;
dispinterface IEventClass;
dispinterface IEventClass2;
dispinterface IEventProperty;
dispinterface IEventClass3;
dispinterface IEventSubscription2;
dispinterface IEventSubscription3;
dispinterface IEventSystem2;

/* Enumeration declarations.  */
enum __MIDL_IEventObjectChange_0001
{
  EOC_NewObject = (int) 201326592,
  EOC_ModifiedObject = (int) 201326593,
  EOC_DeletedObject = (int) 201326594
};

/* Structure/union declarations.  */
[
  hidden
]
struct __MIDL___MIDL_itf_ESTlb_0001_0072_0001
{
  UINT cbSize;
  EOC_ChangeType changeType;
  BSTR objectID;
  BSTR partitionId;
  BSTR applicationId;
  struct GUID reserved[10];
};

/* Type definitions.  */
typedef enum __MIDL_IEventObjectChange_0001 EOC_ChangeType;
[
  hidden
]
typedef struct __MIDL___MIDL_itf_ESTlb_0001_0072_0001 COMEVENTSYSCHANGEINFO;

[
  uuid(4E14FB90-2E22-11D1-9964-00C04FBBB345),
  version(1.0),
  helpstring("EventSystem 1.0 Type Library")
]
library eventsystemlib
{
  importlib("stdole2.tlb");

   /* Dispatch interface declarations.  */
   [
     uuid(F89AC270-D4EB-11D1-B682-00805FC79216),
     helpstring("IEventObjectCollection Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventObjectCollection : IDispatch
   {
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **ppUnkEnum
     );
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] BSTR objectID,
       [out retval] VARIANT *pItem
     );
     [propget]
     HRESULT __stdcall NewEnum (
       [out retval] interface IEnumEventObject **ppEnum
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *pCount
     );
     HRESULT __stdcall Add (
       [in] VARIANT *Item,
       [in] BSTR objectID
     );
     HRESULT __stdcall Remove (
       [in] BSTR objectID
     );
   };
   [
     uuid(0343E2F4-86F6-11D1-B760-00C04FB926AF),
     helpstring("IEventControl Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventControl : IDispatch
   {
     [id(1)]
     HRESULT __stdcall SetPublisherFilter (
       [in] BSTR methodName,
       [in] interface IPublisherFilter *pPublisherFilter
     );
     [propget]
     HRESULT __stdcall AllowInprocActivation (
       [out retval] long *pfAllowInprocActivation
     );
     [id(2), propput]
     HRESULT __stdcall AllowInprocActivation (
       [in] long argNo1
     );
     HRESULT __stdcall GetSubscriptions (
       [in] BSTR methodName,
       [in] BSTR optionalCriteria,
       [in] int *optionalErrorIndex,
       [out retval] dispinterface IEventObjectCollection **ppCollection
     );
     HRESULT __stdcall SetDefaultQuery (
       [in] BSTR methodName,
       [in] BSTR criteria,
       [out retval] int *errorIndex
     );
   };
   [
     uuid(E0498C93-4EFE-11D1-9971-00C04FBBB345),
     helpstring("IFiringControl Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFiringControl : IDispatch
   {
     [id(1)]
     HRESULT __stdcall FireSubscription (
       [in] dispinterface IEventSubscription *subscription
     );
   };
   [
     uuid(4A6B0E15-2E38-11D1-9965-00C04FBBB345),
     helpstring("IEventSubscription Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventSubscription : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall SubscriptionID (
       [out retval] BSTR *pbstrSubscriptionID
     );
     [id(1), propput]
     HRESULT __stdcall SubscriptionID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SubscriptionName (
       [out retval] BSTR *pbstrSubscriptionName
     );
     [id(2), propput]
     HRESULT __stdcall SubscriptionName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall PublisherID (
       [out retval] BSTR *pbstrPublisherID
     );
     [id(3), propput]
     HRESULT __stdcall PublisherID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall EventClassID (
       [out retval] BSTR *pbstrEventClassID
     );
     [id(4), propput]
     HRESULT __stdcall EventClassID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall methodName (
       [out retval] BSTR *pbstrMethodName
     );
     [id(5), propput]
     HRESULT __stdcall methodName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SubscriberCLSID (
       [out retval] BSTR *pbstrSubscriberCLSID
     );
     [id(6), propput]
     HRESULT __stdcall SubscriberCLSID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SubscriberInterface (
       [out retval] IUnknown **ppSubscriberInterface
     );
     [id(7), propput]
     HRESULT __stdcall SubscriberInterface (
       [in] IUnknown * argNo1
     );
     [propget]
     HRESULT __stdcall PerUser (
       [out retval] long *pfPerUser
     );
     [id(8), propput]
     HRESULT __stdcall PerUser (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall OwnerSID (
       [out retval] BSTR *pbstrOwnerSID
     );
     [id(9), propput]
     HRESULT __stdcall OwnerSID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Enabled (
       [out retval] long *pfEnabled
     );
     [id(10), propput]
     HRESULT __stdcall Enabled (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrDescription
     );
     [id(11), propput]
     HRESULT __stdcall Description (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall MachineName (
       [out retval] BSTR *pbstrMachineName
     );
     [id(12), propput]
     HRESULT __stdcall MachineName (
       [in] BSTR argNo1
     );
     HRESULT __stdcall GetPublisherProperty (
       [in] BSTR bstrPropertyName,
       [out retval] VARIANT *propertyValue
     );
     HRESULT __stdcall PutPublisherProperty (
       [in] BSTR bstrPropertyName,
       [in] VARIANT *propertyValue
     );
     HRESULT __stdcall RemovePublisherProperty (
       [in] BSTR bstrPropertyName
     );
     HRESULT __stdcall GetPublisherPropertyCollection (
       [out retval] dispinterface IEventObjectCollection **collection
     );
     HRESULT __stdcall GetSubscriberProperty (
       [in] BSTR bstrPropertyName,
       [out retval] VARIANT *propertyValue
     );
     HRESULT __stdcall PutSubscriberProperty (
       [in] BSTR bstrPropertyName,
       [in] VARIANT *propertyValue
     );
     HRESULT __stdcall RemoveSubscriberProperty (
       [in] BSTR bstrPropertyName
     );
     HRESULT __stdcall GetSubscriberPropertyCollection (
       [out retval] dispinterface IEventObjectCollection **collection
     );
     [propget]
     HRESULT __stdcall InterfaceID (
       [out retval] BSTR *pbstrInterfaceID
     );
     [id(21), propput]
     HRESULT __stdcall InterfaceID (
       [in] BSTR argNo1
     );
   };
   [
     uuid(4E14FB9F-2E22-11D1-9964-00C04FBBB345),
     helpstring("IEventSystem Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventSystem : IDispatch
   {
     [id(1)]
     HRESULT __stdcall Query (
       [in] BSTR progID,
       [in] BSTR queryCriteria,
       [out] int *errorIndex,
       [out retval] IUnknown **ppInterface
     );
     HRESULT __stdcall Store (
       [in] BSTR progID,
       [in] IUnknown * pInterface
     );
     HRESULT __stdcall Remove (
       [in] BSTR progID,
       [in] BSTR queryCriteria,
       [out] int *errorIndex
     );
     [propget]
     HRESULT __stdcall EventObjectChangeEventClassID (
       [out retval] BSTR *pbstrEventClassID
     );
     HRESULT __stdcall QueryS (
       [in] BSTR progID,
       [in] BSTR queryCriteria,
       [out retval] IUnknown **ppInterface
     );
     HRESULT __stdcall RemoveS (
       [in] BSTR progID,
       [in] BSTR queryCriteria
     );
   };
   [
     uuid(E341516B-2E32-11D1-9964-00C04FBBB345),
     helpstring("IEventPublisher Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventPublisher : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall PublisherID (
       [out retval] BSTR *pbstrPublisherID
     );
     [id(1), propput]
     HRESULT __stdcall PublisherID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall PublisherName (
       [out retval] BSTR *pbstrPublisherName
     );
     [id(2), propput]
     HRESULT __stdcall PublisherName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall PublisherType (
       [out retval] BSTR *pbstrPublisherType
     );
     [id(3), propput]
     HRESULT __stdcall PublisherType (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall OwnerSID (
       [out retval] BSTR *pbstrOwnerSID
     );
     [id(4), propput]
     HRESULT __stdcall OwnerSID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrDescription
     );
     [id(5), propput]
     HRESULT __stdcall Description (
       [in] BSTR argNo1
     );
     HRESULT __stdcall GetDefaultProperty (
       [in] BSTR bstrPropertyName,
       [out retval] VARIANT *propertyValue
     );
     HRESULT __stdcall PutDefaultProperty (
       [in] BSTR bstrPropertyName,
       [in] VARIANT *propertyValue
     );
     HRESULT __stdcall RemoveDefaultProperty (
       [in] BSTR bstrPropertyName
     );
     HRESULT __stdcall GetDefaultPropertyCollection (
       [out retval] dispinterface IEventObjectCollection **collection
     );
   };
   [
     uuid(FB2B72A0-7A68-11D1-88F9-0080C7D771BF),
     helpstring("IEventClass Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventClass : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall EventClassID (
       [out retval] BSTR *pbstrEventClassID
     );
     [id(1), propput]
     HRESULT __stdcall EventClassID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall EventClassName (
       [out retval] BSTR *pbstrEventClassName
     );
     [id(2), propput]
     HRESULT __stdcall EventClassName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall OwnerSID (
       [out retval] BSTR *pbstrOwnerSID
     );
     [id(3), propput]
     HRESULT __stdcall OwnerSID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall FiringInterfaceID (
       [out retval] BSTR *pbstrFiringInterfaceID
     );
     [id(4), propput]
     HRESULT __stdcall FiringInterfaceID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrDescription
     );
     [id(5), propput]
     HRESULT __stdcall Description (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall CustomConfigCLSID (
       [out retval] BSTR *pbstrCustomConfigCLSID
     );
     [id(6), propput]
     HRESULT __stdcall CustomConfigCLSID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall TypeLib (
       [out retval] BSTR *pbstrTypeLib
     );
     [id(7), propput]
     HRESULT __stdcall TypeLib (
       [in] BSTR argNo1
     );
   };
   [
     uuid(FB2B72A1-7A68-11D1-88F9-0080C7D771BF),
     helpstring("IEventClass2 Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventClass2 : IEventClass
   {
     [id(8), propget]
     HRESULT __stdcall PublisherID (
       [out retval] BSTR *pbstrPublisherID
     );
     [id(8), propput]
     HRESULT __stdcall PublisherID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall MultiInterfacePublisherFilterCLSID (
       [out retval] BSTR *pbstrPubFilCLSID
     );
     [id(9), propput]
     HRESULT __stdcall MultiInterfacePublisherFilterCLSID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall AllowInprocActivation (
       [out retval] long *pfAllowInprocActivation
     );
     [id(10), propput]
     HRESULT __stdcall AllowInprocActivation (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall FireInParallel (
       [out retval] long *pfFireInParallel
     );
     [id(11), propput]
     HRESULT __stdcall FireInParallel (
       [in] long argNo1
     );
   };
   [
     uuid(DA538EE2-F4DE-11D1-B6BB-00805FC79216),
     helpstring("IEventProperty Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventProperty : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *propertyName
     );
     [id(1), propput]
     HRESULT __stdcall Name (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Value (
       [out retval] VARIANT *propertyValue
     );
     [id(2), propput]
     HRESULT __stdcall Value (
       [in] VARIANT *argNo1
     );
   };
   [
     uuid(7FB7EA43-2D76-4EA8-8CD9-3DECC270295E),
     helpstring("IEventClass3 Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventClass3 : IEventClass2
   {
     [id(12), propget]
     HRESULT __stdcall EventClassPartitionID (
       [out retval] BSTR *pbstrEventClassPartitionID
     );
     [id(12), propput]
     HRESULT __stdcall EventClassPartitionID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall EventClassApplicationID (
       [out retval] BSTR *pbstrEventClassApplicationID
     );
     [id(13), propput]
     HRESULT __stdcall EventClassApplicationID (
       [in] BSTR argNo1
     );
   };
   [
     uuid(4A6B0E16-2E38-11D1-9965-00C04FBBB345),
     helpstring("IEventSubscription2 Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventSubscription2 : IEventSubscription
   {
     [id(22), propget]
     HRESULT __stdcall FilterCriteria (
       [out retval] BSTR *pbstrFilterCriteria
     );
     [id(22), propput]
     HRESULT __stdcall FilterCriteria (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SubscriberMoniker (
       [out retval] BSTR *pbstrMoniker
     );
     [id(23), propput]
     HRESULT __stdcall SubscriberMoniker (
       [in] BSTR argNo1
     );
   };
   [
     uuid(FBC1D17D-C498-43A0-81AF-423DDD530AF6),
     helpstring("IEventSubscription3 Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventSubscription3 : IEventSubscription2
   {
     [id(24), propget]
     HRESULT __stdcall EventClassPartitionID (
       [out retval] BSTR *pbstrEventClassPartitionID
     );
     [id(24), propput]
     HRESULT __stdcall EventClassPartitionID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall EventClassApplicationID (
       [out retval] BSTR *pbstrEventClassApplicationID
     );
     [id(25), propput]
     HRESULT __stdcall EventClassApplicationID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SubscriberPartitionID (
       [out retval] BSTR *pbstrSubscriberPartitionID
     );
     [id(26), propput]
     HRESULT __stdcall SubscriberPartitionID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SubscriberApplicationID (
       [out retval] BSTR *pbstrSubscriberApplicationID
     );
     [id(27), propput]
     HRESULT __stdcall SubscriberApplicationID (
       [in] BSTR argNo1
     );
   };
   [
     uuid(99CC098F-A48A-4E9C-8E58-965C0AFC19D5),
     helpstring("IEventSystem2 Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEventSystem2 : IEventSystem
   {
     [id(7)]
     HRESULT __stdcall GetVersion (
       [out] int *pnVersion
     );
     HRESULT __stdcall VerifyTransientSubscribers (void);
   };

};

/* Interface declarations.  */
[
  uuid(F4A07D63-2E25-11D1-9964-00C04FBBB345),
  helpstring("IEnumEventObject Interface")
]
interface IEnumEventObject : IUnknown
{
  [id(1)]
  HRESULT __stdcall Clone (
    [out] interface IEnumEventObject **ppInterface
  );
  [id(3)]
  HRESULT __stdcall Next (
    [in] UINT cReqElem,
    [out] IUnknown **ppInterface,
    [out] UINT *cRetElem
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Skip (
    [in] UINT cSkipElem
  );
};
[
  uuid(465E5CC0-7B26-11D1-88FB-0080C7D771BF),
  helpstring("IPublisherFilter Interface")
]
interface IPublisherFilter : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Initialize (
    [in] BSTR methodName,
    [in] IDispatch * dispUserDefined
  );
  HRESULT __stdcall PrepareToFire (
    [in] BSTR methodName,
    [in] dispinterface IFiringControl *firingControl
  );
};
[
  uuid(0343E2F5-86F6-11D1-B760-00C04FB926AF),
  helpstring("IMultiInterfaceEventControl Interface")
]
interface IMultiInterfaceEventControl : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetMultiInterfacePublisherFilter (
    [in] interface IMultiInterfacePublisherFilter *classFilter
  );
  HRESULT __stdcall GetSubscriptions (
    [in] struct GUID *eventIID,
    [in] BSTR bstrMethodName,
    [in] BSTR optionalCriteria,
    [in] int *optionalErrorIndex,
    [out retval] dispinterface IEventObjectCollection **ppCollection
  );
  HRESULT __stdcall SetDefaultQuery (
    [in] struct GUID *eventIID,
    [in] BSTR bstrMethodName,
    [in] BSTR bstrCriteria,
    [out retval] int *errorIndex
  );
  [propget]
  HRESULT __stdcall AllowInprocActivation (
    [out retval] long *pfAllowInprocActivation
  );
  [id(1610678275), propput]
  HRESULT __stdcall AllowInprocActivation (
    [in] long argNo1
  );
  [id(1610678277), propget]
  HRESULT __stdcall FireInParallel (
    [out retval] long *pfFireInParallel
  );
  [id(1610678277), propput]
  HRESULT __stdcall FireInParallel (
    [in] long argNo1
  );
};
[
  uuid(465E5CC1-7B26-11D1-88FB-0080C7D771BF),
  helpstring("IMultiInterfacePublisherFilter Interface")
]
interface IMultiInterfacePublisherFilter : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Initialize (
    [in] interface IMultiInterfaceEventControl *pEIC
  );
  HRESULT __stdcall PrepareToFire (
    [in] struct GUID *iid,
    [in] BSTR methodName,
    [in] dispinterface IFiringControl *firingControl
  );
};
[
  uuid(F4A07D70-2E25-11D1-9964-00C04FBBB345),
  helpstring("IEventObjectChange Interface")
]
interface IEventObjectChange : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall ChangedSubscription (
    [in] EOC_ChangeType changeType,
    [in] BSTR bstrSubscriptionID
  );
  HRESULT __stdcall ChangedEventClass (
    [in] EOC_ChangeType changeType,
    [in] BSTR bstrEventClassID
  );
  HRESULT __stdcall ChangedPublisher (
    [in] EOC_ChangeType changeType,
    [in] BSTR bstrPublisherID
  );
};
[
  uuid(7701A9C3-BD68-438F-83E0-67BF4F53A422),
  helpstring("IEventObjectChange2 Interface")
]
interface IEventObjectChange2 : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall ChangedSubscription (
    [in] COMEVENTSYSCHANGEINFO *pInfo
  );
  HRESULT __stdcall ChangedEventClass (
    [in] COMEVENTSYSCHANGEINFO *pInfo
  );
};
[
  uuid(784121F1-62A6-4B89-855F-D65F296DE83A),
  helpstring("IDontSupportEventSubscription Interface")
]
interface IDontSupportEventSubscription : IUnknown
{
};
[
  uuid(9F83871A-195F-44B5-A46F-18FFFE152F7C),
  hidden
]
interface IEventClassInternal : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetAllowPerUserInprocActivation (
    [out] long *pfAllowPerUserInprocActivation
  );
  HRESULT __stdcall GetAllowPerUserActivateAsActivator (
    [out] long *pfAllowPerUserActivateAsActivator
  );
  HRESULT __stdcall GetAllowPerUserMoniker (
    [out] long *pfAllowPerUserMoniker
  );
  HRESULT __stdcall GetSerialFiringTimeout (
    [out] UINT *pdwSerialFiringTimeout
  );
};
[
  uuid(0771CB93-DA7C-44B5-8196-422E6A2FBC40),
  hidden
]
interface IAmAFiringAgent : IUnknown
{
};
[
  uuid(A5657E5C-7BAE-4E81-9C17-284655918763),
  helpstring("IEventClassParallelFiringTimeout Interface")
]
interface IEventClassParallelFiringTimeout : IUnknown
{
  [id(1), propget]
  HRESULT __stdcall ParallelFiringTimeout (
    [out retval] UINT *pdwParallelFiringTimeout
  );
  [id(1), propput]
  HRESULT __stdcall ParallelFiringTimeout (
    [in] UINT argNo1
  );
};
[
  uuid(9B724996-D383-4C5F-B0F6-2814708C7633),
  hidden
]
interface IEventSubscriptionInternal : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall IsTransient (
    [out] long *pfIsTransient
  );
};

