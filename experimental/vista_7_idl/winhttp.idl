/* Automated generated idl file <winhttp>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IWinHttpRequestEvents;

/* Union record forward declarations.  */
dispinterface IWinHttpRequest;

/* Union record forward declarations.  */
coclass WinHttpRequest;

/* Enumeration declarations.  */
[
  uuid(12782009-FE90-4877-9730-E5E183669B19),
  helpstring("WinHttpRequest Options")
]
enum WinHttpRequestOption
{
  WinHttpRequestOption_UserAgentString = (int) 201326592,
  WinHttpRequestOption_URL = (int) 201326593,
  WinHttpRequestOption_URLCodePage = (int) 201326594,
  WinHttpRequestOption_EscapePercentInURL = (int) 201326595,
  WinHttpRequestOption_SslErrorIgnoreFlags = (int) 201326596,
  WinHttpRequestOption_SelectCertificate = (int) 201326597,
  WinHttpRequestOption_EnableRedirects = (int) 201326598,
  WinHttpRequestOption_UrlEscapeDisable = (int) 201326599,
  WinHttpRequestOption_UrlEscapeDisableQuery = (int) 201326600,
  WinHttpRequestOption_SecureProtocols = (int) 201326601,
  WinHttpRequestOption_EnableTracing = (int) 201326602,
  WinHttpRequestOption_RevertImpersonationOverSsl = (int) 201326603,
  WinHttpRequestOption_EnableHttpsToHttpRedirects = (int) 201326604,
  WinHttpRequestOption_EnablePassportAuthentication = (int) 201326605,
  WinHttpRequestOption_MaxAutomaticRedirects = (int) 201326606,
  WinHttpRequestOption_MaxResponseHeaderSize = (int) 201326607,
  WinHttpRequestOption_MaxResponseDrainSize = (int) 201326608,
  WinHttpRequestOption_EnableHttp1_1 = (int) 201326609,
  WinHttpRequestOption_EnableCertificateRevocationCheck = (int) 201326610,
  WinHttpRequestOption_RejectUserpwd = (int) 201326611
};
[
  uuid(9D8A6DF8-13DE-4B1F-A330-67C719D62514)
]
enum WinHttpRequestAutoLogonPolicy
{
  AutoLogonPolicy_Always = (int) 201326592,
  AutoLogonPolicy_OnlyIfBypassProxy = (int) 201326593,
  AutoLogonPolicy_Never = (int) 201326594
};
[
  uuid(152A1CA2-55A9-43A3-B187-0605BB886349)
]
enum WinHttpRequestSslErrorFlags
{
  SslErrorFlag_UnknownCA = (int) 201326848,
  SslErrorFlag_CertWrongUsage = (int) 201327104,
  SslErrorFlag_CertCNInvalid = (int) 201330688,
  SslErrorFlag_CertDateInvalid = (int) 201334784,
  SslErrorFlag_Ignore_All = (int) 201339648
};
[
  uuid(6B2C51C1-A8EA-46BD-B928-C9B76F9F14DD)
]
enum WinHttpRequestSecureProtocols
{
  SecureProtocol_SSL2 = (int) 201326600,
  SecureProtocol_SSL3 = (int) 201326624,
  SecureProtocol_TLS1 = (int) 201326720,
  SecureProtocol_ALL = (int) 201326760
};

/* Type definitions.  */
typedef long HTTPREQUEST_PROXY_SETTING;
typedef long HTTPREQUEST_SETCREDENTIALS_FLAGS;

[
  uuid(662901FC-6951-4854-9EB2-D9A2570F2B2E),
  version(5.1),
  helpstring("Microsoft WinHTTP Services, version 5.1")
]
library winhttp
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(2087C2F4-2CEF-4953-A8AB-66779B670495),
     helpstring("WinHttpRequest component"),
     cancreate
   ]
   coclass WinHttpRequest
   {
     dispinterface IWinHttpRequest;
     interface IWinHttpRequestEvents;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(016FE2EC-B2C8-45F8-B23B-39E53A75396B),
     helpstring("IWinHttpRequest Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IWinHttpRequest : IDispatch
   {
     [id(13)]
     HRESULT __stdcall SetProxy (
       [in] HTTPREQUEST_PROXY_SETTING ProxySetting,
       [in opt] VARIANT ProxyServer,
       [in opt] VARIANT BypassList
     );
     HRESULT __stdcall SetCredentials (
       [in] BSTR UserName,
       [in] BSTR Password,
       [in] HTTPREQUEST_SETCREDENTIALS_FLAGS Flags
     );
     [id(1)]
     HRESULT __stdcall Open (
       [in] BSTR Method,
       [in] BSTR Url,
       [in opt] VARIANT Async
     );
     HRESULT __stdcall SetRequestHeader (
       [in] BSTR Header,
       [in] BSTR Value
     );
     HRESULT __stdcall GetResponseHeader (
       [in] BSTR Header,
       [out retval] BSTR *Value
     );
     HRESULT __stdcall GetAllResponseHeaders (
       [out retval] BSTR *Headers
     );
     HRESULT __stdcall Send (
       [in opt] VARIANT Body
     );
     [id(7), propget]
     HRESULT __stdcall Status (
       [out retval] long *Status
     );
     [propget]
     HRESULT __stdcall StatusText (
       [out retval] BSTR *Status
     );
     [propget]
     HRESULT __stdcall ResponseText (
       [out retval] BSTR *Body
     );
     [propget]
     HRESULT __stdcall ResponseBody (
       [out retval] VARIANT *Body
     );
     [propget]
     HRESULT __stdcall ResponseStream (
       [out retval] VARIANT *Body
     );
     [id(6), propget]
     HRESULT __stdcall Option (
       [in] enum WinHttpRequestOption Option,
       [out retval] VARIANT *Value
     );
     [id(6), propput]
     HRESULT __stdcall Option (
       [in] enum WinHttpRequestOption Option,
       [in] VARIANT argNo2
     );
     [id(15)]
     HRESULT __stdcall WaitForResponse (
       [in opt] VARIANT Timeout,
       [out retval] WINBOOL *Succeeded
     );
     [id(12)]
     HRESULT __stdcall Abort (void);
     [id(16)]
     HRESULT __stdcall SetTimeouts (
       [in] long ResolveTimeout,
       [in] long ConnectTimeout,
       [in] long SendTimeout,
       [in] long ReceiveTimeout
     );
     HRESULT __stdcall SetClientCertificate (
       [in] BSTR ClientCertificate
     );
     HRESULT __stdcall SetAutoLogonPolicy (
       [in] enum WinHttpRequestAutoLogonPolicy AutoLogonPolicy
     );
   };

};

/* Interface declarations.  */
[
  uuid(F97F4E15-B787-4212-80D1-D380CBBF982E),
  helpstring("IWinHttpRequestEvents Interface"),
  nonextensible,
  oleautomation
]
interface IWinHttpRequestEvents : IUnknown
{
  [id(1610678272)]
  void __stdcall OnResponseStart (
    [in] long Status,
    [in] BSTR ContentType
  );
  void __stdcall OnResponseDataAvailable (
    [in] UCHAR Data[]*
  );
  void __stdcall OnResponseFinished (void);
  void __stdcall OnError (
    [in] long ErrorNumber,
    [in] BSTR ErrorDescription
  );
};

