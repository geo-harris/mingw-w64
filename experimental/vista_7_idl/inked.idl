/* Automated generated idl file <inkedlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IDataObject;
interface IEnumFORMATETC;
interface IAdviseSink;
interface IMoniker;
interface IPersistStream;
interface IPersist;
interface IStream;
interface ISequentialStream;
interface IBindCtx;
interface IRunningObjectTable;
interface IEnumMoniker;
interface IEnumString;
interface IEnumSTATDATA;

/* Structure forward declarations.  */
struct tagRECT;
struct tagXFORM;
struct tagFORMATETC;
struct _userCLIPFORMAT;
struct tagDVTARGETDEVICE;
struct _userSTGMEDIUM;
struct _STGMEDIUM_UNION;
struct _userHMETAFILEPICT;
struct _remoteMETAFILEPICT;
struct _userHMETAFILE;
struct _BYTE_BLOB;
struct _userHENHMETAFILE;
struct _GDI_OBJECT;
struct _userHBITMAP;
struct _userBITMAP;
struct _userHPALETTE;
struct tagLOGPALETTE;
struct tagPALETTEENTRY;
struct _userHGLOBAL;
struct _FLAGGED_BYTE_BLOB;
struct _userFLAG_STGMEDIUM;
struct _LARGE_INTEGER;
struct _ULARGE_INTEGER;
struct tagSTATSTG;
struct _FILETIME;
struct tagBIND_OPTS2;
struct _COSERVERINFO;
struct _COAUTHINFO;
struct _COAUTHIDENTITY;
struct tagSTATDATA;
struct _InkRecoGuide;

/* Union record forward declarations.  */
union __MIDL_IWinTypes_0001;
union __MIDL_IAdviseSink_0003;
union __MIDL_IWinTypes_0005;
union __MIDL_IWinTypes_0004;
union __MIDL_IWinTypes_0006;
union __MIDL_IAdviseSink_0002;
union __MIDL_IWinTypes_0007;
union __MIDL_IWinTypes_0008;
union __MIDL_IWinTypes_0003;

/* Union record forward declarations.  */
dispinterface IInkEdit;
dispinterface IInkDrawingAttributes;
dispinterface IInkExtendedProperties;
dispinterface IInkExtendedProperty;
dispinterface IInkRecognizer;
dispinterface IInkRecognizerContext;
dispinterface IInkStrokes;
dispinterface IInkDisp;
dispinterface IInkCustomStrokes;
dispinterface IInkRectangle;
dispinterface IInkStrokeDisp;
dispinterface IInkTransform;
dispinterface IInkRecognitionResult;
dispinterface IInkRecognitionAlternate;
dispinterface IInkRecognitionAlternates;
dispinterface IInkRecognizerGuide;
dispinterface IInkWordList;
dispinterface _IInkEditEvents;
dispinterface IInkCursor;
dispinterface IInkTablet;
dispinterface IInkCursorButtons;
dispinterface IInkCursorButton;

/* Union record forward declarations.  */
coclass InkEdit;

/* Enumeration declarations.  */
[
  helpstring("Defines values that specify which mouse button was pressed.")
]
enum MouseButton
{
  NO_BUTTON = (int) 201326592,
  LEFT_BUTTON = (int) 201326593,
  RIGHT_BUTTON = (int) 201326594,
  MIDDLE_BUTTON = (int) 201326596
};
[
  helpstring("Defines values that specify whether a paragraph is aligned along the left margin, along the right margin, or between the left and right margin of the control.")
]
enum SelAlignmentConstants
{
  rtfLeft = (int) 201326592,
  rtfRight = (int) 201326593,
  rtfCenter = (int) 201326594
};
[
  hidden
]
enum DISPID_InkEdit
{
  DISPID_Text = (int) 201326592,
  DISPID_TextRTF = (int) 201326593,
  DISPID_Hwnd = (int) 201326594,
  DISPID_DisableNoScroll = (int) 201326595,
  DISPID_Locked = (int) 201326596,
  DISPID_Enabled = (int) 201326597,
  DISPID_MaxLength = (int) 201326598,
  DISPID_MultiLine = (int) 201326599,
  DISPID_ScrollBars = (int) 201326600,
  DISPID_RTSelStart = (int) 201326601,
  DISPID_RTSelLength = (int) 201326602,
  DISPID_RTSelText = (int) 201326603,
  DISPID_SelAlignment = (int) 201326604,
  DISPID_SelBold = (int) 201326605,
  DISPID_SelCharOffset = (int) 201326606,
  DISPID_SelColor = (int) 201326607,
  DISPID_SelFontName = (int) 201326608,
  DISPID_SelFontSize = (int) 201326609,
  DISPID_SelItalic = (int) 201326610,
  DISPID_SelRTF = (int) 201326611,
  DISPID_SelUnderline = (int) 201326612,
  DISPID_DragIcon = (int) 201326613,
  DISPID_Status = (int) 201326614,
  DISPID_UseMouseForInput = (int) 201326615,
  DISPID_InkMode = (int) 201326616,
  DISPID_InkInsertMode = (int) 201326617,
  DISPID_RecoTimeout = (int) 201326618,
  DISPID_DrawAttr = (int) 201326619,
  DISPID_Recognizer = (int) 201326620,
  DISPID_Factoid = (int) 201326621,
  DISPID_SelInk = (int) 201326622,
  DISPID_SelInksDisplayMode = (int) 201326623,
  DISPID_Recognize = (int) 201326624,
  DISPID_GetGestStatus = (int) 201326625,
  DISPID_SetGestStatus = (int) 201326626,
  DISPID_Refresh = (int) 201326627
};
[
  hidden
]
enum DISPID_InkEditEvents
{
  DISPID_IeeChange = (int) 201326593,
  DISPID_IeeSelChange = (int) 201326594,
  DISPID_IeeKeyDown = (int) 201326595,
  DISPID_IeeKeyUp = (int) 201326596,
  DISPID_IeeMouseUp = (int) 201326597,
  DISPID_IeeMouseDown = (int) 201326598,
  DISPID_IeeKeyPress = (int) 201326599,
  DISPID_IeeDblClick = (int) 201326600,
  DISPID_IeeClick = (int) 201326601,
  DISPID_IeeMouseMove = (int) 201326602,
  DISPID_IeeCursorDown = (int) 201326613,
  DISPID_IeeStroke = (int) 201326614,
  DISPID_IeeGesture = (int) 201326615,
  DISPID_IeeRecognitionResult = (int) 201326616
};
[
  helpstring("Represents the actions that allow you to collect ink, recognize it, and display it in text form.")
]
enum InkEditStatus
{
  IES_Idle = (int) 201326592,
  IES_Collecting = (int) 201326593,
  IES_Recognizing = (int) 201326594
};
[
  helpstring("Defines values that specify the collection mode settings for drawn ink - whether ink collection is disabled, whether ink is collected, or whether ink and gestures are being collected.")
]
enum InkMode
{
  IEM_Disabled = (int) 201326592,
  IEM_Ink = (int) 201326593,
  IEM_InkAndGesture = (int) 201326594
};
[
  helpstring("Defines values that specify how ink is inserted onto the control.")
]
enum InkInsertMode
{
  IEM_InsertText = (int) 201326592,
  IEM_InsertInk = (int) 201326593
};
[
  helpstring("Defines values for performing raster operations on drawn ink.")
]
enum InkRasterOperation
{
  IRO_Black = (int) 201326593,
  IRO_NotMergePen = (int) 201326594,
  IRO_MaskNotPen = (int) 201326595,
  IRO_NotCopyPen = (int) 201326596,
  IRO_MaskPenNot = (int) 201326597,
  IRO_Not = (int) 201326598,
  IRO_XOrPen = (int) 201326599,
  IRO_NotMaskPen = (int) 201326600,
  IRO_MaskPen = (int) 201326601,
  IRO_NotXOrPen = (int) 201326602,
  IRO_NoOperation = (int) 201326603,
  IRO_MergeNotPen = (int) 201326604,
  IRO_CopyPen = (int) 201326605,
  IRO_MergePenNot = (int) 201326606,
  IRO_MergePen = (int) 201326607,
  IRO_White = (int) 201326608
};
[
  helpstring("Defines values that specify whether the pen tip is round or rectangular.")
]
enum InkPenTip
{
  IPT_Ball = (int) 201326592,
  IPT_Rectangle = (int) 201326593
};
enum InkRecognizerCapabilities
{
  IRC_DontCare = (int) 201326593,
  IRC_Object = (int) 201326594,
  IRC_FreeInput = (int) 201326596,
  IRC_LinedInput = (int) 201326600,
  IRC_BoxedInput = (int) 201326608,
  IRC_CharacterAutoCompletionInput = (int) 201326624,
  IRC_RightAndDown = (int) 201326656,
  IRC_LeftAndDown = (int) 201326720,
  IRC_DownAndLeft = (int) 201326848,
  IRC_DownAndRight = (int) 201327104,
  IRC_ArbitraryAngle = (int) 201327616,
  IRC_Lattice = (int) 201328640,
  IRC_AdviseInkChange = (int) 201330688,
  IRC_StrokeReorder = (int) 201334784,
  IRC_Personalizable = (int) 201342976
};
[
  helpstring("Represents the collected strokes of ink within an ink space.")
]
enum InkBoundingBoxMode
{
  IBBM_Default = (int) 201326592,
  IBBM_NoCurveFit = (int) 201326593,
  IBBM_CurveFit = (int) 201326594,
  IBBM_PointsOnly = (int) 201326595,
  IBBM_Union = (int) 201326596
};
enum TabletPropertyMetricUnit
{
  TPMU_Default = (int) 201326592,
  TPMU_Inches = (int) 201326593,
  TPMU_Centimeters = (int) 201326594,
  TPMU_Degrees = (int) 201326595,
  TPMU_Radians = (int) 201326596,
  TPMU_Seconds = (int) 201326597,
  TPMU_Pounds = (int) 201326598,
  TPMU_Grams = (int) 201326599
};
[
  helpstring("Defines values that determine what part of a stroke to remove from an Ink object.")
]
enum InkExtractFlags
{
  IEF_CopyFromOriginal = (int) 201326592,
  IEF_RemoveFromOriginal = (int) 201326593,
  IEF_Default = (int) 201326593
};
[
  helpstring("Defines values that specify how ink is persisted.")
]
enum InkPersistenceFormat
{
  IPF_InkSerializedFormat = (int) 201326592,
  IPF_Base64InkSerializedFormat = (int) 201326593,
  IPF_GIF = (int) 201326594,
  IPF_Base64GIF = (int) 201326595
};
[
  helpstring("Defines values for the compression modes used to save the Ink object to a serialized format.")
]
enum InkPersistenceCompressionMode
{
  IPCM_Default = (int) 201326592,
  IPCM_MaximumCompression = (int) 201326593,
  IPCM_NoCompression = (int) 201326594
};
[
  helpstring("Defines values that specify the format of ink that is stored on the clipboard.")
]
enum InkClipboardFormats
{
  ICF_None = (int) 201326592,
  ICF_InkSerializedFormat = (int) 201326593,
  ICF_SketchInk = (int) 201326594,
  ICF_TextInk = (int) 201326598,
  ICF_EnhancedMetafile = (int) 201326600,
  ICF_Metafile = (int) 201326624,
  ICF_Bitmap = (int) 201326656,
  ICF_PasteMask = (int) 201326599,
  ICF_CopyMask = (int) 201326719,
  ICF_Default = (int) 201326719
};
[
  helpstring("Defines values that specify the copy options of the clipboard.")
]
enum InkClipboardModes
{
  ICB_Copy = (int) 201326592,
  ICB_Cut = (int) 201326593,
  ICB_ExtractOnly = (int) 201326640,
  ICB_DelayedCopy = (int) 201326624,
  ICB_Default = (int) 201326592
};
enum InkRecognitionConfidence
{
  IRC_Strong = (int) 201326592,
  IRC_Intermediate = (int) 201326593,
  IRC_Poor = (int) 201326594
};
enum InkRecognizerCharacterAutoCompletionMode
{
  IRCACM_Full = (int) 201326592,
  IRCACM_Prefix = (int) 201326593,
  IRCACM_Random = (int) 201326594
};
enum InkRecognitionModes
{
  IRM_None = (int) 201326592,
  IRM_WordModeOnly = (int) 201326593,
  IRM_Coerce = (int) 201326594,
  IRM_TopInkBreaksOnly = (int) 201326596,
  IRM_PrefixOk = (int) 201326600,
  IRM_LineMode = (int) 201326608,
  IRM_DisablePersonalization = (int) 201326624,
  IRM_AutoSpace = (int) 201326656,
  IRM_Max = (int) 201326720
};
[
  helpstring("Defines values that specify whether an error occurred during recognition, and if so, which error(s) occurred.")
]
enum InkRecognitionStatus
{
  IRS_NoError = (int) 201326592,
  IRS_Interrupted = (int) 201326593,
  IRS_ProcessFailed = (int) 201326594,
  IRS_InkAddedFailed = (int) 201326596,
  IRS_SetAutoCompletionModeFailed = (int) 201326600,
  IRS_SetStrokesFailed = (int) 201326608,
  IRS_SetGuideFailed = (int) 201326624,
  IRS_SetFlagsFailed = (int) 201326656,
  IRS_SetFactoidFailed = (int) 201326720,
  IRS_SetPrefixSuffixFailed = (int) 201326848,
  IRS_SetWordListFailed = (int) 201327104
};
[
  helpstring("Defines values that specify how a selection is displayed on the control.")
]
enum InkDisplayMode
{
  IDM_Ink = (int) 201326592,
  IDM_Text = (int) 201326593
};
enum InkApplicationGesture
{
  IAG_AllGestures = (int) 201326592,
  IAG_NoGesture = (int) 201388032,
  IAG_Scratchout = (int) 201388033,
  IAG_Triangle = (int) 201388034,
  IAG_Square = (int) 201388035,
  IAG_Star = (int) 201388036,
  IAG_Check = (int) 201388037,
  IAG_Curlicue = (int) 201388048,
  IAG_DoubleCurlicue = (int) 201388049,
  IAG_Circle = (int) 201388064,
  IAG_DoubleCircle = (int) 201388065,
  IAG_SemiCircleLeft = (int) 201388072,
  IAG_SemiCircleRight = (int) 201388073,
  IAG_ChevronUp = (int) 201388080,
  IAG_ChevronDown = (int) 201388081,
  IAG_ChevronLeft = (int) 201388082,
  IAG_ChevronRight = (int) 201388083,
  IAG_ArrowUp = (int) 201388088,
  IAG_ArrowDown = (int) 201388089,
  IAG_ArrowLeft = (int) 201388090,
  IAG_ArrowRight = (int) 201388091,
  IAG_Up = (int) 201388120,
  IAG_Down = (int) 201388121,
  IAG_Left = (int) 201388122,
  IAG_Right = (int) 201388123,
  IAG_UpDown = (int) 201388128,
  IAG_DownUp = (int) 201388129,
  IAG_LeftRight = (int) 201388130,
  IAG_RightLeft = (int) 201388131,
  IAG_UpLeftLong = (int) 201388132,
  IAG_UpRightLong = (int) 201388133,
  IAG_DownLeftLong = (int) 201388134,
  IAG_DownRightLong = (int) 201388135,
  IAG_UpLeft = (int) 201388136,
  IAG_UpRight = (int) 201388137,
  IAG_DownLeft = (int) 201388138,
  IAG_DownRight = (int) 201388139,
  IAG_LeftUp = (int) 201388140,
  IAG_LeftDown = (int) 201388141,
  IAG_RightUp = (int) 201388142,
  IAG_RightDown = (int) 201388143,
  IAG_Exclamation = (int) 201388196,
  IAG_Tap = (int) 201388272,
  IAG_DoubleTap = (int) 201388273
};
[
  helpstring("Defines values that specify whether the control appears flat or 3D.")
]
enum AppearanceConstants
{
  rtfFlat = (int) 201326592,
  rtfThreeD = (int) 201326593
};
[
  helpstring("Defines values that specify whether the control has a border.")
]
enum BorderStyleConstants
{
  rtfNoBorder = (int) 201326592,
  rtfFixedSingle = (int) 201326593
};
[
  helpstring("Defines values that specify the type of mouse pointer to be displayed.")
]
enum InkMousePointer
{
  IMP_Default = (int) 201326592,
  IMP_Arrow = (int) 201326593,
  IMP_Crosshair = (int) 201326594,
  IMP_Ibeam = (int) 201326595,
  IMP_SizeNESW = (int) 201326596,
  IMP_SizeNS = (int) 201326597,
  IMP_SizeNWSE = (int) 201326598,
  IMP_SizeWE = (int) 201326599,
  IMP_UpArrow = (int) 201326600,
  IMP_Hourglass = (int) 201326601,
  IMP_NoDrop = (int) 201326602,
  IMP_ArrowHourglass = (int) 201326603,
  IMP_ArrowQuestion = (int) 201326604,
  IMP_SizeAll = (int) 201326605,
  IMP_Hand = (int) 201326606,
  IMP_Custom = (int) 201326691
};
[
  helpstring("Defines values that specify whether the control has no scroll bars, a horizontal scroll bar, a vertical scroll bar, or both horizontal and vertical scroll bars.")
]
enum ScrollBarsConstants
{
  rtfNone = (int) 201326592,
  rtfHorizontal = (int) 201326593,
  rtfVertical = (int) 201326594,
  rtfBoth = (int) 201326595
};
enum TabletHardwareCapabilities
{
  THWC_Integrated = (int) 201326593,
  THWC_CursorMustTouch = (int) 201326594,
  THWC_HardProximity = (int) 201326596,
  THWC_CursorsHavePhysicalIds = (int) 201326600
};
enum InkCursorButtonState
{
  ICBS_Unavailable = (int) 201326592,
  ICBS_Up = (int) 201326593,
  ICBS_Down = (int) 201326594
};

/* Structure/union declarations.  */
struct tagRECT
{
  long Left;
  long Top;
  long Right;
  long Bottom;
};
[
  hidden
]
struct tagXFORM
{
  float eM11;
  float eM12;
  float eM21;
  float eM22;
  float eDx;
  float eDy;
};
struct tagFORMATETC
{
  wireCLIPFORMAT cfFormat;
  struct tagDVTARGETDEVICE *ptd;
  UINT dwAspect;
  long lindex;
  UINT tymed;
};
struct _userCLIPFORMAT
{
  long fContext;
  union __MIDL_IWinTypes_0001 u;
};
union __MIDL_IWinTypes_0001
{
  UINT dwValue;
  LPWSTR pwszName;
};
struct tagDVTARGETDEVICE
{
  UINT tdSize;
  USHORT tdDriverNameOffset;
  USHORT tdDeviceNameOffset;
  USHORT tdPortNameOffset;
  USHORT tdExtDevmodeOffset;
  UCHAR *tdData;
};
struct _userSTGMEDIUM
{
  struct _STGMEDIUM_UNION DUMMYUNIONNAME;
  IUnknown * pUnkForRelease;
};
struct _STGMEDIUM_UNION
{
  UINT tymed;
  union __MIDL_IAdviseSink_0003 u;
};
union __MIDL_IAdviseSink_0003
{
  struct _userHMETAFILEPICT *hMetaFilePict;
  struct _userHENHMETAFILE *hHEnhMetaFile;
  struct _GDI_OBJECT *hGdiHandle;
  struct _userHGLOBAL *hGlobal;
  LPWSTR lpszFileName;
  struct _BYTE_BLOB *pstm;
  struct _BYTE_BLOB *pstg;
};
struct _userHMETAFILEPICT
{
  long fContext;
  union __MIDL_IWinTypes_0005 u;
};
union __MIDL_IWinTypes_0005
{
  long hInproc;
  struct _remoteMETAFILEPICT *hRemote;
  LONGLONG hInproc64;
};
struct _remoteMETAFILEPICT
{
  long mm;
  long xExt;
  long yExt;
  struct _userHMETAFILE *hMF;
};
struct _userHMETAFILE
{
  long fContext;
  union __MIDL_IWinTypes_0004 u;
};
union __MIDL_IWinTypes_0004
{
  long hInproc;
  struct _BYTE_BLOB *hRemote;
  LONGLONG hInproc64;
};
struct _BYTE_BLOB
{
  UINT clSize;
  UCHAR *abData;
};
struct _userHENHMETAFILE
{
  long fContext;
  union __MIDL_IWinTypes_0006 u;
};
union __MIDL_IWinTypes_0006
{
  long hInproc;
  struct _BYTE_BLOB *hRemote;
  LONGLONG hInproc64;
};
struct _GDI_OBJECT
{
  UINT ObjectType;
  union __MIDL_IAdviseSink_0002 u;
};
union __MIDL_IAdviseSink_0002
{
  struct _userHBITMAP *hBitmap;
  struct _userHPALETTE *hPalette;
  struct _userHGLOBAL *hGeneric;
};
struct _userHBITMAP
{
  long fContext;
  union __MIDL_IWinTypes_0007 u;
};
union __MIDL_IWinTypes_0007
{
  long hInproc;
  struct _userBITMAP *hRemote;
  LONGLONG hInproc64;
};
struct _userBITMAP
{
  long bmType;
  long bmWidth;
  long bmHeight;
  long bmWidthBytes;
  USHORT bmPlanes;
  USHORT bmBitsPixel;
  UINT cbSize;
  UCHAR *pBuffer;
};
struct _userHPALETTE
{
  long fContext;
  union __MIDL_IWinTypes_0008 u;
};
union __MIDL_IWinTypes_0008
{
  long hInproc;
  struct tagLOGPALETTE *hRemote;
  LONGLONG hInproc64;
};
struct tagLOGPALETTE
{
  USHORT palVersion;
  USHORT palNumEntries;
  struct tagPALETTEENTRY *palPalEntry;
};
struct tagPALETTEENTRY
{
  UCHAR peRed;
  UCHAR peGreen;
  UCHAR peBlue;
  UCHAR peFlags;
};
struct _userHGLOBAL
{
  long fContext;
  union __MIDL_IWinTypes_0003 u;
};
union __MIDL_IWinTypes_0003
{
  long hInproc;
  struct _FLAGGED_BYTE_BLOB *hRemote;
  LONGLONG hInproc64;
};
struct _FLAGGED_BYTE_BLOB
{
  UINT fFlags;
  UINT clSize;
  UCHAR *abData;
};
struct _userFLAG_STGMEDIUM
{
  long ContextFlags;
  long fPassOwnership;
  struct _userSTGMEDIUM Stgmed;
};
struct _LARGE_INTEGER
{
  LONGLONG QuadPart;
};
struct _ULARGE_INTEGER
{
  ULONGLONG QuadPart;
};
struct tagSTATSTG
{
  LPWSTR pwcsName;
  UINT type;
  struct _ULARGE_INTEGER cbSize;
  struct _FILETIME mtime;
  struct _FILETIME ctime;
  struct _FILETIME atime;
  UINT grfMode;
  UINT grfLocksSupported;
  struct GUID clsid;
  UINT grfStateBits;
  UINT reserved;
};
struct _FILETIME
{
  UINT dwLowDateTime;
  UINT dwHighDateTime;
};
struct tagBIND_OPTS2
{
  UINT cbStruct;
  UINT grfFlags;
  UINT grfMode;
  UINT dwTickCountDeadline;
  UINT dwTrackFlags;
  UINT dwClassContext;
  UINT locale;
  struct _COSERVERINFO *pServerInfo;
};
struct _COSERVERINFO
{
  UINT dwReserved1;
  LPWSTR pwszName;
  struct _COAUTHINFO *pAuthInfo;
  UINT dwReserved2;
};
struct _COAUTHINFO
{
  UINT dwAuthnSvc;
  UINT dwAuthzSvc;
  LPWSTR pwszServerPrincName;
  UINT dwAuthnLevel;
  UINT dwImpersonationLevel;
  struct _COAUTHIDENTITY *pAuthIdentityData;
  UINT dwCapabilities;
};
struct _COAUTHIDENTITY
{
  USHORT *User;
  UINT UserLength;
  USHORT *Domain;
  UINT DomainLength;
  USHORT *Password;
  UINT PasswordLength;
  UINT Flags;
};
struct tagSTATDATA
{
  struct tagFORMATETC formatetc;
  UINT advf;
  interface IAdviseSink *pAdvSink;
  UINT dwConnection;
};
[
  hidden
]
struct _InkRecoGuide
{
  struct tagRECT rectWritingBox;
  struct tagRECT rectDrawnBox;
  long cRows;
  long cColumns;
  long Midline;
};

/* Type definitions.  */
[
  hidden
]
typedef struct tagXFORM XFORM;
typedef struct _userCLIPFORMAT * wireCLIPFORMAT;
typedef struct _userSTGMEDIUM * wireSTGMEDIUM;
typedef struct _userFLAG_STGMEDIUM * wireFLAG_STGMEDIUM;
typedef struct _userSTGMEDIUM * wireASYNC_STGMEDIUM;
[
  hidden
]
typedef struct _InkRecoGuide InkRecoGuide;

[
  uuid(8405D0DF-9FDD-4829-AEAD-8E2B0A18FEA4),
  version(1.0),
  helpstring("Microsoft InkEdit Control 1.0"),
  helpfile("TPCSDK10.CHM")
]
library inkedlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(E5CA59F5-57C4-4DD8-9BD6-1DEEEDD27AF4),
     helpstring("InkEdit Control"),
     cancreate
   ]
   coclass InkEdit
   {
     dispinterface IInkEdit;
     dispinterface _IInkEditEvents;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(F2127A19-FBFB-4AED-8464-3F36D78CFEFB),
     helpstring("IInkEdit Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkEdit : IDispatch
   {
     [id(22), propget]
     HRESULT __stdcall Status (
       [out retval] enum InkEditStatus *pStatus
     );
     [propget]
     HRESULT __stdcall UseMouseForInput (
       [out retval] WINBOOL *pVal
     );
     [id(23), propput]
     HRESULT __stdcall UseMouseForInput (
       [in opt] WINBOOL argNo1 = (BOOL) -1
     );
     [propget]
     HRESULT __stdcall InkMode (
       [out retval] enum InkMode *pVal
     );
     [id(24), propput]
     HRESULT __stdcall InkMode (
       [in opt] enum InkMode argNo1 = (int) 201326594
     );
     [propget]
     HRESULT __stdcall InkInsertMode (
       [out retval] enum InkInsertMode *pVal
     );
     [id(25), propput]
     HRESULT __stdcall InkInsertMode (
       [in opt] enum InkInsertMode argNo1 = (int) 201326592
     );
     [id(27), propget]
     HRESULT __stdcall DrawingAttributes (
       [out retval] dispinterface IInkDrawingAttributes **pVal
     );
     [id(27), propputref]
     HRESULT __stdcall DrawingAttributes (
       [in] dispinterface IInkDrawingAttributes *argNo1
     );
     [id(26), propget]
     HRESULT __stdcall RecognitionTimeout (
       [out retval] long *pVal
     );
     [id(26), propput]
     HRESULT __stdcall RecognitionTimeout (
       [in] long argNo1
     );
     [id(28), propget]
     HRESULT __stdcall Recognizer (
       [out retval] dispinterface IInkRecognizer **pVal
     );
     [id(28), propputref]
     HRESULT __stdcall Recognizer (
       [in] dispinterface IInkRecognizer *argNo1
     );
     [propget]
     HRESULT __stdcall Factoid (
       [out retval] BSTR *pVal
     );
     [id(29), propput]
     HRESULT __stdcall Factoid (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SelInks (
       [out retval] VARIANT *pSelInk
     );
     [id(30), propput]
     HRESULT __stdcall SelInks (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall SelInksDisplayMode (
       [out retval] enum InkDisplayMode *pInkDisplayMode
     );
     [id(31), propput]
     HRESULT __stdcall SelInksDisplayMode (
       [in] enum InkDisplayMode argNo1
     );
     HRESULT __stdcall Recognize (void);
     HRESULT __stdcall GetGestureStatus (
       [in] enum InkApplicationGesture Gesture,
       [out retval] WINBOOL *pListen
     );
     HRESULT __stdcall SetGestureStatus (
       [in] enum InkApplicationGesture Gesture,
       [in] WINBOOL Listen
     );
     [id(-501), propput]
     HRESULT __stdcall BackColor (
       [in] OLE_COLOR argNo1
     );
     [id(-501), propget]
     HRESULT __stdcall BackColor (
       [out retval] OLE_COLOR *pclr
     );
     [id(-520), propget]
     HRESULT __stdcall Appearance (
       [out retval] enum AppearanceConstants *pAppearance
     );
     [id(-520), propput]
     HRESULT __stdcall Appearance (
       [in] enum AppearanceConstants argNo1
     );
     [id(-504), propget]
     HRESULT __stdcall BorderStyle (
       [out retval] enum BorderStyleConstants *pBorderStyle
     );
     [id(-504), propput]
     HRESULT __stdcall BorderStyle (
       [in] enum BorderStyleConstants argNo1
     );
     [id(-515), propget]
     HRESULT __stdcall Hwnd (
       [out retval] OLE_HANDLE *pohHwnd
     );
     [id(-512), propget, bindable]
     HRESULT __stdcall Font (
       [out retval] IFontDisp **ppFont
     );
     [id(-512), propputref, bindable]
     HRESULT __stdcall Font (
       [in] IFontDisp *argNo1
     );
     [id(0), propget]
     HRESULT __stdcall Text (
       [out retval] BSTR *pbstrText
     );
     [id(0), propput]
     HRESULT __stdcall Text (
       [in] BSTR argNo1
     );
     [id(-522), propget]
     HRESULT __stdcall MouseIcon (
       [out retval] IPictureDisp **MouseIcon
     );
     [id(-522), propput]
     HRESULT __stdcall MouseIcon (
       [in] IPictureDisp *argNo1
     );
     [id(-522), propputref]
     HRESULT __stdcall MouseIcon (
       [in] IPictureDisp *argNo1
     );
     [propget]
     HRESULT __stdcall MousePointer (
       [out retval] enum InkMousePointer *MousePointer
     );
     [id(-521), propput]
     HRESULT __stdcall MousePointer (
       [in] enum InkMousePointer argNo1
     );
     [id(4), propget]
     HRESULT __stdcall Locked (
       [out retval] WINBOOL *pVal
     );
     [id(4), propput]
     HRESULT __stdcall Locked (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall Enabled (
       [out retval] WINBOOL *pVal
     );
     [id(5), propput]
     HRESULT __stdcall Enabled (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall MaxLength (
       [out retval] long *plMaxLength
     );
     [id(6), propput]
     HRESULT __stdcall MaxLength (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall MultiLine (
       [out retval] WINBOOL *pVal
     );
     [id(7), propput]
     HRESULT __stdcall MultiLine (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall ScrollBars (
       [out retval] enum ScrollBarsConstants *pVal
     );
     [id(8), propput]
     HRESULT __stdcall ScrollBars (
       [in] enum ScrollBarsConstants argNo1
     );
     [id(3), propget]
     HRESULT __stdcall DisableNoScroll (
       [out retval] WINBOOL *pVal
     );
     [id(3), propput]
     HRESULT __stdcall DisableNoScroll (
       [in] WINBOOL argNo1
     );
     [id(12), propget]
     HRESULT __stdcall SelAlignment (
       [out retval] VARIANT *pvarSelAlignment
     );
     [id(12), propput]
     HRESULT __stdcall SelAlignment (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall SelBold (
       [out retval] VARIANT *pvarSelBold
     );
     [id(13), propput]
     HRESULT __stdcall SelBold (
       [in] VARIANT argNo1
     );
     [id(18), propget]
     HRESULT __stdcall SelItalic (
       [out retval] VARIANT *pvarSelItalic
     );
     [id(18), propput]
     HRESULT __stdcall SelItalic (
       [in] VARIANT argNo1
     );
     [id(20), propget]
     HRESULT __stdcall SelUnderline (
       [out retval] VARIANT *pvarSelUnderline
     );
     [id(20), propput]
     HRESULT __stdcall SelUnderline (
       [in] VARIANT argNo1
     );
     [id(15), propget]
     HRESULT __stdcall SelColor (
       [out retval] VARIANT *pvarSelColor
     );
     [id(15), propput]
     HRESULT __stdcall SelColor (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall SelFontName (
       [out retval] VARIANT *pvarSelFontName
     );
     [id(16), propput]
     HRESULT __stdcall SelFontName (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall SelFontSize (
       [out retval] VARIANT *pvarSelFontSize
     );
     [id(17), propput]
     HRESULT __stdcall SelFontSize (
       [in] VARIANT argNo1
     );
     [id(14), propget]
     HRESULT __stdcall SelCharOffset (
       [out retval] VARIANT *pvarSelCharOffset
     );
     [id(14), propput]
     HRESULT __stdcall SelCharOffset (
       [in] VARIANT argNo1
     );
     [id(1), propget, bindable, displaybind, defaultbind]
     HRESULT __stdcall TextRTF (
       [out retval] BSTR *pbstrTextRTF
     );
     [id(1), propput, bindable, displaybind]
     HRESULT __stdcall TextRTF (
       [in] BSTR argNo1
     );
     [id(9), propget]
     HRESULT __stdcall SelStart (
       [out retval] long *plSelStart
     );
     [id(9), propput]
     HRESULT __stdcall SelStart (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall SelLength (
       [out retval] long *plSelLength
     );
     [id(10), propput]
     HRESULT __stdcall SelLength (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall SelText (
       [out retval] BSTR *pbstrSelText
     );
     [id(11), propput]
     HRESULT __stdcall SelText (
       [in] BSTR argNo1
     );
     [id(19), propget]
     HRESULT __stdcall SelRTF (
       [out retval] BSTR *pbstrSelRTF
     );
     [id(19), propput]
     HRESULT __stdcall SelRTF (
       [in] BSTR argNo1
     );
     [id(35)]
     HRESULT __stdcall Refresh (void);
   };
   [
     uuid(BF519B75-0A15-4623-ADC9-C00D436A8092),
     helpstring("IInkDrawingAttributes Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkDrawingAttributes : IDispatch
   {
     [id(2), propget]
     HRESULT __stdcall Color (
       [out retval] long *CurrentColor
     );
     [id(2), propput]
     HRESULT __stdcall Color (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Width (
       [out retval] float *CurrentWidth
     );
     [id(3), propput]
     HRESULT __stdcall Width (
       [in] float argNo1
     );
     [id(1), propget]
     HRESULT __stdcall Height (
       [out retval] float *CurrentHeight
     );
     [id(1), propput]
     HRESULT __stdcall Height (
       [in] float argNo1
     );
     [id(4), propget]
     HRESULT __stdcall FitToCurve (
       [out retval] WINBOOL *Flag
     );
     [id(4), propput]
     HRESULT __stdcall FitToCurve (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall IgnorePressure (
       [out retval] WINBOOL *Flag
     );
     [id(5), propput]
     HRESULT __stdcall IgnorePressure (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall AntiAliased (
       [out retval] WINBOOL *Flag
     );
     [id(6), propput]
     HRESULT __stdcall AntiAliased (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall Transparency (
       [out retval] long *CurrentTransparency
     );
     [id(7), propput]
     HRESULT __stdcall Transparency (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall RasterOperation (
       [out retval] enum InkRasterOperation *CurrentRasterOperation
     );
     [id(8), propput]
     HRESULT __stdcall RasterOperation (
       [in] enum InkRasterOperation argNo1
     );
     [propget]
     HRESULT __stdcall PenTip (
       [out retval] enum InkPenTip *CurrentPenTip
     );
     [id(9), propput]
     HRESULT __stdcall PenTip (
       [in] enum InkPenTip argNo1
     );
     [id(11), propget]
     HRESULT __stdcall ExtendedProperties (
       [out retval] dispinterface IInkExtendedProperties **Properties
     );
     [id(10)]
     HRESULT __stdcall Clone (
       [out retval] dispinterface IInkDrawingAttributes **DrawingAttributes
     );
   };
   [
     uuid(89F2A8BE-95A9-4530-8B8F-88E971E3E25F),
     helpstring("IInkExtendedProperties Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkExtendedProperties : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **_NewEnum
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] VARIANT Identifier,
       [out retval] dispinterface IInkExtendedProperty **Item
     );
     [id(2)]
     HRESULT __stdcall Add (
       [in] BSTR Guid,
       [in] VARIANT Data,
       [out retval] dispinterface IInkExtendedProperty **InkExtendedProperty
     );
     HRESULT __stdcall Remove (
       [in] VARIANT Identifier
     );
     HRESULT __stdcall Clear (void);
     HRESULT __stdcall DoesPropertyExist (
       [in] BSTR Guid,
       [out retval] WINBOOL *DoesPropertyExist
     );
   };
   [
     uuid(DB489209-B7C3-411D-90F6-1548CFFF271E),
     helpstring("IInkExtendedProperty Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkExtendedProperty : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Guid (
       [out retval] BSTR *Guid
     );
     [propget]
     HRESULT __stdcall Data (
       [out retval] VARIANT *Data
     );
     [id(2), propput]
     HRESULT __stdcall Data (
       [in] VARIANT argNo1
     );
   };
   [
     uuid(782BF7CF-034B-4396-8A32-3A1833CF6B56),
     helpstring("IInkRecognizer Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRecognizer : IDispatch
   {
     [id(2), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall Vendor (
       [out retval] BSTR *Vendor
     );
     [propget]
     HRESULT __stdcall Capabilities (
       [out retval] enum InkRecognizerCapabilities *CapabilitiesFlags
     );
     [propget]
     HRESULT __stdcall Languages (
       [out retval] VARIANT *Languages
     );
     [id(8), propget]
     HRESULT __stdcall SupportedProperties (
       [out retval] VARIANT *SupportedProperties
     );
     [id(6), propget]
     HRESULT __stdcall PreferredPacketDescription (
       [out retval] VARIANT *PreferredPacketDescription
     );
     HRESULT __stdcall CreateRecognizerContext (
       [out retval] dispinterface IInkRecognizerContext **Context
     );
   };
   [
     uuid(C68F52F9-32A3-4625-906C-44FC23B40958),
     helpstring("IInkRecognizerContext Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRecognizerContext : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Strokes (
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [id(1), propputref]
     HRESULT __stdcall Strokes (
       [in] dispinterface IInkStrokes *argNo1
     );
     [propget]
     HRESULT __stdcall CharacterAutoCompletionMode (
       [out retval] enum InkRecognizerCharacterAutoCompletionMode *Mode
     );
     [id(2), propput]
     HRESULT __stdcall CharacterAutoCompletionMode (
       [in] enum InkRecognizerCharacterAutoCompletionMode argNo1
     );
     [propget]
     HRESULT __stdcall Factoid (
       [out retval] BSTR *Factoid
     );
     [id(3), propput]
     HRESULT __stdcall Factoid (
       [in] BSTR argNo1
     );
     [id(6), propget]
     HRESULT __stdcall Guide (
       [out retval] dispinterface IInkRecognizerGuide **RecognizerGuide
     );
     [id(6), propputref]
     HRESULT __stdcall Guide (
       [in] dispinterface IInkRecognizerGuide *argNo1
     );
     [id(8), propget]
     HRESULT __stdcall PrefixText (
       [out retval] BSTR *Prefix
     );
     [id(8), propput]
     HRESULT __stdcall PrefixText (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SuffixText (
       [out retval] BSTR *Suffix
     );
     [id(9), propput]
     HRESULT __stdcall SuffixText (
       [in] BSTR argNo1
     );
     [id(7), propget]
     HRESULT __stdcall RecognitionFlags (
       [out retval] enum InkRecognitionModes *Modes
     );
     [id(7), propput]
     HRESULT __stdcall RecognitionFlags (
       [in] enum InkRecognitionModes argNo1
     );
     [id(4), propget]
     HRESULT __stdcall WordList (
       [out retval] dispinterface IInkWordList **WordList
     );
     [id(4), propputref]
     HRESULT __stdcall WordList (
       [in] dispinterface IInkWordList *argNo1
     );
     [propget]
     HRESULT __stdcall Recognizer (
       [out retval] dispinterface IInkRecognizer **Recognizer
     );
     [id(12)]
     HRESULT __stdcall Recognize (
       [in out] enum InkRecognitionStatus *RecognitionStatus,
       [out retval] dispinterface IInkRecognitionResult **RecognitionResult
     );
     HRESULT __stdcall StopBackgroundRecognition (void);
     HRESULT __stdcall EndInkInput (void);
     HRESULT __stdcall BackgroundRecognize (
       [in opt] VARIANT CustomData
     );
     HRESULT __stdcall BackgroundRecognizeWithAlternates (
       [in opt] VARIANT CustomData
     );
     [id(11)]
     HRESULT __stdcall Clone (
       [out retval] dispinterface IInkRecognizerContext **RecoContext
     );
     [id(17)]
     HRESULT __stdcall IsStringSupported (
       [in] BSTR String,
       [out retval] WINBOOL *Supported
     );
   };
   [
     uuid(F1F4C9D8-590A-4963-B3AE-1935671BB6F3),
     helpstring("IInkStrokes Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkStrokes : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **_NewEnum
     );
     [id(3), propget]
     HRESULT __stdcall Ink (
       [out retval] dispinterface IInkDisp **Ink
     );
     [id(18), propget]
     HRESULT __stdcall RecognitionResult (
       [out retval] dispinterface IInkRecognitionResult **RecognitionResult
     );
     [id(8)]
     HRESULT __stdcall ToString (
       [out retval] BSTR *ToString
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IInkStrokeDisp **Stroke
     );
     [id(4)]
     HRESULT __stdcall Add (
       [in] dispinterface IInkStrokeDisp *InkStroke
     );
     HRESULT __stdcall AddStrokes (
       [in] dispinterface IInkStrokes *InkStrokes
     );
     HRESULT __stdcall Remove (
       [in] dispinterface IInkStrokeDisp *InkStroke
     );
     HRESULT __stdcall RemoveStrokes (
       [in] dispinterface IInkStrokes *InkStrokes
     );
     [id(9)]
     HRESULT __stdcall ModifyDrawingAttributes (
       [in] dispinterface IInkDrawingAttributes *DrawAttrs
     );
     HRESULT __stdcall GetBoundingBox (
       [in] enum InkBoundingBoxMode BoundingBoxMode,
       [out retval] dispinterface IInkRectangle **BoundingBox
     );
     [id(12)]
     HRESULT __stdcall Transform (
       [in] dispinterface IInkTransform *Transform,
       [in] WINBOOL ApplyOnPenWidth
     );
     [id(11)]
     HRESULT __stdcall ScaleToRectangle (
       [in] dispinterface IInkRectangle *Rectangle
     );
     [id(13)]
     HRESULT __stdcall Move (
       [in] float HorizontalComponent,
       [in] float VerticalComponent
     );
     HRESULT __stdcall Rotate (
       [in] float Degrees,
       [in] float X,
       [in] float Y
     );
     HRESULT __stdcall Shear (
       [in] float HorizontalMultiplier,
       [in] float VerticalMultiplier
     );
     HRESULT __stdcall ScaleTransform (
       [in] float HorizontalMultiplier,
       [in] float VerticalMultiplier
     );
     HRESULT __stdcall Clip (
       [in] dispinterface IInkRectangle *Rectangle
     );
     [id(19)]
     HRESULT __stdcall RemoveRecognitionResult (void);
   };
   [
     uuid(9D398FA0-C4E2-4FCD-9973-975CAAF47EA6),
     helpstring("IInkDisp Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkDisp : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Strokes (
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [propget]
     HRESULT __stdcall ExtendedProperties (
       [out retval] dispinterface IInkExtendedProperties **Properties
     );
     [id(8), propget]
     HRESULT __stdcall Dirty (
       [out retval] WINBOOL *Dirty
     );
     [id(8), propput]
     HRESULT __stdcall Dirty (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall CustomStrokes (
       [out retval] dispinterface IInkCustomStrokes **ppunkInkCustomStrokes
     );
     [id(3)]
     HRESULT __stdcall GetBoundingBox (
       [in] enum InkBoundingBoxMode BoundingBoxMode,
       [out retval] dispinterface IInkRectangle **Rectangle
     );
     HRESULT __stdcall DeleteStrokes (
       [in] dispinterface IInkStrokes *Strokes
     );
     HRESULT __stdcall DeleteStroke (
       [in] dispinterface IInkStrokeDisp *Stroke
     );
     HRESULT __stdcall ExtractStrokes (
       [in] dispinterface IInkStrokes *Strokes,
       [in] enum InkExtractFlags ExtractFlags,
       [out retval] dispinterface IInkDisp **ExtractedInk
     );
     HRESULT __stdcall ExtractWithRectangle (
       [in] dispinterface IInkRectangle *Rectangle,
       [in] enum InkExtractFlags ExtractFlags,
       [out retval] dispinterface IInkDisp **ExtractedInk
     );
     [id(18)]
     HRESULT __stdcall Clip (
       [in] dispinterface IInkRectangle *Rectangle
     );
     [id(10)]
     HRESULT __stdcall Clone (
       [out retval] dispinterface IInkDisp **NewInk
     );
     HRESULT __stdcall HitTestCircle (
       [in] long X,
       [in] long Y,
       [in] float Radius,
       [out retval] dispinterface IInkStrokes **Strokes
     );
     HRESULT __stdcall HitTestWithRectangle (
       [in] dispinterface IInkRectangle *SelectionRectangle,
       [in] float IntersectPercent,
       [out retval] dispinterface IInkStrokes **Strokes
     );
     HRESULT __stdcall HitTestWithLasso (
       [in] VARIANT Points,
       [in] float IntersectPercent,
       [in out] VARIANT *LassoPoints,
       [out retval] dispinterface IInkStrokes **Strokes
     );
     HRESULT __stdcall NearestPoint (
       [in] long X,
       [in] long Y,
       [in out] float *PointOnStroke,
       [in out] float *DistanceFromPacket,
       [out retval] dispinterface IInkStrokeDisp **Stroke
     );
     HRESULT __stdcall CreateStrokes (
       [in] VARIANT StrokeIds,
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [id(17)]
     HRESULT __stdcall AddStrokesAtRectangle (
       [in] dispinterface IInkStrokes *SourceStrokes,
       [in] dispinterface IInkRectangle *TargetRectangle
     );
     [id(19)]
     HRESULT __stdcall Save (
       [in] enum InkPersistenceFormat PersistenceFormat,
       [in] enum InkPersistenceCompressionMode CompressionMode,
       [out retval] VARIANT *Data
     );
     HRESULT __stdcall Load (
       [in] VARIANT Data
     );
     [id(16)]
     HRESULT __stdcall CreateStroke (
       [in] VARIANT PacketData,
       [in] VARIANT PacketDescription,
       [out retval] dispinterface IInkStrokeDisp **Stroke
     );
     [id(22)]
     HRESULT __stdcall ClipboardCopyWithRectangle (
       [in] dispinterface IInkRectangle *Rectangle,
       [in] enum InkClipboardFormats ClipboardFormats,
       [in] enum InkClipboardModes ClipboardModes,
       [out retval] interface IDataObject **DataObject
     );
     HRESULT __stdcall ClipboardCopy (
       [in] dispinterface IInkStrokes *Strokes,
       [in] enum InkClipboardFormats ClipboardFormats,
       [in] enum InkClipboardModes ClipboardModes,
       [out retval] interface IDataObject **DataObject
     );
     HRESULT __stdcall CanPaste (
       [in] interface IDataObject *DataObject,
       [out retval] WINBOOL *CanPaste
     );
     HRESULT __stdcall ClipboardPaste (
       [in] long X,
       [in] long Y,
       [in] interface IDataObject *DataObject,
       [out retval] dispinterface IInkStrokes **Strokes
     );
   };
   [
     uuid(7E23A88F-C30E-420F-9BDB-28902543F0C1),
     helpstring("IInkCustomStrokes Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkCustomStrokes : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **_NewEnum
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] VARIANT Identifier,
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [id(2)]
     HRESULT __stdcall Add (
       [in] BSTR Name,
       [in] dispinterface IInkStrokes *Strokes
     );
     HRESULT __stdcall Remove (
       [in] VARIANT Identifier
     );
     HRESULT __stdcall Clear (void);
   };
   [
     uuid(9794FF82-6071-4717-8A8B-6AC7C64A686E),
     helpstring("IInkRectangle Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRectangle : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Top (
       [out retval] long *Units
     );
     [id(1), propput]
     HRESULT __stdcall Top (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Left (
       [out retval] long *Units
     );
     [id(2), propput]
     HRESULT __stdcall Left (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Bottom (
       [out retval] long *Units
     );
     [id(3), propput]
     HRESULT __stdcall Bottom (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Right (
       [out retval] long *Units
     );
     [id(4), propput]
     HRESULT __stdcall Right (
       [in] long argNo1
     );
     [id(7), propget, hidden]
     HRESULT __stdcall Data (
       [out retval] struct tagRECT *Rect
     );
     [id(7), propput, hidden]
     HRESULT __stdcall Data (
       [in] struct tagRECT argNo1
     );
     [id(5)]
     HRESULT __stdcall GetRectangle (
       [out] long *Top,
       [out] long *Left,
       [out] long *Bottom,
       [out] long *Right
     );
     HRESULT __stdcall SetRectangle (
       [in] long Top,
       [in] long Left,
       [in] long Bottom,
       [in] long Right
     );
   };
   [
     uuid(43242FEA-91D1-4A72-963E-FBB91829CFA2),
     helpstring("IInkStrokeDisp Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkStrokeDisp : IDispatch
   {
     [id(2), propget]
     HRESULT __stdcall ID (
       [out retval] long *ID
     );
     [id(13), propget]
     HRESULT __stdcall BezierPoints (
       [out retval] VARIANT *Points
     );
     [id(4), propget]
     HRESULT __stdcall DrawingAttributes (
       [out retval] dispinterface IInkDrawingAttributes **DrawAttrs
     );
     [id(4), propputref]
     HRESULT __stdcall DrawingAttributes (
       [in] dispinterface IInkDrawingAttributes *argNo1
     );
     [id(12), propget]
     HRESULT __stdcall Ink (
       [out retval] dispinterface IInkDisp **Ink
     );
     [id(11), propget]
     HRESULT __stdcall ExtendedProperties (
       [out retval] dispinterface IInkExtendedProperties **Properties
     );
     [id(14), propget]
     HRESULT __stdcall PolylineCusps (
       [out retval] VARIANT *Cusps
     );
     [propget]
     HRESULT __stdcall BezierCusps (
       [out retval] VARIANT *Cusps
     );
     [propget]
     HRESULT __stdcall SelfIntersections (
       [out retval] VARIANT *Intersections
     );
     [propget]
     HRESULT __stdcall PacketCount (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall PacketSize (
       [out retval] long *plSize
     );
     [propget]
     HRESULT __stdcall PacketDescription (
       [out retval] VARIANT *PacketDescription
     );
     [propget]
     HRESULT __stdcall Deleted (
       [out retval] WINBOOL *Deleted
     );
     [id(3)]
     HRESULT __stdcall GetBoundingBox (
       [in] enum InkBoundingBoxMode BoundingBoxMode,
       [out retval] dispinterface IInkRectangle **Rectangle
     );
     [id(5)]
     HRESULT __stdcall FindIntersections (
       [in] dispinterface IInkStrokes *Strokes,
       [out retval] VARIANT *Intersections
     );
     HRESULT __stdcall GetRectangleIntersections (
       [in] dispinterface IInkRectangle *Rectangle,
       [out retval] VARIANT *Intersections
     );
     HRESULT __stdcall Clip (
       [in] dispinterface IInkRectangle *Rectangle
     );
     HRESULT __stdcall HitTestCircle (
       [in] long X,
       [in] long Y,
       [in] float Radius,
       [out retval] WINBOOL *Intersects
     );
     HRESULT __stdcall NearestPoint (
       [in] long X,
       [in] long Y,
       [in out] float *Distance,
       [out retval] float *Point
     );
     HRESULT __stdcall Split (
       [in] float SplitAt,
       [out retval] dispinterface IInkStrokeDisp **NewStroke
     );
     [id(21)]
     HRESULT __stdcall GetPacketDescriptionPropertyMetrics (
       [in] BSTR PropertyName,
       [out] long *Minimum,
       [out] long *Maximum,
       [out] enum TabletPropertyMetricUnit *Units,
       [out] float *Resolution
     );
     HRESULT __stdcall GetPoints (
       [in] long Index,
       [in] long Count,
       [out retval] VARIANT *Points
     );
     HRESULT __stdcall SetPoints (
       [in] VARIANT Points,
       [in] long Index,
       [in] long Count,
       [out retval] long *NumberOfPointsSet
     );
     HRESULT __stdcall GetPacketData (
       [in] long Index,
       [in] long Count,
       [out retval] VARIANT *PacketData
     );
     HRESULT __stdcall GetPacketValuesByProperty (
       [in] BSTR PropertyName,
       [in] long Index,
       [in] long Count,
       [out retval] VARIANT *PacketValues
     );
     HRESULT __stdcall SetPacketValuesByProperty (
       [in] BSTR bstrPropertyName,
       [in] VARIANT PacketValues,
       [in] long Index,
       [in] long Count,
       [out retval] long *NumberOfPacketsSet
     );
     HRESULT __stdcall GetFlattenedBezierPoints (
       [in] long FittingError,
       [out retval] VARIANT *FlattenedBezierPoints
     );
     [id(29)]
     HRESULT __stdcall Transform (
       [in] dispinterface IInkTransform *Transform,
       [in] WINBOOL ApplyOnPenWidth
     );
     [id(28)]
     HRESULT __stdcall ScaleToRectangle (
       [in] dispinterface IInkRectangle *Rectangle
     );
     [id(30)]
     HRESULT __stdcall Move (
       [in] float HorizontalComponent,
       [in] float VerticalComponent
     );
     HRESULT __stdcall Rotate (
       [in] float Degrees,
       [in] float X,
       [in] float Y
     );
     HRESULT __stdcall Shear (
       [in] float HorizontalMultiplier,
       [in] float VerticalMultiplier
     );
     HRESULT __stdcall ScaleTransform (
       [in] float HorizontalMultiplier,
       [in] float VerticalMultiplier
     );
   };
   [
     uuid(615F1D43-8703-4565-88E2-8201D2ECD7B7),
     helpstring("IInkTransform Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkTransform : IDispatch
   {
     [id(1)]
     HRESULT __stdcall Reset (void);
     HRESULT __stdcall Translate (
       [in] float HorizontalComponent,
       [in] float VerticalComponent
     );
     HRESULT __stdcall Rotate (
       [in] float Degrees,
       [in] float X,
       [in] float Y
     );
     HRESULT __stdcall Reflect (
       [in] WINBOOL Horizontally,
       [in] WINBOOL Vertically
     );
     HRESULT __stdcall Shear (
       [in] float HorizontalComponent,
       [in] float VerticalComponent
     );
     HRESULT __stdcall ScaleTransform (
       [in] float HorizontalMultiplier,
       [in] float VerticalMultiplier
     );
     [id(13)]
     HRESULT __stdcall GetTransform (
       [out] float *eM11,
       [out] float *eM12,
       [out] float *eM21,
       [out] float *eM22,
       [out] float *eDx,
       [out] float *eDy
     );
     HRESULT __stdcall SetTransform (
       [in] float eM11,
       [in] float eM12,
       [in] float eM21,
       [in] float eM22,
       [in] float eDx,
       [in] float eDy
     );
     [id(7), propget, hidden]
     HRESULT __stdcall eM11 (
       [out retval] float *Value
     );
     [id(7), propput, hidden]
     HRESULT __stdcall eM11 (
       [in] float argNo1
     );
     [propget, hidden]
     HRESULT __stdcall eM12 (
       [out retval] float *Value
     );
     [id(8), propput, hidden]
     HRESULT __stdcall eM12 (
       [in] float argNo1
     );
     [propget, hidden]
     HRESULT __stdcall eM21 (
       [out retval] float *Value
     );
     [id(9), propput, hidden]
     HRESULT __stdcall eM21 (
       [in] float argNo1
     );
     [propget, hidden]
     HRESULT __stdcall eM22 (
       [out retval] float *Value
     );
     [id(10), propput, hidden]
     HRESULT __stdcall eM22 (
       [in] float argNo1
     );
     [propget, hidden]
     HRESULT __stdcall eDx (
       [out retval] float *Value
     );
     [id(11), propput, hidden]
     HRESULT __stdcall eDx (
       [in] float argNo1
     );
     [propget, hidden]
     HRESULT __stdcall eDy (
       [out retval] float *Value
     );
     [id(12), propput, hidden]
     HRESULT __stdcall eDy (
       [in] float argNo1
     );
     [id(15), propget, hidden]
     HRESULT __stdcall Data (
       [out retval] XFORM *XFORM
     );
     [id(15), propput, hidden]
     HRESULT __stdcall Data (
       [in] XFORM argNo1
     );
   };
   [
     uuid(3BC129A8-86CD-45AD-BDE8-E0D32D61C16D),
     helpstring("IInkRecognitionResult Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRecognitionResult : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall TopString (
       [out retval] BSTR *TopString
     );
     [propget]
     HRESULT __stdcall TopAlternate (
       [out retval] dispinterface IInkRecognitionAlternate **TopAlternate
     );
     [id(4), propget]
     HRESULT __stdcall TopConfidence (
       [out retval] enum InkRecognitionConfidence *TopConfidence
     );
     [id(3), propget]
     HRESULT __stdcall Strokes (
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [id(5)]
     HRESULT __stdcall AlternatesFromSelection (
       [in] long selectionStart,
       [in] long selectionLength,
       [in] long maximumAlternates,
       [out retval] dispinterface IInkRecognitionAlternates **AlternatesFromSelection
     );
     HRESULT __stdcall ModifyTopAlternate (
       [in] dispinterface IInkRecognitionAlternate *Alternate
     );
     HRESULT __stdcall SetResultOnStrokes (void);
   };
   [
     uuid(B7E660AD-77E4-429B-ADDA-873780D1FC4A),
     helpstring("IInkRecognitionAlternate Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRecognitionAlternate : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall String (
       [out retval] BSTR *RecoString
     );
     [id(7), propget]
     HRESULT __stdcall Confidence (
       [out retval] enum InkRecognitionConfidence *Confidence
     );
     [id(3), propget]
     HRESULT __stdcall Baseline (
       [out retval] VARIANT *Baseline
     );
     [propget]
     HRESULT __stdcall Midline (
       [out retval] VARIANT *Midline
     );
     [propget]
     HRESULT __stdcall Ascender (
       [out retval] VARIANT *Ascender
     );
     [propget]
     HRESULT __stdcall Descender (
       [out retval] VARIANT *Descender
     );
     [id(2), propget]
     HRESULT __stdcall LineNumber (
       [out retval] long *LineNumber
     );
     [id(8), propget]
     HRESULT __stdcall Strokes (
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [id(13), propget]
     HRESULT __stdcall LineAlternates (
       [out retval] dispinterface IInkRecognitionAlternates **LineAlternates
     );
     [propget]
     HRESULT __stdcall ConfidenceAlternates (
       [out retval] dispinterface IInkRecognitionAlternates **ConfidenceAlternates
     );
     [id(9)]
     HRESULT __stdcall GetStrokesFromStrokeRanges (
       [in] dispinterface IInkStrokes *Strokes,
       [out retval] dispinterface IInkStrokes **GetStrokesFromStrokeRanges
     );
     HRESULT __stdcall GetStrokesFromTextRange (
       [in out] long *selectionStart,
       [in out] long *selectionLength,
       [out retval] dispinterface IInkStrokes **GetStrokesFromTextRange
     );
     HRESULT __stdcall GetTextRangeFromStrokes (
       [in] dispinterface IInkStrokes *Strokes,
       [in out] long *selectionStart,
       [in out] long *selectionLength
     );
     [id(15)]
     HRESULT __stdcall AlternatesWithConstantPropertyValues (
       [in] BSTR PropertyType,
       [out retval] dispinterface IInkRecognitionAlternates **AlternatesWithConstantPropertyValues
     );
     [id(12)]
     HRESULT __stdcall GetPropertyValue (
       [in] BSTR PropertyType,
       [out retval] VARIANT *PropertyValue
     );
   };
   [
     uuid(286A167F-9F19-4C61-9D53-4F07BE622B84),
     helpstring("IInkRecognitionAlternates Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRecognitionAlternates : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **_NewEnum
     );
     [id(2), propget]
     HRESULT __stdcall Strokes (
       [out retval] dispinterface IInkStrokes **Strokes
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IInkRecognitionAlternate **InkRecoAlternate
     );
   };
   [
     uuid(D934BE07-7B84-4208-9136-83C20994E905),
     helpstring("IInkRecognizerGuide Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkRecognizerGuide : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall WritingBox (
       [out retval] dispinterface IInkRectangle **Rectangle
     );
     [id(1), propput]
     HRESULT __stdcall WritingBox (
       [in] dispinterface IInkRectangle *argNo1
     );
     [propget]
     HRESULT __stdcall DrawnBox (
       [out retval] dispinterface IInkRectangle **Rectangle
     );
     [id(2), propput]
     HRESULT __stdcall DrawnBox (
       [in] dispinterface IInkRectangle *argNo1
     );
     [propget]
     HRESULT __stdcall Rows (
       [out retval] long *Units
     );
     [id(3), propput]
     HRESULT __stdcall Rows (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Columns (
       [out retval] long *Units
     );
     [id(4), propput]
     HRESULT __stdcall Columns (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Midline (
       [out retval] long *Units
     );
     [id(5), propput]
     HRESULT __stdcall Midline (
       [in] long argNo1
     );
     [propget, hidden]
     HRESULT __stdcall GuideData (
       [out retval] InkRecoGuide *pRecoGuide
     );
     [id(6), propput, hidden]
     HRESULT __stdcall GuideData (
       [in] InkRecoGuide argNo1
     );
   };
   [
     uuid(76BA3491-CB2F-406B-9961-0E0C4CDAAEF2),
     helpstring("IInkWordList Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkWordList : IDispatch
   {
     [id(0)]
     HRESULT __stdcall AddWord (
       [in] BSTR NewWord
     );
     HRESULT __stdcall RemoveWord (
       [in] BSTR RemoveWord
     );
     HRESULT __stdcall Merge (
       [in] dispinterface IInkWordList *MergeWordList
     );
   };
   [
     uuid(E3B0B797-A72E-46DB-A0D7-6C9EBA8E9BBC),
     helpstring("_IInkEditEvents Interface"),
     dispatchable
   ]
   dispinterface _IInkEditEvents
   {
     [id(1)]
     HRESULT __stdcall Change (void);
     HRESULT __stdcall SelChange (void);
     HRESULT __stdcall KeyDown (
       long *pKey,
       short ShiftKey
     );
     HRESULT __stdcall KeyUp (
       long *pKey,
       short ShiftKey
     );
     HRESULT __stdcall MouseUp (
       short Button,
       short ShiftKey,
       long xMouse,
       long yMouse
     );
     HRESULT __stdcall MouseDown (
       short Button,
       short ShiftKey,
       long xMouse,
       long yMouse
     );
     HRESULT __stdcall KeyPress (
       long *Char
     );
     HRESULT __stdcall DblClick (void);
     HRESULT __stdcall Click (void);
     HRESULT __stdcall MouseMove (
       short Button,
       short ShiftKey,
       long xMouse,
       long yMouse
     );
     [id(22)]
     HRESULT __stdcall Stroke (
       [in] dispinterface IInkCursor *Cursor,
       [in] dispinterface IInkStrokeDisp *Stroke,
       [in out] WINBOOL *Cancel
     );
     HRESULT __stdcall Gesture (
       [in] dispinterface IInkCursor *Cursor,
       [in] dispinterface IInkStrokes *Strokes,
       [in] VARIANT Gestures,
       [in out] WINBOOL *Cancel
     );
     HRESULT __stdcall RecognitionResult (
       [in] dispinterface IInkRecognitionResult *RecognitionResult
     );
   };
   [
     uuid(AD30C630-40C5-4350-8405-9C71012FC558),
     helpstring("IInkCursor Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkCursor : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall ID (
       [out retval] long *ID
     );
     [id(4), propget]
     HRESULT __stdcall Inverted (
       [out retval] WINBOOL *Status
     );
     [id(2), propget]
     HRESULT __stdcall DrawingAttributes (
       [out retval] dispinterface IInkDrawingAttributes **Attributes
     );
     [id(2), propputref]
     HRESULT __stdcall DrawingAttributes (
       [in] dispinterface IInkDrawingAttributes *argNo1
     );
     [id(5), propget]
     HRESULT __stdcall Tablet (
       [out retval] dispinterface IInkTablet **Tablet
     );
     [id(3), propget]
     HRESULT __stdcall Buttons (
       [out retval] dispinterface IInkCursorButtons **Buttons
     );
   };
   [
     uuid(2DE25EAA-6EF8-42D5-AEE9-185BC81B912D),
     helpstring("IInkTablet Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkTablet : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall PlugAndPlayId (
       [out retval] BSTR *ID
     );
     [id(4), propget]
     HRESULT __stdcall MaximumInputRectangle (
       [out retval] dispinterface IInkRectangle **Rectangle
     );
     [propget]
     HRESULT __stdcall HardwareCapabilities (
       [out retval] enum TabletHardwareCapabilities *Capabilities
     );
     [id(3)]
     HRESULT __stdcall IsPacketPropertySupported (
       [in] BSTR packetPropertyName,
       [out retval] WINBOOL *Supported
     );
     [id(2)]
     HRESULT __stdcall GetPropertyMetrics (
       [in] BSTR PropertyName,
       [out] long *Minimum,
       [out] long *Maximum,
       [out] enum TabletPropertyMetricUnit *Units,
       [out] float *Resolution
     );
   };
   [
     uuid(3671CC40-B624-4671-9FA0-DB119D952D54),
     helpstring("IInkCursorButtons Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkCursorButtons : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **_NewEnum
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] VARIANT Identifier,
       [out retval] dispinterface IInkCursorButton **Button
     );
   };
   [
     uuid(85EF9417-1D59-49B2-A13C-702C85430894),
     helpstring("IInkCursorButton Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IInkCursorButton : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall ID (
       [out retval] BSTR *ID
     );
     [propget]
     HRESULT __stdcall State (
       [out retval] enum InkCursorButtonState *CurrentState
     );
   };

};

/* Interface declarations.  */
[
  uuid(0000010E-0000-0000-C000-000000000046)
]
interface IDataObject : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteGetData (
    [in] struct tagFORMATETC *pformatetcIn,
    [out] wireSTGMEDIUM *pRemoteMedium
  );
  HRESULT __stdcall RemoteGetDataHere (
    [in] struct tagFORMATETC *pformatetc,
    [in out] wireSTGMEDIUM *pRemoteMedium
  );
  HRESULT __stdcall QueryGetData (
    [in] struct tagFORMATETC *pformatetc
  );
  HRESULT __stdcall GetCanonicalFormatEtc (
    [in] struct tagFORMATETC *pformatectIn,
    [out] struct tagFORMATETC *pformatetcOut
  );
  HRESULT __stdcall RemoteSetData (
    [in] struct tagFORMATETC *pformatetc,
    [in] wireFLAG_STGMEDIUM *pmedium,
    [in] long fRelease
  );
  HRESULT __stdcall EnumFormatEtc (
    [in] UINT dwDirection,
    [out] interface IEnumFORMATETC **ppenumFormatEtc
  );
  HRESULT __stdcall DAdvise (
    [in] struct tagFORMATETC *pformatetc,
    [in] UINT advf,
    [in] interface IAdviseSink *pAdvSink,
    [out] UINT *pdwConnection
  );
  HRESULT __stdcall DUnadvise (
    [in] UINT dwConnection
  );
  HRESULT __stdcall EnumDAdvise (
    [out] interface IEnumSTATDATA **ppenumAdvise
  );
};
[
  uuid(00000103-0000-0000-C000-000000000046)
]
interface IEnumFORMATETC : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteNext (
    [in] UINT celt,
    [out] struct tagFORMATETC *rgelt,
    [out] UINT *pceltFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT celt
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumFORMATETC **ppenum
  );
};
[
  uuid(0000010F-0000-0000-C000-000000000046)
]
interface IAdviseSink : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteOnDataChange (
    [in] struct tagFORMATETC *pformatetc,
    [in] wireASYNC_STGMEDIUM *pStgmed
  );
  HRESULT __stdcall RemoteOnViewChange (
    [in] UINT dwAspect,
    [in] long lindex
  );
  HRESULT __stdcall RemoteOnRename (
    [in] interface IMoniker *pmk
  );
  HRESULT __stdcall RemoteOnSave (void);
  HRESULT __stdcall RemoteOnClose (void);
};
[
  uuid(0000000F-0000-0000-C000-000000000046)
]
interface IMoniker : IPersistStream
{
  [id(1610809344)]
  HRESULT __stdcall RemoteBindToObject (
    [in] interface IBindCtx *pbc,
    [in] interface IMoniker *pmkToLeft,
    [in] struct GUID *riidResult,
    [out] IUnknown **ppvResult
  );
  HRESULT __stdcall RemoteBindToStorage (
    [in] interface IBindCtx *pbc,
    [in] interface IMoniker *pmkToLeft,
    [in] struct GUID *riid,
    [out] IUnknown **ppvObj
  );
  HRESULT __stdcall Reduce (
    [in] interface IBindCtx *pbc,
    [in] UINT dwReduceHowFar,
    [in out] interface IMoniker **ppmkToLeft,
    [out] interface IMoniker **ppmkReduced
  );
  HRESULT __stdcall ComposeWith (
    [in] interface IMoniker *pmkRight,
    [in] long fOnlyIfNotGeneric,
    [out] interface IMoniker **ppmkComposite
  );
  HRESULT __stdcall Enum (
    [in] long fForward,
    [out] interface IEnumMoniker **ppenumMoniker
  );
  HRESULT __stdcall IsEqual (
    [in] interface IMoniker *pmkOtherMoniker
  );
  HRESULT __stdcall Hash (
    [out] UINT *pdwHash
  );
  HRESULT __stdcall IsRunning (
    [in] interface IBindCtx *pbc,
    [in] interface IMoniker *pmkToLeft,
    [in] interface IMoniker *pmkNewlyRunning
  );
  HRESULT __stdcall GetTimeOfLastChange (
    [in] interface IBindCtx *pbc,
    [in] interface IMoniker *pmkToLeft,
    [out] struct _FILETIME *pfiletime
  );
  HRESULT __stdcall Inverse (
    [out] interface IMoniker **ppmk
  );
  HRESULT __stdcall CommonPrefixWith (
    [in] interface IMoniker *pmkOther,
    [out] interface IMoniker **ppmkPrefix
  );
  HRESULT __stdcall RelativePathTo (
    [in] interface IMoniker *pmkOther,
    [out] interface IMoniker **ppmkRelPath
  );
  HRESULT __stdcall GetDisplayName (
    [in] interface IBindCtx *pbc,
    [in] interface IMoniker *pmkToLeft,
    [out] LPWSTR ppszDisplayName
  );
  HRESULT __stdcall ParseDisplayName (
    [in] interface IBindCtx *pbc,
    [in] interface IMoniker *pmkToLeft,
    [in] LPWSTR pszDisplayName,
    [out] UINT *pchEaten,
    [out] interface IMoniker **ppmkOut
  );
  HRESULT __stdcall IsSystemMoniker (
    [out] UINT *pdwMksys
  );
};
[
  uuid(00000109-0000-0000-C000-000000000046)
]
interface IPersistStream : IPersist
{
  [id(1610743808)]
  HRESULT __stdcall IsDirty (void);
  HRESULT __stdcall Load (
    [in] interface IStream *pstm
  );
  HRESULT __stdcall Save (
    [in] interface IStream *pstm,
    [in] long fClearDirty
  );
  HRESULT __stdcall GetSizeMax (
    [out] struct _ULARGE_INTEGER *pcbSize
  );
};
[
  uuid(0000010C-0000-0000-C000-000000000046)
]
interface IPersist : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetClassID (
    [out] struct GUID *pClassID
  );
};
[
  uuid(0000000C-0000-0000-C000-000000000046)
]
interface IStream : ISequentialStream
{
  [id(1610743808)]
  HRESULT __stdcall RemoteSeek (
    [in] struct _LARGE_INTEGER dlibMove,
    [in] UINT dwOrigin,
    [out] struct _ULARGE_INTEGER *plibNewPosition
  );
  HRESULT __stdcall SetSize (
    [in] struct _ULARGE_INTEGER libNewSize
  );
  HRESULT __stdcall RemoteCopyTo (
    [in] interface IStream *pstm,
    [in] struct _ULARGE_INTEGER cb,
    [out] struct _ULARGE_INTEGER *pcbRead,
    [out] struct _ULARGE_INTEGER *pcbWritten
  );
  HRESULT __stdcall Commit (
    [in] UINT grfCommitFlags
  );
  HRESULT __stdcall Revert (void);
  HRESULT __stdcall LockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall UnlockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall Stat (
    [out] struct tagSTATSTG *pstatstg,
    [in] UINT grfStatFlag
  );
  HRESULT __stdcall Clone (
    [out] interface IStream **ppstm
  );
};
[
  uuid(0C733A30-2A1C-11CE-ADE5-00AA0044773D)
]
interface ISequentialStream : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteRead (
    [out] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbRead
  );
  HRESULT __stdcall RemoteWrite (
    [in] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbWritten
  );
};
[
  uuid(0000000E-0000-0000-C000-000000000046)
]
interface IBindCtx : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RegisterObjectBound (
    [in] IUnknown * punk
  );
  HRESULT __stdcall RevokeObjectBound (
    [in] IUnknown * punk
  );
  HRESULT __stdcall ReleaseBoundObjects (void);
  HRESULT __stdcall RemoteSetBindOptions (
    [in] struct tagBIND_OPTS2 *pbindopts
  );
  HRESULT __stdcall RemoteGetBindOptions (
    [in out] struct tagBIND_OPTS2 *pbindopts
  );
  HRESULT __stdcall GetRunningObjectTable (
    [out] interface IRunningObjectTable **pprot
  );
  HRESULT __stdcall RegisterObjectParam (
    [in] LPWSTR pszKey,
    [in] IUnknown * punk
  );
  HRESULT __stdcall GetObjectParam (
    [in] LPWSTR pszKey,
    [out] IUnknown **ppunk
  );
  HRESULT __stdcall EnumObjectParam (
    [out] interface IEnumString **ppenum
  );
  HRESULT __stdcall RevokeObjectParam (
    [in] LPWSTR pszKey
  );
};
[
  uuid(00000010-0000-0000-C000-000000000046)
]
interface IRunningObjectTable : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Register (
    [in] UINT grfFlags,
    [in] IUnknown * punkObject,
    [in] interface IMoniker *pmkObjectName,
    [out] UINT *pdwRegister
  );
  HRESULT __stdcall Revoke (
    [in] UINT dwRegister
  );
  HRESULT __stdcall IsRunning (
    [in] interface IMoniker *pmkObjectName
  );
  HRESULT __stdcall GetObject (
    [in] interface IMoniker *pmkObjectName,
    [out] IUnknown **ppunkObject
  );
  HRESULT __stdcall NoteChangeTime (
    [in] UINT dwRegister,
    [in] struct _FILETIME *pfiletime
  );
  HRESULT __stdcall GetTimeOfLastChange (
    [in] interface IMoniker *pmkObjectName,
    [out] struct _FILETIME *pfiletime
  );
  HRESULT __stdcall EnumRunning (
    [out] interface IEnumMoniker **ppenumMoniker
  );
};
[
  uuid(00000102-0000-0000-C000-000000000046)
]
interface IEnumMoniker : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteNext (
    [in] UINT celt,
    [out] interface IMoniker **rgelt,
    [out] UINT *pceltFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT celt
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumMoniker **ppenum
  );
};
[
  uuid(00000101-0000-0000-C000-000000000046)
]
interface IEnumString : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteNext (
    [in] UINT celt,
    [out] LPWSTR rgelt,
    [out] UINT *pceltFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT celt
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumString **ppenum
  );
};
[
  uuid(00000105-0000-0000-C000-000000000046)
]
interface IEnumSTATDATA : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteNext (
    [in] UINT celt,
    [out] struct tagSTATDATA *rgelt,
    [out] UINT *pceltFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT celt
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumSTATDATA **ppenum
  );
};

