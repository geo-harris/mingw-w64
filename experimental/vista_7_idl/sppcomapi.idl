/* Automated generated idl file <sppcomapilib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IElevationConfigurable;

/* Structure forward declarations.  */
struct tagLICENSING_STATUS;
struct _SYSTEMTIME;

/* Union record forward declarations.  */
dispinterface ILicensingStatusData;
dispinterface ILicensingPackage;
dispinterface ILicensingPackageProperties;
dispinterface IElevationConfig;
dispinterface ISPPLUA;
dispinterface IModemActivationPhoneList;
dispinterface IModemActivationPhoneData;
dispinterface IOnlineActivation;
dispinterface ITokenActivation;
dispinterface IModemActivation;
dispinterface IOfflineActivation;
dispinterface IOfflineActivationPhoneList;
dispinterface IOfflineActivationPhoneData;
dispinterface ILicensingStateTools;
dispinterface INetworkListManager;
dispinterface IEnumNetworks;
dispinterface INetwork;
dispinterface IEnumNetworkConnections;
dispinterface INetworkConnection;

/* Union record forward declarations.  */
coclass LicensingStatusData;
coclass LicensingPackage;
coclass ModemActivationPhoneList;
coclass ModemActivationPhoneData;
coclass OnlineActivation;
coclass TokenActivation;
coclass ModemActivation;
coclass OfflineActivation;
coclass ElevationConfig;
coclass LicensingStateTools;
coclass SPPLUAObject;

/* Enumeration declarations.  */
enum tagLICENSINGSTATUS
{
  LICENSING_STATUS_UNLICENSED = (int) 201326592,
  LICENSING_STATUS_LICENSED = (int) 201326593,
  LICENSING_STATUS_IN_GRACE_PERIOD = (int) 201326594,
  LICENSING_STATUS_NOTIFICATION = (int) 201326595
};
enum tagE_ACTIVATION_RESULT_CATEGORY
{
  E_AR_GENERIC_ERROR = (int) 201326592,
  E_AR_ACTIVATED = (int) 201326593,
  E_AR_INVALID_PK = (int) 201326594,
  E_AR_USED_PRODUCT_KEY = (int) 201326595,
  E_AR_NO_INTERNET = (int) 201326596,
  E_AR_UNEXPECTED_ERROR = (int) 201326597,
  E_AR_SAFE_MODE_ERROR = (int) 201326598,
  E_AR_SYSTEM_STATE_ERROR = (int) 201326599,
  E_AR_OEM_COA_ERROR = (int) 201326600,
  E_AR_EXPIRED_LICENSES = (int) 201326601,
  E_AR_NO_PKEY_INSTALLED = (int) 201326602,
  E_AR_TAMPER_DETECTED = (int) 201326603,
  E_AR_REINSTALL_REQUIRED = (int) 201326604,
  E_AR_REBOOT_REQUIRED = (int) 201326605,
  E_AR_NON_GENUINE = (int) 201326606,
  E_AR_TOKENACTIVATION_ERROR = (int) 201326607,
  E_AR_BLOCKED_IPLOCATION_PK = (int) 201326608,
  E_AR_DNS_ERROR = (int) 201326609,
  E_VR_PRODUCTKEY_ERROR = (int) 201326610,
  E_VR_PRODUCTKEY_RAW_ERROR = (int) 201326611,
  E_VR_PRODUCTKEY_UI_BLOCK = (int) 201326612,
  E_AR_NOT_FOUND = (int) 201326847
};
enum tagE_LICENSING_CHANNEL
{
  LB_Invalid = (int) 201326592,
  LB_HardwareId = (int) 201326593,
  LB_Environment = (int) 201326594,
  LB_BiosCOA = (int) 201326596,
  LB_BiosSLP = (int) 201326600,
  LB_BiosHardwareID = (int) 201326608,
  LB_TokenActivation = (int) 201326624,
  LB_BindingHardwareAny = (int) 201326609,
  LB_BindingBiosAny = (int) 201326604,
  LB_ChannelBiosAny = (int) 201326620,
  LB_ChannelAny = (int) -1
};
enum tagE_TIME_INTERVAL_TYPE
{
  E_TIT_DAYS = (int) 201326592,
  E_TIT_HOURS = (int) 201326593,
  E_TIT_MINUTES = (int) 201326594,
  E_TIT_SECONDS = (int) 201326595,
  E_TIT_MILLISECONDS = (int) 201326596
};
enum tagE_GRACE_PERIOD_TYPE
{
  E_GPT_OUT_OF_BOX = (int) 201326592,
  E_GPT_HARDWARE_OOT = (int) 201326593,
  E_GPT_TIMEBASED_VALIDITY = (int) 201326594,
  E_GPT_UNDEFINED = (int) 201326847
};
enum tagE_PACKAGE_STATE
{
  E_PACKAGE_STATE_OTHER = (int) 201326592,
  E_PACKAGE_STATE_UPGRADE = (int) 201326593,
  E_PACKAGE_STATE_SAME_AS_LICENSE_NONACTIVATED = (int) 201326594,
  E_PACKAGE_STATE_SAME_AS_LICENSE_ACTIVATED = (int) 201326595,
  E_PACKAGE_STATE_ARCH_NOT_SUPPORTED = (int) 201326596
};
enum _ElevationConfigOptions
{
  ecoAutomatic = (int) 201326592,
  ecoElevateNow = (int) 201326593,
  ecoNoElevation = (int) 201326594
};
enum _SLLUA_ROOTKEY
{
  SLLUA_HKEY_CLASSES_ROOT = (int) 201326593,
  SLLUA_HKEY_CURRENT_CONFIG = (int) 201326594,
  SLLUA_HKEY_LOCAL_MACHINE = (int) 201326595,
  SLLUA_HKEY_USERS = (int) 201326596
};
enum tagSYSTEM_STATE_FLAGS
{
  SYSTEM_STATE_REBOOT_POLICY_FOUND = (int) 201326593,
  SYSTEM_STATE_TAMPERED = (int) 201326594,
  SYSTEM_STATE_TAMPERED_TRUSTED_STORE = (int) 201326600,
  SYSTEM_STATE_TAMPERED_KM_CACHE = (int) 201326624
};
enum NLM_ENUM_NETWORK
{
  NLM_ENUM_NETWORK_CONNECTED = (int) 201326593,
  NLM_ENUM_NETWORK_DISCONNECTED = (int) 201326594,
  NLM_ENUM_NETWORK_ALL = (int) 201326595
};
enum NLM_DOMAIN_TYPE
{
  NLM_DOMAIN_TYPE_NON_DOMAIN_NETWORK = (int) 201326592,
  NLM_DOMAIN_TYPE_DOMAIN_NETWORK = (int) 201326593,
  NLM_DOMAIN_TYPE_DOMAIN_AUTHENTICATED = (int) 201326594
};
enum NLM_CONNECTIVITY
{
  NLM_CONNECTIVITY_DISCONNECTED = (int) 201326592,
  NLM_CONNECTIVITY_IPV4_NOTRAFFIC = (int) 201326593,
  NLM_CONNECTIVITY_IPV6_NOTRAFFIC = (int) 201326594,
  NLM_CONNECTIVITY_IPV4_SUBNET = (int) 201326608,
  NLM_CONNECTIVITY_IPV4_LOCALNETWORK = (int) 201326624,
  NLM_CONNECTIVITY_IPV4_INTERNET = (int) 201326656,
  NLM_CONNECTIVITY_IPV6_SUBNET = (int) 201326848,
  NLM_CONNECTIVITY_IPV6_LOCALNETWORK = (int) 201327104,
  NLM_CONNECTIVITY_IPV6_INTERNET = (int) 201327616
};
enum NLM_NETWORK_CATEGORY
{
  NLM_NETWORK_CATEGORY_PUBLIC = (int) 201326592,
  NLM_NETWORK_CATEGORY_PRIVATE = (int) 201326593,
  NLM_NETWORK_CATEGORY_DOMAIN_AUTHENTICATED = (int) 201326594
};
enum tagNOTIFICATIONPOLICYSTATUS
{
  NOTIFICATIONS_DISABLED = (int) 201326592,
  NOTIFICATIONS_ENABLED = (int) 201326593
};

/* Structure/union declarations.  */
[
  hidden
]
struct tagLICENSING_STATUS
{
  struct GUID SkuId;
  enum tagLICENSINGSTATUS eStatus;
  UINT dwGraceTime;
  UINT dwTotalGraceDays;
  HRESULT hrReason;
  ULONGLONG qwValidityExpiration;
  enum tagE_LICENSING_CHANNEL eChannel;
  enum tagE_GRACE_PERIOD_TYPE eGraceType;
  struct _SYSTEMTIME stEvalTimebombTime;
};
struct _SYSTEMTIME
{
  USHORT wYear;
  USHORT wMonth;
  USHORT wDayOfWeek;
  USHORT wDay;
  USHORT wHour;
  USHORT wMinute;
  USHORT wSecond;
  USHORT wMilliseconds;
};

/* Type definitions.  */
[
  hidden
]
typedef struct tagLICENSING_STATUS LICENSING_STATUS;

[
  uuid(B0C2A63F-AFF8-40E3-B42D-8A542DC909EC),
  version(1.0),
  helpstring("SppComApiLib 1.0 Type Library")
]
library sppcomapilib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(CD8534F7-B1CE-4A6B-B7CD-AA4AE578A20A),
     helpstring("LicensingStatusData Class")
   ]
   coclass LicensingStatusData
   {
     dispinterface ILicensingStatusData;
   };
   [
     uuid(A49211A1-022F-43D7-BC55-D787C66ACF8E),
     helpstring("LicensingPackage Class"),
     cancreate
   ]
   coclass LicensingPackage
   {
     dispinterface ILicensingPackage;
     interface IElevationConfigurable;
   };
   [
     uuid(E3A4427D-1B0C-49FB-818D-AEBE0D1DF8DF),
     helpstring("ModemActivationPhoneList Class")
   ]
   coclass ModemActivationPhoneList
   {
     dispinterface IModemActivationPhoneList;
   };
   [
     uuid(52E20077-FC7A-41E1-8C13-EC30F451C520),
     helpstring("ModemActivationPhoneData Class")
   ]
   coclass ModemActivationPhoneData
   {
     dispinterface IModemActivationPhoneData;
   };
   [
     uuid(A4DDCA2B-E73C-40C5-83B1-9F40269D0B0D),
     helpstring("OnlineActivation Class"),
     cancreate
   ]
   coclass OnlineActivation
   {
     dispinterface IOnlineActivation;
     interface IElevationConfigurable;
   };
   [
     uuid(0A14D3FF-EC53-450F-AA30-FFBC55BE26A2),
     helpstring("TokenActivation Class"),
     cancreate
   ]
   coclass TokenActivation
   {
     dispinterface ITokenActivation;
     interface IElevationConfigurable;
   };
   [
     uuid(00BC7EAE-28D5-4310-BE9F-11526A7FA37F),
     helpstring("IModemActivation Class"),
     cancreate
   ]
   coclass ModemActivation
   {
     dispinterface IModemActivation;
     interface IElevationConfigurable;
   };
   [
     uuid(8A99553A-7971-4445-93B5-AAA43D1433C5),
     helpstring("OfflineActivation Class"),
     cancreate
   ]
   coclass OfflineActivation
   {
     dispinterface IOfflineActivation;
     interface IElevationConfigurable;
   };
   [
     uuid(91ECFDB4-2606-43E4-8F86-E25B0CB01F1E),
     helpstring("ElevationConfig Class"),
     cancreate
   ]
   coclass ElevationConfig
   {
     dispinterface IElevationConfig;
   };
   [
     uuid(AA04CA0B-7597-4F3E-99A8-36712D13D676),
     helpstring("LicensingStateTools Class"),
     cancreate
   ]
   coclass LicensingStateTools
   {
     dispinterface ILicensingStateTools;
     interface IElevationConfigurable;
   };
   [
     uuid(179CC917-3A82-40E7-9F8C-2FC8A3D2212B),
     helpstring("SPPLUAObject Class"),
     cancreate
   ]
   coclass SPPLUAObject
   {
     dispinterface ISPPLUA;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(32CE8036-A42A-4005-8062-57524F767341),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ILicensingStatusData : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall SkuId (
       [out retval] BSTR *bstrSkuId
     );
     [id(1610743809), propget]
     HRESULT __stdcall Status (
       [out retval] enum tagLICENSINGSTATUS *pStatus
     );
     [propget]
     HRESULT __stdcall StatusReasonCategory (
       [out retval] enum tagE_ACTIVATION_RESULT_CATEGORY *pCategory
     );
     [propget]
     HRESULT __stdcall Channel (
       [out retval] enum tagE_LICENSING_CHANNEL *pChannel
     );
     [propget]
     HRESULT __stdcall StatusReasonCode (
       [out retval] long *lHrCode
     );
     [propget]
     HRESULT __stdcall InitialGrace (
       [in] enum tagE_TIME_INTERVAL_TYPE interval,
       [out retval] ULONGLONG *pTimeSpan
     );
     [propget]
     HRESULT __stdcall RemainingGrace (
       [in] enum tagE_TIME_INTERVAL_TYPE interval,
       [out retval] ULONGLONG *pTimeSpan
     );
     [propget]
     HRESULT __stdcall GracePeriodType (
       [out retval] enum tagE_GRACE_PERIOD_TYPE *pType
     );
     [propget]
     HRESULT __stdcall ValidityExpiration (
       [out retval] DATE *pDate
     );
     [propget]
     HRESULT __stdcall KernelExpiration (
       [out retval] DATE *pDate
     );
     [propget, hidden]
     HRESULT __stdcall _InnerStatus (
       [out retval] LICENSING_STATUS *Status
     );
   };
   [
     uuid(49372E7F-701F-4520-801A-06ACA0E16385),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ILicensingPackage : IDispatch
   {
     [id(1610743808)]
     HRESULT __stdcall Load (
       [in] BSTR bstrPackage
     );
     HRESULT __stdcall Save (
       [in] BSTR pwszFileName
     );
     HRESULT __stdcall Install (void);
     [propget]
     HRESULT __stdcall Properties (
       [out] dispinterface ILicensingPackageProperties **pProps
     );
     [propget]
     HRESULT __stdcall Data (
       [out retval] UCHAR psaPackageData[]*
     );
   };
   [
     uuid(49348954-E3A2-4A41-8C9D-D59786C20D12),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface ILicensingPackageProperties : IDispatch
   {
     [id(1610743808), propget]
     HRESULT __stdcall IsSupportedArch (
       [out retval] WINBOOL *pbIsSupportedArch
     );
     [propget]
     HRESULT __stdcall UpgradeState (
       [out retval] enum tagE_PACKAGE_STATE *pePackageState
     );
     [propget]
     HRESULT __stdcall IsWindowsApplicationId (
       [out retval] WINBOOL *pbIsWindowsApp
     );
     [propget]
     HRESULT __stdcall IsSupportedInstallation (
       [out retval] WINBOOL *pbIsSupportedUpgradePath
     );
     [propget]
     HRESULT __stdcall IsProductInstalled (
       [out retval] WINBOOL *pbInstalled
     );
     [propget]
     HRESULT __stdcall AdditionalInstallParameters (
       [out retval] BSTR *pbstrParams
     );
     [propget]
     HRESULT __stdcall TokenCount (
       [out retval] unsigned int *plCount
     );
     [propget]
     HRESULT __stdcall IsSameEdition (
       [out retval] WINBOOL *pbIsSameEdition
     );
     [propget]
     HRESULT __stdcall DownloadUrl (
       [out retval] BSTR *pbstrDownloadUrl
     );
     [propget]
     HRESULT __stdcall ProductName (
       [out retval] BSTR *pbstrProductName
     );
     [propget]
     HRESULT __stdcall ProductEULA (
       [out retval] BSTR *pbstrEula
     );
     [propget]
     HRESULT __stdcall BitmapRight (
       [out retval] ULONGLONG *pHandle
     );
     [propget]
     HRESULT __stdcall BitmapLeft (
       [out retval] ULONGLONG *pHandle
     );
     [propget]
     HRESULT __stdcall MerchantSupportEmail (
       [out retval] BSTR *pbstr
     );
     [propget]
     HRESULT __stdcall MerchantSupportUrl (
       [out retval] BSTR *pbstr
     );
     [propget]
     HRESULT __stdcall MerchantSupportPhone (
       [out retval] BSTR *pbstr
     );
     [propget]
     HRESULT __stdcall TargetWindowsType (
       [out retval] long *pTypeId
     );
     [propget]
     HRESULT __stdcall InstalledWindowsType (
       [out retval] long *pTypeId
     );
   };
   [
     uuid(0D599E27-34C7-41A5-973E-B820D42783EC),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IElevationConfig : IDispatch
   {
     [id(1610743808), propput]
     HRESULT __stdcall UIHandle (
       [in] ULONGLONG argNo1
     );
     [propput]
     HRESULT __stdcall Mode (
       [in] enum _ElevationConfigOptions argNo1
     );
     [id(1610743809), propget]
     HRESULT __stdcall Mode (
       [out retval] enum _ElevationConfigOptions *peMode
     );
     [id(1610743811), propget]
     HRESULT __stdcall IsElevated (
       [out retval] WINBOOL *pbIsElevated
     );
     HRESULT __stdcall ConfigureObject (
       [in] IUnknown * pObject
     );
     [propget]
     HRESULT __stdcall Elevated (
       [out retval] dispinterface ISPPLUA **ppObject
     );
   };
   [
     uuid(12FBFECB-7CCE-473E-8737-78EE6C9CCAEB),
     helpstring("ISPPLUA Interface"),
     dual,
     nonextensible,
     oleautomation
   ]
   dispinterface ISPPLUA : IUnknown
   {
     [id(1)]
     HRESULT __stdcall SLLUAActivateProduct (
       [in] struct GUID *pProductSkuId,
       [in] UCHAR saAppSpecificData[],
       [in] VARIANT vReserved
     );
     HRESULT __stdcall SLLUADepositOfflineConfirmationId (
       [in] struct GUID *pProductSkuId,
       [in] BSTR pwszInstallationId,
       [in] BSTR pwszConfirmationId
     );
     HRESULT __stdcall SLLUAFireEvent (
       [in] BSTR pwszEventId,
       [in] struct GUID *pProductSkuId
     );
     HRESULT __stdcall SLLUAInstallLicense (
       [in] UCHAR saLicenseBlob[],
       [out] struct GUID *pPkeyId
     );
     HRESULT __stdcall SLLUAUninstallLicense (
       [in] struct GUID *pPkeyId
     );
     HRESULT __stdcall SLLUAInstallPackage (
       [in] long bSynchronous,
       [in] UINT dwFlags,
       [in] UCHAR saPackageData[]
     );
     HRESULT __stdcall SLLUACancelPackageInstall (void);
     HRESULT __stdcall SLLUAQueryLicensePackageProgress (
       [out] UINT *pdwCurrentToken,
       [out] UINT *pdwTotalTokens,
       [out] HRESULT *phrResult
     );
     HRESULT __stdcall SLLUAUninstallPackage (
       [in] UCHAR saPackageData[]
     );
     HRESULT __stdcall SLLUAInstallProofOfPurchase (
       [in] BSTR pwszPKeyAlgorithm,
       [in] BSTR pwszPKeyString,
       [in] UCHAR saKeySpecificData[],
       [out] struct GUID *pPkeyId
     );
     HRESULT __stdcall SLLUAUninstallProofOfPurchase (
       [in] struct GUID *pPkeyId
     );
     HRESULT __stdcall SLLUARegKeySetValue (
       [in] enum _SLLUA_ROOTKEY eRootKey,
       [in] BSTR bstrSubKey,
       [in] BSTR bstrValueName,
       [in] UCHAR psaKeyData[],
       [in] UINT dwRegType
     );
     HRESULT __stdcall SLLUARegKeyDelete (
       [in] enum _SLLUA_ROOTKEY eRootKey,
       [in] BSTR bstrSubKey,
       [in] unsigned int samDesired
     );
   };
   [
     uuid(4D8E14CD-5EC4-4037-9778-5C402217DB04),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IModemActivationPhoneList : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _NewEnum (
       [out retval] interface IEnumVARIANT **NewEnum
     );
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] VARIANT varIndex,
       [out retval] dispinterface IModemActivationPhoneData **ppEntry
     );
   };
   [
     uuid(B7CC2488-37EB-4711-BDA5-F6DE7C492738),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IModemActivationPhoneData : IDispatch
   {
     [id(1610743808), propget]
     HRESULT __stdcall Index (
       [out retval] long *lIndex
     );
     [propget]
     HRESULT __stdcall CountryName (
       [out retval] BSTR *pName
     );
   };
   [
     uuid(4F3D1C70-B894-4E28-A48F-866DAF96793D),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IOnlineActivation : IDispatch
   {
     [id(1610743808), propget]
     HRESULT __stdcall CheckServiceReachable (
       [out retval] WINBOOL *pbReachable
     );
     HRESULT __stdcall Activate (
       [out] enum tagE_ACTIVATION_RESULT_CATEGORY *pResultCategory,
       [out] long *pResultCode
     );
   };
   [
     uuid(978D0509-97AE-4EE2-9E90-6844B213AB85),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ITokenActivation : IDispatch
   {
     [id(1610743808)]
     HRESULT __stdcall SilentTokenActivate (void);
     HRESULT __stdcall TokenActivate (
       [in] ULONGLONG hwndWindow
     );
   };
   [
     uuid(0580952F-EA21-44D5-934E-C031A599DCB3),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IModemActivation : IDispatch
   {
     [id(1610743808)]
     HRESULT __stdcall InitializePhoneIndex (void);
     [propget]
     HRESULT __stdcall CurrentPhoneIndex (
       [out retval] long *plIndex
     );
     [id(1610743809), propput]
     HRESULT __stdcall CurrentPhoneIndex (
       [in] long argNo1
     );
     [id(1610743811), propget]
     HRESULT __stdcall CurrentPhoneValue (
       [out retval] BSTR *ppBSTR
     );
     [propget]
     HRESULT __stdcall PhoneList (
       [out retval] dispinterface IModemActivationPhoneList **ppPhones
     );
     HRESULT __stdcall CreateConnection (
       [in] BSTR bstrIspFile,
       [in] ULONGLONG hwndConnection
     );
     HRESULT __stdcall DeleteConnection (void);
   };
   [
     uuid(BFD3A33B-E88B-43E6-8BC3-D33217D9649D),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IOfflineActivation : IDispatch
   {
     [id(1610743808), propget]
     HRESULT __stdcall InstallationID (
       [out retval] BSTR *pbstrInstId
     );
     HRESULT __stdcall Activate (
       [in] BSTR bstrConfId
     );
     [propget]
     HRESULT __stdcall PhoneList (
       [out retval] dispinterface IOfflineActivationPhoneList **ppPhones
     );
     [propget]
     HRESULT __stdcall SelectedPhoneIndex (
       [out retval] long *pIndex
     );
     [id(1610743811), propput]
     HRESULT __stdcall SelectedPhoneIndex (
       [in] long argNo1
     );
     [id(1610743813), propget]
     HRESULT __stdcall VerifyCheckDigits (
       [in] BSTR bstrDigits,
       [out retval] WINBOOL *bValid
     );
   };
   [
     uuid(D2DC9CB6-6181-4D16-B69F-C8022CC417C0),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IOfflineActivationPhoneList : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _NewEnum (
       [out retval] interface IEnumVARIANT **NewEnum
     );
     [id(0), propget]
     HRESULT __stdcall Item (
       [in] VARIANT varIndex,
       [out retval] dispinterface IOfflineActivationPhoneData **ppEntry
     );
   };
   [
     uuid(CE2D4E57-A61B-477D-ADCB-5AE81C0F8750),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IOfflineActivationPhoneData : IDispatch
   {
     [id(1610743808), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall IsoCode (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall TollNumberDescription (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall TollFreeNumberDescription (
       [out retval] BSTR *Name
     );
     [propget]
     HRESULT __stdcall SMSNumberDescription (
       [out retval] BSTR *Name
     );
   };
   [
     uuid(49372E7F-701F-4520-801A-06ACA0E16384),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ILicensingStateTools : IDispatch
   {
     [id(1610743808)]
     HRESULT __stdcall FireStateChanged (void);
     HRESULT __stdcall InstallProofOfPurchase (
       [in] BSTR bstrPKeyString
     );
     [propget]
     HRESULT __stdcall LicensingState (
       [out retval] dispinterface ILicensingStatusData **pWinStatus
     );
     [propget]
     HRESULT __stdcall SystemStateFlags (
       [out retval] enum tagSYSTEM_STATE_FLAGS *pSystemState
     );
     [propget]
     HRESULT __stdcall LicensingInformation (
       [in] BSTR bstrName,
       [out] long *pValue
     );
     [propget]
     HRESULT __stdcall ReferralInformation (
       [in] BSTR bstrPropName,
       [out retval] BSTR *pbstrValue
     );
     [propget]
     HRESULT __stdcall IsConnectedToInternet (
       [in] dispinterface INetworkListManager *pNetworkListManager,
       [out retval] WINBOOL *pbConnected
     );
     [propget]
     HRESULT __stdcall MapResultCategory (
       [in] long hrActivationResult,
       [out retval] enum tagE_ACTIVATION_RESULT_CATEGORY *peResultCategory
     );
     [propget]
     HRESULT __stdcall IsGenuineComponent (
       [in] struct GUID *pIdComponent,
       [out retval] WINBOOL *pbGenuine
     );
     [propget]
     HRESULT __stdcall ProductKeyTypeFrom5x5 (
       [in] BSTR bstrPK,
       [out retval] BSTR *pbstrProductKeyType
     );
     [propget]
     HRESULT __stdcall ActiveLicenseChannel (
       [out retval] enum tagE_LICENSING_CHANNEL *pChannel
     );
     [propget]
     HRESULT __stdcall ProductKeyType (
       [out retval] BSTR *pbstrProductKeyType
     );
     [propget]
     HRESULT __stdcall IsTimebasedKeyInstalled (
       [out retval] long *pbTimebased
     );
     [propget]
     HRESULT __stdcall ServiceInformation (
       [in] BSTR bstrName,
       [out retval] long *pValue
     );
     [propget]
     HRESULT __stdcall ProductSkuInformation (
       [in] struct GUID *pSkuId,
       [in] BSTR bstrName,
       [out retval] long *pValue
     );
     [propget]
     HRESULT __stdcall IsWinlogonNotificationProcess (
       [out retval] WINBOOL *pbNotify
     );
     [propget]
     HRESULT __stdcall NotificationPolicy (
       [out retval] enum tagNOTIFICATIONPOLICYSTATUS *pPolicyStatus
     );
     [propget]
     HRESULT __stdcall WGAUrl (
       [in] long lHrError,
       [in] enum tagLICENSINGSTATUS eStatus,
       [out retval] BSTR *pbstrUrl
     );
     [propget]
     HRESULT __stdcall LicensingSystemDate (
       [out retval] DATE *pDate
     );
     [propget]
     HRESULT __stdcall DefaultKeyFromRegistry (
       [out retval] BSTR *pbstrDefaultKey
     );
     HRESULT __stdcall ConsumeWindowsRight (
       [in] UINT dwFlags
     );
   };
   [
     uuid(DCB00000-570F-4A9B-8D69-199FDBA5723B),
     helpstring("Network List Manager"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetworkListManager : IDispatch
   {
     [id(1)]
     HRESULT __stdcall GetNetworks (
       [in] enum NLM_ENUM_NETWORK Flags,
       [out retval] dispinterface IEnumNetworks **ppEnumNetwork
     );
     HRESULT __stdcall GetNetwork (
       [in] struct GUID gdNetworkId,
       [out retval] dispinterface INetwork **ppNetwork
     );
     HRESULT __stdcall GetNetworkConnections (
       [out retval] dispinterface IEnumNetworkConnections **ppEnum
     );
     HRESULT __stdcall GetNetworkConnection (
       [in] struct GUID gdNetworkConnectionId,
       [out retval] dispinterface INetworkConnection **ppNetworkConnection
     );
     [propget]
     HRESULT __stdcall IsConnectedToInternet (
       [out retval] WINBOOL *pbIsConnected
     );
     [propget]
     HRESULT __stdcall IsConnected (
       [out retval] WINBOOL *pbIsConnected
     );
     HRESULT __stdcall GetConnectivity (
       [out retval] enum NLM_CONNECTIVITY *pConnectivity
     );
   };
   [
     uuid(DCB00003-570F-4A9B-8D69-199FDBA5723B),
     helpstring("Network Enumerator"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEnumNetworks : IDispatch
   {
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _NewEnum (
       [out retval] interface IEnumVARIANT **ppEnumVar
     );
     [id(1)]
     HRESULT __stdcall Next (
       [in] UINT celt,
       [out] dispinterface INetwork **rgelt,
       [in out] UINT *pceltFetched
     );
     HRESULT __stdcall Skip (
       [in] UINT celt
     );
     HRESULT __stdcall Reset (void);
     HRESULT __stdcall Clone (
       [out retval] dispinterface IEnumNetworks **ppEnumNetwork
     );
   };
   [
     uuid(DCB00002-570F-4A9B-8D69-199FDBA5723B),
     helpstring("Network"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetwork : IDispatch
   {
     [id(1)]
     HRESULT __stdcall GetName (
       [out retval] BSTR *pszNetworkName
     );
     HRESULT __stdcall SetName (
       [in] BSTR szNetworkNewName
     );
     HRESULT __stdcall GetDescription (
       [out retval] BSTR *pszDescription
     );
     HRESULT __stdcall SetDescription (
       [in] BSTR szDescription
     );
     HRESULT __stdcall GetNetworkId (
       [out retval] struct GUID *pgdGuidNetworkId
     );
     HRESULT __stdcall GetDomainType (
       [out retval] enum NLM_DOMAIN_TYPE *pNetworkType
     );
     HRESULT __stdcall GetNetworkConnections (
       [out retval] dispinterface IEnumNetworkConnections **ppEnumNetworkConnection
     );
     HRESULT __stdcall GetTimeCreatedAndConnected (
       [out] UINT *pdwLowDateTimeCreated,
       [out] UINT *pdwHighDateTimeCreated,
       [out] UINT *pdwLowDateTimeConnected,
       [out] UINT *pdwHighDateTimeConnected
     );
     [propget]
     HRESULT __stdcall IsConnectedToInternet (
       [out retval] WINBOOL *pbIsConnected
     );
     [propget]
     HRESULT __stdcall IsConnected (
       [out retval] WINBOOL *pbIsConnected
     );
     HRESULT __stdcall GetConnectivity (
       [out retval] enum NLM_CONNECTIVITY *pConnectivity
     );
     HRESULT __stdcall GetCategory (
       [out retval] enum NLM_NETWORK_CATEGORY *pCategory
     );
     HRESULT __stdcall SetCategory (
       [in] enum NLM_NETWORK_CATEGORY NewCategory
     );
   };
   [
     uuid(DCB00006-570F-4A9B-8D69-199FDBA5723B),
     helpstring("Network Connection Enumerator"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IEnumNetworkConnections : IDispatch
   {
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _NewEnum (
       [out retval] interface IEnumVARIANT **ppEnumVar
     );
     [id(1)]
     HRESULT __stdcall Next (
       [in] UINT celt,
       [out] dispinterface INetworkConnection **rgelt,
       [in out] UINT *pceltFetched
     );
     HRESULT __stdcall Skip (
       [in] UINT celt
     );
     HRESULT __stdcall Reset (void);
     HRESULT __stdcall Clone (
       [out retval] dispinterface IEnumNetworkConnections **ppEnumNetwork
     );
   };
   [
     uuid(DCB00005-570F-4A9B-8D69-199FDBA5723B),
     helpstring("Network Connection"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetworkConnection : IDispatch
   {
     [id(1)]
     HRESULT __stdcall GetNetwork (
       [out retval] dispinterface INetwork **ppNetwork
     );
     [propget]
     HRESULT __stdcall IsConnectedToInternet (
       [out retval] WINBOOL *pbIsConnected
     );
     [propget]
     HRESULT __stdcall IsConnected (
       [out retval] WINBOOL *pbIsConnected
     );
     HRESULT __stdcall GetConnectivity (
       [out retval] enum NLM_CONNECTIVITY *pConnectivity
     );
     HRESULT __stdcall GetConnectionId (
       [out retval] struct GUID *pgdConnectionId
     );
     HRESULT __stdcall GetAdapterId (
       [out retval] struct GUID *pgdAdapterId
     );
     HRESULT __stdcall GetDomainType (
       [out retval] enum NLM_DOMAIN_TYPE *pDomainType
     );
   };

};

/* Interface declarations.  */
[
  uuid(CCE718CE-6D82-4D79-A753-8768B9FCB00D),
  hidden,
  nonextensible
]
interface IElevationConfigurable : IUnknown
{
  [id(1610678272), propput]
  HRESULT __stdcall Config (
    [in] dispinterface IElevationConfig *argNo1
  );
};

