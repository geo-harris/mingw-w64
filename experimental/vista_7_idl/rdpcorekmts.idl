/* Automated generated idl file <rdpcorekmtslib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IWTSProtocolManager;
interface IWTSProtocolListener;
interface IWTSProtocolListenerCallback;
interface IWTSProtocolConnection;
interface IWTSProtocolLogonErrorRedirector;
interface IWTSProtocolLicenseConnection;
interface IWTSProtocolShadowConnection;
interface IWTSProtocolShadowCallback;
interface IWTSProtocolConnectionCallback;

/* Structure forward declarations.  */
struct _WTS_POLICY_DATA;
struct _WTS_CLIENT_DATA;
struct _WTS_TIME_ZONE_INFORMATION;
struct _WTS_SYSTEMTIME;
struct _WTS_SOCKADDR;
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0001;
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0002;
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0003;
struct _WTS_USER_CREDENTIAL;
struct _WTS_LICENSE_CAPABILITIES;
struct _WTS_SESSION_ID;
struct _WTS_USER_DATA;
struct _WTS_PROTOCOL_STATUS;
struct _WTS_PROTOCOL_COUNTERS;
struct _WTS_CACHE_STATS;
struct _WTS_PROTOCOL_CACHE;
struct _LARGE_INTEGER;
struct __WTS_PROPERTY_VALUE;
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0007;
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0008;
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0009;
struct _WTS_SMALL_RECT;
struct _WTS_DISPLAY_IOCTL;
struct _WTS_SERVICE_STATE;

/* Union record forward declarations.  */
union __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0004;
union _WTS_CACHE_STATS_UN;
union __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0010;

/* Union record forward declarations.  */
coclass KMRDPProtocolManager;

/* Enumeration declarations.  */
enum _WTS_LOGON_ERROR_REDIRECTOR_RESPONSE
{
  WTS_LOGON_ERR_INVALID = (int) 201326592,
  WTS_LOGON_ERR_NOT_HANDLED = (int) 201326593,
  WTS_LOGON_ERR_HANDLED_SHOW = (int) 201326594,
  WTS_LOGON_ERR_HANDLED_DONT_SHOW = (int) 201326595,
  WTS_LOGON_ERR_HANDLED_DONT_SHOW_START_OVER = (int) 201326596
};
enum __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0011
{
  WTS_CERT_TYPE_INVALID = (int) 201326592,
  WTS_CERT_TYPE_PROPRIETORY = (int) 201326593,
  WTS_CERT_TYPE_X509 = (int) 201326594
};
enum __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0005
{
  WTS_SERVICE_NONE = (int) 201326592,
  WTS_SERVICE_START = (int) 201326593,
  WTS_SERVICE_STOP = (int) 201326594
};
enum __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0006
{
  WTS_DRAIN_STATE_NONE = (int) 201326592,
  WTS_DRAIN_IN_DRAIN = (int) 201326593,
  WTS_DRAIN_NOT_IN_DRAIN = (int) 201326594
};

/* Structure/union declarations.  */
struct _WTS_POLICY_DATA
{
  CHAR fDisableEncryption;
  CHAR fDisableAutoReconnect;
  UINT ColorDepth;
  UCHAR MinEncryptionLevel;
  CHAR fDisableCpm;
  CHAR fDisableCdm;
  CHAR fDisableCcm;
  CHAR fDisableLPT;
  CHAR fDisableClip;
  CHAR fDisablePNPRedir;
};
struct _WTS_CLIENT_DATA
{
  CHAR fDisableCtrlAltDel;
  CHAR fDoubleClickDetect;
  CHAR fEnableWindowsKey;
  CHAR fHideTitleBar;
  long fInheritAutoLogon;
  CHAR fPromptForPassword;
  CHAR fUsingSavedCreds;
  USHORT Domain[256];
  USHORT UserName[256];
  USHORT Password[256];
  CHAR fPasswordIsScPin;
  long fInheritInitialProgram;
  USHORT WorkDirectory[257];
  USHORT InitialProgram[257];
  CHAR fMaximizeShell;
  UCHAR EncryptionLevel;
  UINT PerformanceFlags;
  USHORT ProtocolName[9];
  USHORT ProtocolType;
  long fInheritColorDepth;
  USHORT HRes;
  USHORT VRes;
  USHORT ColorDepth;
  USHORT DisplayDriverName[9];
  USHORT DisplayDeviceName[20];
  CHAR fMouse;
  UINT KeyboardLayout;
  UINT KeyboardType;
  UINT KeyboardSubType;
  UINT KeyboardFunctionKey;
  USHORT imeFileName[33];
  UINT ActiveInputLocale;
  CHAR fNoAudioPlayback;
  CHAR fRemoteConsoleAudio;
  USHORT AudioDriverName[9];
  struct _WTS_TIME_ZONE_INFORMATION ClientTimeZone;
  USHORT ClientName[21];
  UINT SerialNumber;
  UINT ClientAddressFamily;
  USHORT ClientAddress[31];
  struct _WTS_SOCKADDR ClientSockAddress;
  USHORT ClientDirectory[257];
  UINT ClientBuildNumber;
  USHORT ClientProductId;
  USHORT OutBufCountHost;
  USHORT OutBufCountClient;
  USHORT OutBufLength;
  UINT ClientSessionId;
  USHORT ClientDigProductId[33];
  CHAR fDisableCpm;
  CHAR fDisableCdm;
  CHAR fDisableCcm;
  CHAR fDisableLPT;
  CHAR fDisableClip;
  CHAR fDisablePNP;
};
struct _WTS_TIME_ZONE_INFORMATION
{
  long Bias;
  USHORT StandardName[32];
  struct _WTS_SYSTEMTIME StandardDate;
  long StandardBias;
  USHORT DaylightName[32];
  struct _WTS_SYSTEMTIME DaylightDate;
  long DaylightBias;
};
struct _WTS_SYSTEMTIME
{
  USHORT wYear;
  USHORT wMonth;
  USHORT wDayOfWeek;
  USHORT wDay;
  USHORT wHour;
  USHORT wMinute;
  USHORT wSecond;
  USHORT wMilliseconds;
};
struct _WTS_SOCKADDR
{
  USHORT sin_family;
  struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0001 __MIDL____MIDL_itf_rdpcorekmts_0002_01660000;
};
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0001
{
  USHORT sin_family;
  union __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0004 u;
};
union __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0004
{
  struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0002 ipv4;
  struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0003 ipv6;
};
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0002
{
  USHORT sin_port;
  UINT in_addr;
  UCHAR sin_zero[8];
};
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0003
{
  USHORT sin6_port;
  UINT sin6_flowinfo;
  USHORT sin6_addr[8];
  UINT sin6_scope_id;
};
struct _WTS_USER_CREDENTIAL
{
  USHORT UserName[256];
  USHORT Password[256];
  USHORT Domain[256];
};
struct _WTS_LICENSE_CAPABILITIES
{
  UINT KeyExchangeAlg;
  UINT ProtocolVer;
  long fAuthenticateServer;
  WTS_CERT_TYPE CertType;
  UINT cbClientName;
  UCHAR rgbClientName[42];
};
struct _WTS_SESSION_ID
{
  struct GUID SessionUniqueGuid;
  UINT SessionId;
};
struct _WTS_USER_DATA
{
  USHORT WorkDirectory[257];
  USHORT InitialProgram[257];
  struct _WTS_TIME_ZONE_INFORMATION UserTimeZone;
};
struct _WTS_PROTOCOL_STATUS
{
  struct _WTS_PROTOCOL_COUNTERS Output;
  struct _WTS_PROTOCOL_COUNTERS Input;
  struct _WTS_CACHE_STATS Cache;
  UINT AsyncSignal;
  UINT AsyncSignalMask;
  struct _LARGE_INTEGER Counters[100];
};
struct _WTS_PROTOCOL_COUNTERS
{
  UINT WdBytes;
  UINT WdFrames;
  UINT WaitForOutBuf;
  UINT Frames;
  UINT Bytes;
  UINT CompressedBytes;
  UINT CompressFlushes;
  UINT Errors;
  UINT Timeouts;
  UINT AsyncFramingError;
  UINT AsyncOverrunError;
  UINT AsyncOverflowError;
  UINT AsyncParityError;
  UINT TdErrors;
  USHORT ProtocolType;
  USHORT Length;
  USHORT Specific;
  UINT Reserved[100];
};
struct _WTS_CACHE_STATS
{
  UINT Specific;
  union _WTS_CACHE_STATS_UN Data;
  USHORT ProtocolType;
  USHORT Length;
};
union _WTS_CACHE_STATS_UN
{
  struct _WTS_PROTOCOL_CACHE ProtocolCache[4];
  UINT TShareCacheStats;
  UINT Reserved[20];
};
struct _WTS_PROTOCOL_CACHE
{
  UINT CacheReads;
  UINT CacheHits;
};
struct _LARGE_INTEGER
{
  LONGLONG QuadPart;
};
struct __WTS_PROPERTY_VALUE
{
  struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0007 __MIDL____MIDL_itf_rdpcorekmts_0002_01660001;
};
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0007
{
  USHORT Type;
  union __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0010 u;
};
union __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0010
{
  UINT ulVal;
  struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0008 strVal;
  struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0009 bVal;
  struct GUID guidVal;
};
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0008
{
  UINT size;
  LPWSTR pstrVal;
};
struct __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0009
{
  UINT size;
  UCHAR *pbVal;
};
struct _WTS_SMALL_RECT
{
  short Left;
  short Top;
  short Right;
  short Bottom;
};
struct _WTS_DISPLAY_IOCTL
{
  UCHAR pDisplayIOCtlData[256];
  UINT cbDisplayIOCtlData;
};
struct _WTS_SERVICE_STATE
{
  WTS_RCM_SERVICE_STATE RcmServiceState;
  WTS_RCM_DRAIN_STATE RcmDrainState;
};

/* Type definitions.  */
typedef enum __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0011 WTS_CERT_TYPE;
typedef ULONGLONG ULONG_PTR;
typedef enum __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0005 WTS_RCM_SERVICE_STATE;
typedef enum __MIDL___MIDL_itf_rdpcorekmts_0002_0166_0006 WTS_RCM_DRAIN_STATE;

[
  uuid(7501FE6A-42E9-4859-ADAF-AC5A88589B7B),
  version(1.0),
  helpstring("KM Rdp Protocol Provider 1.0 Type Library")
]
library rdpcorekmtslib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(18B726BB-6FE6-4FB9-9276-ED57CE7C7CB2),
     helpstring("KM Rdp Protocol Provider ProtocolManager Class"),
     cancreate
   ]
   coclass KMRDPProtocolManager
   {
     interface IWTSProtocolManager;
   };

};

/* Interface declarations.  */
[
  uuid(F9EAF6CC-ED79-4F01-821D-1F881B9F66CC)
]
interface IWTSProtocolManager : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall CreateListener (
    [in] LPWSTR wszListenerName,
    [out] interface IWTSProtocolListener **pProtocolListener
  );
  HRESULT __stdcall NotifyServiceStateChange (
    [in] struct _WTS_SERVICE_STATE *pTSServiceStateChange
  );
  HRESULT __stdcall NotifySessionOfServiceStart (
    [in] struct _WTS_SESSION_ID *SessionId
  );
  HRESULT __stdcall NotifySessionOfServiceStop (
    [in] struct _WTS_SESSION_ID *SessionId
  );
  HRESULT __stdcall NotifySessionStateChange (
    [in] struct _WTS_SESSION_ID *SessionId,
    [in] UINT EventId
  );
};
[
  uuid(23083765-45F0-4394-8F69-32B2BC0EF4CA)
]
interface IWTSProtocolListener : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall StartListen (
    [in] interface IWTSProtocolListenerCallback *pCallback
  );
  HRESULT __stdcall StopListen (void);
};
[
  uuid(23083765-1A2D-4DE2-97DE-4A35F260F0B3)
]
interface IWTSProtocolListenerCallback : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnConnected (
    [in] interface IWTSProtocolConnection *pConnection,
    [out] interface IWTSProtocolConnectionCallback **pCallback
  );
};
[
  uuid(23083765-9095-4648-98BF-EF81C914032D)
]
interface IWTSProtocolConnection : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetLogonErrorRedirector (
    [out] interface IWTSProtocolLogonErrorRedirector **ppLogonErrorRedir
  );
  HRESULT __stdcall SendPolicyData (
    [in] struct _WTS_POLICY_DATA *pPolicyData
  );
  HRESULT __stdcall AcceptConnection (void);
  HRESULT __stdcall GetClientData (
    [out] struct _WTS_CLIENT_DATA *pClientData
  );
  HRESULT __stdcall GetUserCredentials (
    [out] struct _WTS_USER_CREDENTIAL *pUserCreds
  );
  HRESULT __stdcall GetLicenseConnection (
    [out] interface IWTSProtocolLicenseConnection **ppLicenseConnection
  );
  HRESULT __stdcall AuthenticateClientToSession (
    [out] struct _WTS_SESSION_ID *SessionId
  );
  HRESULT __stdcall NotifySessionId (
    [in] struct _WTS_SESSION_ID *SessionId
  );
  HRESULT __stdcall GetProtocolHandles (
    [out] ULONGLONG *pKeyboardHandle,
    [out] ULONGLONG *pMouseHandle,
    [out] ULONGLONG *pBeepHandle,
    [out] ULONGLONG *pVideoHandle
  );
  HRESULT __stdcall ConnectNotify (
    [in] UINT SessionId
  );
  HRESULT __stdcall IsUserAllowedToLogon (
    [in] UINT SessionId,
    [in] ULONGLONG UserToken,
    [in] LPWSTR pDomainName,
    [in] LPWSTR pUserName
  );
  HRESULT __stdcall SessionArbitrationEnumeration (
    [in] ULONGLONG hUserToken,
    [in] long bSingleSessionPerUserEnabled,
    [out] UINT *pSessionIdArray,
    [in out] UINT *pdwSessionIdentifierCount
  );
  HRESULT __stdcall LogonNotify (
    [in] ULONGLONG hClientToken,
    [in] LPWSTR wszUserName,
    [in] LPWSTR wszDomainName,
    [in] struct _WTS_SESSION_ID *SessionId
  );
  HRESULT __stdcall GetUserData (
    [in] struct _WTS_POLICY_DATA *pPolicyData,
    [in out] struct _WTS_USER_DATA *pClientData
  );
  HRESULT __stdcall DisconnectNotify (void);
  HRESULT __stdcall Close (void);
  HRESULT __stdcall GetProtocolStatus (
    [out] struct _WTS_PROTOCOL_STATUS *pProtocolStatus
  );
  HRESULT __stdcall GetLastInputTime (
    [out] ULONGLONG *pLastInputTime
  );
  HRESULT __stdcall SetErrorInfo (
    [in] UINT ulError
  );
  HRESULT __stdcall SendBeep (
    [in] UINT Frequency,
    [in] UINT Duration
  );
  HRESULT __stdcall CreateVirtualChannel (
    [in] LPSTR szEndpointName,
    [in] long bStatic,
    [in] UINT RequestedPriority,
    [out] ULONG_PTR *phChannel
  );
  HRESULT __stdcall QueryProperty (
    [in] struct GUID QueryType,
    [in] UINT ulNumEntriesIn,
    [in] UINT ulNumEntriesOut,
    [in opt] struct __WTS_PROPERTY_VALUE *pPropertyEntriesIn,
    [out opt] struct __WTS_PROPERTY_VALUE *pPropertyEntriesOut
  );
  HRESULT __stdcall GetShadowConnection (
    [out] interface IWTSProtocolShadowConnection **ppShadowConnection
  );
};
[
  uuid(FD9B61A7-2916-4627-8DEE-4328711AD6CB)
]
interface IWTSProtocolLogonErrorRedirector : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnBeginPainting (void);
  HRESULT __stdcall RedirectStatus (
    [in] LPWSTR pszMessage,
    [out] enum _WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse
  );
  HRESULT __stdcall RedirectMessage (
    [in] LPWSTR pszCaption,
    [in] LPWSTR pszMessage,
    [in] unsigned int uType,
    [out] enum _WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse
  );
  HRESULT __stdcall RedirectLogonError (
    [in] long ntsStatus,
    [in] long ntsSubstatus,
    [in] LPWSTR pszCaption,
    [in] LPWSTR pszMessage,
    [in] unsigned int uType,
    [out] enum _WTS_LOGON_ERROR_REDIRECTOR_RESPONSE *pResponse
  );
};
[
  uuid(23083765-178C-4079-8E4A-FEA6496A4D70)
]
interface IWTSProtocolLicenseConnection : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RequestLicensingCapabilities (
    [out] struct _WTS_LICENSE_CAPABILITIES *ppLicenseCapabilities,
    [in out] UINT *pcbLicenseCapabilities
  );
  HRESULT __stdcall SendClientLicense (
    [in] UCHAR *pClientLicense,
    [in] UINT cbClientLicense
  );
  HRESULT __stdcall RequestClientLicense (
    [in] UCHAR *Reserve1,
    [in] UINT Reserve2,
    [out] UCHAR *ppClientLicense,
    [in out] UINT *pcbClientLicense
  );
  HRESULT __stdcall ProtocolComplete (
    [in] UINT ulComplete
  );
};
[
  uuid(EE3B0C14-37FB-456B-BAB3-6D6CD51E13BF)
]
interface IWTSProtocolShadowConnection : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Start (
    [in] LPWSTR pTargetServerName,
    [in] UINT TargetSessionId,
    [in] UCHAR HotKeyVk,
    [in] USHORT HotkeyModifiers,
    [in] interface IWTSProtocolShadowCallback *pShadowCallback
  );
  HRESULT __stdcall Stop (void);
  HRESULT __stdcall DoTarget (
    [in] UCHAR *pParam1,
    [in] UINT Param1Size,
    [in] UCHAR *pParam2,
    [in] UINT Param2Size,
    [in] UCHAR *pParam3,
    [in] UINT Param3Size,
    [in] UCHAR *pParam4,
    [in] UINT Param4Size,
    [in] LPWSTR pClientName
  );
};
[
  uuid(503A2504-AAE5-4AB1-93E0-6D1C4BC6F71A)
]
interface IWTSProtocolShadowCallback : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall StopShadow (void);
  HRESULT __stdcall InvokeTargetShadow (
    [in] LPWSTR pTargetServerName,
    [in] UINT TargetSessionId,
    [in] UCHAR *pParam1,
    [in] UINT Param1Size,
    [in] UCHAR *pParam2,
    [in] UINT Param2Size,
    [in] UCHAR *pParam3,
    [in] UINT Param3Size,
    [in] UCHAR *pParam4,
    [in] UINT Param4Size,
    [in] LPWSTR pClientName
  );
};
[
  uuid(23083765-75EB-41FE-B4FB-E086242AFA0F)
]
interface IWTSProtocolConnectionCallback : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnReady (void);
  HRESULT __stdcall BrokenConnection (
    [in] UINT Reason,
    [in] UINT Source
  );
  HRESULT __stdcall StopScreenUpdates (void);
  HRESULT __stdcall RedrawWindow (
    [in opt] struct _WTS_SMALL_RECT *rect
  );
  HRESULT __stdcall DisplayIOCtl (
    [in] struct _WTS_DISPLAY_IOCTL *DisplayIOCtl
  );
};

