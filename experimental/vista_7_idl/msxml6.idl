/* Automated generated idl file <msxml2>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface ISAXXMLReader;
interface ISAXEntityResolver;
interface ISAXContentHandler;
interface ISAXLocator;
interface ISAXAttributes;
interface ISAXDTDHandler;
interface ISAXErrorHandler;
interface ISAXXMLFilter;
interface ISAXLexicalHandler;
interface ISAXDeclHandler;
interface IMXNamespaceManager;

/* Union record forward declarations.  */
dispinterface IXMLDOMImplementation;
dispinterface IXMLDOMNode;
dispinterface IXMLDOMNodeList;
dispinterface IXMLDOMNamedNodeMap;
dispinterface IXMLDOMDocument;
dispinterface IXMLDOMDocumentType;
dispinterface IXMLDOMElement;
dispinterface IXMLDOMAttribute;
dispinterface IXMLDOMDocumentFragment;
dispinterface IXMLDOMText;
dispinterface IXMLDOMCharacterData;
dispinterface IXMLDOMComment;
dispinterface IXMLDOMCDATASection;
dispinterface IXMLDOMProcessingInstruction;
dispinterface IXMLDOMEntityReference;
dispinterface IXMLDOMParseError;
dispinterface IXMLDOMDocument2;
dispinterface IXMLDOMSchemaCollection;
dispinterface IXMLDOMDocument3;
dispinterface IXMLDOMNotation;
dispinterface IXMLDOMEntity;
dispinterface IXMLDOMParseError2;
dispinterface IXMLDOMParseErrorCollection;
dispinterface IXTLRuntime;
dispinterface IXSLTemplate;
dispinterface IXSLProcessor;
dispinterface IVBSAXXMLReader;
dispinterface IVBSAXEntityResolver;
dispinterface IVBSAXContentHandler;
dispinterface IVBSAXLocator;
dispinterface IVBSAXAttributes;
dispinterface IVBSAXDTDHandler;
dispinterface IVBSAXErrorHandler;
dispinterface IVBSAXXMLFilter;
dispinterface IVBSAXLexicalHandler;
dispinterface IVBSAXDeclHandler;
dispinterface IMXWriter;
dispinterface IMXAttributes;
dispinterface IMXReaderControl;
dispinterface IMXSchemaDeclHandler;
dispinterface ISchemaElement;
dispinterface ISchemaParticle;
dispinterface ISchemaItem;
dispinterface ISchema;
dispinterface ISchemaItemCollection;
dispinterface ISchemaStringCollection;
dispinterface ISchemaType;
dispinterface ISchemaComplexType;
dispinterface ISchemaAny;
dispinterface ISchemaModelGroup;
dispinterface IMXXMLFilter;
dispinterface IXMLDOMSchemaCollection2;
dispinterface ISchemaAttribute;
dispinterface ISchemaAttributeGroup;
dispinterface ISchemaIdentityConstraint;
dispinterface ISchemaNotation;
dispinterface IXMLDOMSelection;
dispinterface XMLDOMDocumentEvents;
dispinterface IDSOControl;
dispinterface IXMLHTTPRequest;
dispinterface IServerXMLHTTPRequest;
dispinterface IServerXMLHTTPRequest2;
dispinterface IMXNamespacePrefixes;
dispinterface IVBMXNamespaceManager;

/* Union record forward declarations.  */
coclass DOMDocument;
coclass DOMDocument26;
coclass DOMDocument30;
coclass DOMDocument40;
coclass DOMDocument60;
coclass FreeThreadedDOMDocument;
coclass FreeThreadedDOMDocument26;
coclass FreeThreadedDOMDocument30;
coclass FreeThreadedDOMDocument40;
coclass FreeThreadedDOMDocument60;
coclass XMLSchemaCache;
coclass XMLSchemaCache26;
coclass XMLSchemaCache30;
coclass XMLSchemaCache40;
coclass XMLSchemaCache60;
coclass XSLTemplate;
coclass XSLTemplate26;
coclass XSLTemplate30;
coclass XSLTemplate40;
coclass XSLTemplate60;
coclass DSOControl;
coclass DSOControl26;
coclass DSOControl30;
coclass DSOControl40;
coclass XMLHTTP;
coclass XMLHTTP26;
coclass XMLHTTP30;
coclass XMLHTTP40;
coclass XMLHTTP60;
coclass ServerXMLHTTP;
coclass ServerXMLHTTP30;
coclass ServerXMLHTTP40;
coclass ServerXMLHTTP60;
coclass SAXXMLReader;
coclass SAXXMLReader30;
coclass SAXXMLReader40;
coclass SAXXMLReader60;
coclass MXXMLWriter;
coclass MXXMLWriter30;
coclass MXXMLWriter40;
coclass MXXMLWriter60;
coclass MXHTMLWriter;
coclass MXHTMLWriter30;
coclass MXHTMLWriter40;
coclass MXHTMLWriter60;
coclass SAXAttributes;
coclass SAXAttributes30;
coclass SAXAttributes40;
coclass SAXAttributes60;
coclass MXNamespaceManager;
coclass MXNamespaceManager40;
coclass MXNamespaceManager60;

/* Enumeration declarations.  */
[
  helpstring("Constants that define a node's type")
]
enum tagDOMNodeType
{
  NODE_INVALID = (int) 201326592,
  NODE_ELEMENT = (int) 201326593,
  NODE_ATTRIBUTE = (int) 201326594,
  NODE_TEXT = (int) 201326595,
  NODE_CDATA_SECTION = (int) 201326596,
  NODE_ENTITY_REFERENCE = (int) 201326597,
  NODE_ENTITY = (int) 201326598,
  NODE_PROCESSING_INSTRUCTION = (int) 201326599,
  NODE_COMMENT = (int) 201326600,
  NODE_DOCUMENT = (int) 201326601,
  NODE_DOCUMENT_TYPE = (int) 201326602,
  NODE_DOCUMENT_FRAGMENT = (int) 201326603,
  NODE_NOTATION = (int) 201326604
};
[
  helpstring("Schema Object Model Item Types")
]
enum _SOMITEMTYPE
{
  SOMITEM_SCHEMA = (int) 201330688,
  SOMITEM_ATTRIBUTE = (int) 201330689,
  SOMITEM_ATTRIBUTEGROUP = (int) 201330690,
  SOMITEM_NOTATION = (int) 201330691,
  SOMITEM_ANNOTATION = (int) 201330692,
  SOMITEM_IDENTITYCONSTRAINT = (int) 201330944,
  SOMITEM_KEY = (int) 201330945,
  SOMITEM_KEYREF = (int) 201330946,
  SOMITEM_UNIQUE = (int) 201330947,
  SOMITEM_ANYTYPE = (int) 201334784,
  SOMITEM_DATATYPE = (int) 201335040,
  SOMITEM_DATATYPE_ANYTYPE = (int) 201335041,
  SOMITEM_DATATYPE_ANYURI = (int) 201335042,
  SOMITEM_DATATYPE_BASE64BINARY = (int) 201335043,
  SOMITEM_DATATYPE_BOOLEAN = (int) 201335044,
  SOMITEM_DATATYPE_BYTE = (int) 201335045,
  SOMITEM_DATATYPE_DATE = (int) 201335046,
  SOMITEM_DATATYPE_DATETIME = (int) 201335047,
  SOMITEM_DATATYPE_DAY = (int) 201335048,
  SOMITEM_DATATYPE_DECIMAL = (int) 201335049,
  SOMITEM_DATATYPE_DOUBLE = (int) 201335050,
  SOMITEM_DATATYPE_DURATION = (int) 201335051,
  SOMITEM_DATATYPE_ENTITIES = (int) 201335052,
  SOMITEM_DATATYPE_ENTITY = (int) 201335053,
  SOMITEM_DATATYPE_FLOAT = (int) 201335054,
  SOMITEM_DATATYPE_HEXBINARY = (int) 201335055,
  SOMITEM_DATATYPE_ID = (int) 201335056,
  SOMITEM_DATATYPE_IDREF = (int) 201335057,
  SOMITEM_DATATYPE_IDREFS = (int) 201335058,
  SOMITEM_DATATYPE_INT = (int) 201335059,
  SOMITEM_DATATYPE_INTEGER = (int) 201335060,
  SOMITEM_DATATYPE_LANGUAGE = (int) 201335061,
  SOMITEM_DATATYPE_LONG = (int) 201335062,
  SOMITEM_DATATYPE_MONTH = (int) 201335063,
  SOMITEM_DATATYPE_MONTHDAY = (int) 201335064,
  SOMITEM_DATATYPE_NAME = (int) 201335065,
  SOMITEM_DATATYPE_NCNAME = (int) 201335066,
  SOMITEM_DATATYPE_NEGATIVEINTEGER = (int) 201335067,
  SOMITEM_DATATYPE_NMTOKEN = (int) 201335068,
  SOMITEM_DATATYPE_NMTOKENS = (int) 201335069,
  SOMITEM_DATATYPE_NONNEGATIVEINTEGER = (int) 201335070,
  SOMITEM_DATATYPE_NONPOSITIVEINTEGER = (int) 201335071,
  SOMITEM_DATATYPE_NORMALIZEDSTRING = (int) 201335072,
  SOMITEM_DATATYPE_NOTATION = (int) 201335073,
  SOMITEM_DATATYPE_POSITIVEINTEGER = (int) 201335074,
  SOMITEM_DATATYPE_QNAME = (int) 201335075,
  SOMITEM_DATATYPE_SHORT = (int) 201335076,
  SOMITEM_DATATYPE_STRING = (int) 201335077,
  SOMITEM_DATATYPE_TIME = (int) 201335078,
  SOMITEM_DATATYPE_TOKEN = (int) 201335079,
  SOMITEM_DATATYPE_UNSIGNEDBYTE = (int) 201335080,
  SOMITEM_DATATYPE_UNSIGNEDINT = (int) 201335081,
  SOMITEM_DATATYPE_UNSIGNEDLONG = (int) 201335082,
  SOMITEM_DATATYPE_UNSIGNEDSHORT = (int) 201335083,
  SOMITEM_DATATYPE_YEAR = (int) 201335084,
  SOMITEM_DATATYPE_YEARMONTH = (int) 201335085,
  SOMITEM_DATATYPE_ANYSIMPLETYPE = (int) 201335295,
  SOMITEM_SIMPLETYPE = (int) 201335296,
  SOMITEM_COMPLEXTYPE = (int) 201335808,
  SOMITEM_PARTICLE = (int) 201342976,
  SOMITEM_ANY = (int) 201342977,
  SOMITEM_ANYATTRIBUTE = (int) 201342978,
  SOMITEM_ELEMENT = (int) 201342979,
  SOMITEM_GROUP = (int) 201343232,
  SOMITEM_ALL = (int) 201343233,
  SOMITEM_CHOICE = (int) 201343234,
  SOMITEM_SEQUENCE = (int) 201343235,
  SOMITEM_EMPTYPARTICLE = (int) 201343236,
  SOMITEM_NULL = (int) 201328640,
  SOMITEM_NULL_TYPE = (int) 201336832,
  SOMITEM_NULL_ANY = (int) 201345025,
  SOMITEM_NULL_ANYATTRIBUTE = (int) 201345026,
  SOMITEM_NULL_ELEMENT = (int) 201345027
};
[
  helpstring("Schema Object Model Filters")
]
enum _SCHEMADERIVATIONMETHOD
{
  SCHEMADERIVATIONMETHOD_EMPTY = (int) 201326592,
  SCHEMADERIVATIONMETHOD_SUBSTITUTION = (int) 201326593,
  SCHEMADERIVATIONMETHOD_EXTENSION = (int) 201326594,
  SCHEMADERIVATIONMETHOD_RESTRICTION = (int) 201326596,
  SCHEMADERIVATIONMETHOD_LIST = (int) 201326600,
  SCHEMADERIVATIONMETHOD_UNION = (int) 201326608,
  SCHEMADERIVATIONMETHOD_ALL = (int) 201326847,
  SCHEMADERIVATIONMETHOD_NONE = (int) 201326848
};
[
  helpstring("Schema Object Model Type variety values")
]
enum _SCHEMATYPEVARIETY
{
  SCHEMATYPEVARIETY_NONE = (int) -1,
  SCHEMATYPEVARIETY_ATOMIC = (int) 201326592,
  SCHEMATYPEVARIETY_LIST = (int) 201326593,
  SCHEMATYPEVARIETY_UNION = (int) 201326594
};
[
  helpstring("Schema Object Model Whitespace facet values")
]
enum _SCHEMAWHITESPACE
{
  SCHEMAWHITESPACE_NONE = (int) -1,
  SCHEMAWHITESPACE_PRESERVE = (int) 201326592,
  SCHEMAWHITESPACE_REPLACE = (int) 201326593,
  SCHEMAWHITESPACE_COLLAPSE = (int) 201326594
};
[
  helpstring("Schema Object Model Process Contents")
]
enum _SCHEMAPROCESSCONTENTS
{
  SCHEMAPROCESSCONTENTS_NONE = (int) 201326592,
  SCHEMAPROCESSCONTENTS_SKIP = (int) 201326593,
  SCHEMAPROCESSCONTENTS_LAX = (int) 201326594,
  SCHEMAPROCESSCONTENTS_STRICT = (int) 201326595
};
[
  helpstring("Schema Object Model Content Types")
]
enum _SCHEMACONTENTTYPE
{
  SCHEMACONTENTTYPE_EMPTY = (int) 201326592,
  SCHEMACONTENTTYPE_TEXTONLY = (int) 201326593,
  SCHEMACONTENTTYPE_ELEMENTONLY = (int) 201326594,
  SCHEMACONTENTTYPE_MIXED = (int) 201326595
};
[
  helpstring("Schema Object Model Attribute Uses")
]
enum _SCHEMAUSE
{
  SCHEMAUSE_OPTIONAL = (int) 201326592,
  SCHEMAUSE_PROHIBITED = (int) 201326593,
  SCHEMAUSE_REQUIRED = (int) 201326594
};
[
  helpstring("Options for ServerXMLHTTPRequest Option property")
]
enum _SERVERXMLHTTP_OPTION
{
  SXH_OPTION_URL = (int) -1,
  SXH_OPTION_URL_CODEPAGE = (int) 201326592,
  SXH_OPTION_ESCAPE_PERCENT_IN_URL = (int) 201326593,
  SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = (int) 201326594,
  SXH_OPTION_SELECT_CLIENT_SSL_CERT = (int) 201326595
};
[
  helpstring("Flags for SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS option")
]
enum _SXH_SERVER_CERT_OPTION
{
  SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = (int) 201326848,
  SXH_SERVER_CERT_IGNORE_WRONG_USAGE = (int) 201327104,
  SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = (int) 201330688,
  SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = (int) 201334784,
  SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = (int) 201339648
};
[
  helpstring("Settings for setProxy")
]
enum _SXH_PROXY_SETTING
{
  SXH_PROXY_SET_DEFAULT = (int) 201326592,
  SXH_PROXY_SET_PRECONFIG = (int) 201326592,
  SXH_PROXY_SET_DIRECT = (int) 201326593,
  SXH_PROXY_SET_PROXY = (int) 201326594
};

/* Type definitions.  */
[
  helpstring("Constants that define a node's type")
]
typedef enum tagDOMNodeType DOMNodeType;
[
  helpstring("Schema Object Model Item Types")
]
typedef enum _SOMITEMTYPE SOMITEMTYPE;
[
  helpstring("Schema Object Model Filters")
]
typedef enum _SCHEMADERIVATIONMETHOD SCHEMADERIVATIONMETHOD;
[
  helpstring("Schema Object Model Type variety values")
]
typedef enum _SCHEMATYPEVARIETY SCHEMATYPEVARIETY;
[
  helpstring("Schema Object Model Whitespace facet values")
]
typedef enum _SCHEMAWHITESPACE SCHEMAWHITESPACE;
[
  helpstring("Schema Object Model Process Contents")
]
typedef enum _SCHEMAPROCESSCONTENTS SCHEMAPROCESSCONTENTS;
[
  helpstring("Schema Object Model Content Types")
]
typedef enum _SCHEMACONTENTTYPE SCHEMACONTENTTYPE;
[
  helpstring("Schema Object Model Attribute Uses")
]
typedef enum _SCHEMAUSE SCHEMAUSE;
[
  helpstring("Options for ServerXMLHTTPRequest Option property")
]
typedef enum _SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION;
[
  helpstring("Flags for SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS option")
]
typedef enum _SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;
[
  helpstring("Settings for setProxy")
]
typedef enum _SXH_PROXY_SETTING SXH_PROXY_SETTING;

[
  uuid(F5078F18-C551-11D3-89B9-0000F81FE221),
  version(6.0),
  helpstring("Microsoft XML, v6.0")
]
library msxml2
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(F6D90F11-9C73-11D3-B32E-00C04F990BB4),
     helpstring("W3C-DOM XML Document (Apartment)"),
     cancreate
   ]
   coclass DOMDocument
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(F5078F1B-C551-11D3-89B9-0000F81FE221),
     helpstring("W3C-DOM XML Document (Apartment)"),
     cancreate
   ]
   coclass DOMDocument26
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(F5078F32-C551-11D3-89B9-0000F81FE221),
     helpstring("W3C-DOM XML Document (Apartment)"),
     cancreate
   ]
   coclass DOMDocument30
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(88D969C0-F192-11D4-A65F-0040963251E5),
     helpstring("W3C-DOM XML Document (Apartment)"),
     cancreate
   ]
   coclass DOMDocument40
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(88D96A05-F192-11D4-A65F-0040963251E5),
     helpstring("W3C-DOM XML Document 6.0 (Apartment)"),
     cancreate
   ]
   coclass DOMDocument60
   {
     dispinterface IXMLDOMDocument3;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(F6D90F12-9C73-11D3-B32E-00C04F990BB4),
     helpstring("W3C-DOM XML Document (Free threaded)"),
     cancreate
   ]
   coclass FreeThreadedDOMDocument
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(F5078F1C-C551-11D3-89B9-0000F81FE221),
     helpstring("W3C-DOM XML Document (Free threaded)"),
     cancreate
   ]
   coclass FreeThreadedDOMDocument26
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(F5078F33-C551-11D3-89B9-0000F81FE221),
     helpstring("W3C-DOM XML Document (Free threaded)"),
     cancreate
   ]
   coclass FreeThreadedDOMDocument30
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(88D969C1-F192-11D4-A65F-0040963251E5),
     helpstring("W3C-DOM XML Document (Free threaded)"),
     cancreate
   ]
   coclass FreeThreadedDOMDocument40
   {
     dispinterface IXMLDOMDocument2;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(88D96A06-F192-11D4-A65F-0040963251E5),
     helpstring("W3C-DOM XML Document 6.0 (Free threaded)"),
     cancreate
   ]
   coclass FreeThreadedDOMDocument60
   {
     dispinterface IXMLDOMDocument3;
     dispinterface XMLDOMDocumentEvents;
   };
   [
     uuid(373984C9-B845-449B-91E7-45AC83036ADE),
     helpstring("XML Schema Cache"),
     cancreate
   ]
   coclass XMLSchemaCache
   {
     dispinterface IXMLDOMSchemaCollection;
   };
   [
     uuid(F5078F1D-C551-11D3-89B9-0000F81FE221),
     helpstring("XML Schema Cache 2.6"),
     cancreate
   ]
   coclass XMLSchemaCache26
   {
     dispinterface IXMLDOMSchemaCollection;
   };
   [
     uuid(F5078F34-C551-11D3-89B9-0000F81FE221),
     helpstring("XML Schema Cache 3.0"),
     cancreate
   ]
   coclass XMLSchemaCache30
   {
     dispinterface IXMLDOMSchemaCollection;
   };
   [
     uuid(88D969C2-F192-11D4-A65F-0040963251E5),
     helpstring("XML Schema Cache 4.0"),
     cancreate
   ]
   coclass XMLSchemaCache40
   {
     dispinterface IXMLDOMSchemaCollection2;
   };
   [
     uuid(88D96A07-F192-11D4-A65F-0040963251E5),
     helpstring("XML Schema Cache 6.0"),
     cancreate
   ]
   coclass XMLSchemaCache60
   {
     dispinterface IXMLDOMSchemaCollection2;
   };
   [
     uuid(2933BF94-7B36-11D2-B20E-00C04F983E60),
     helpstring("Compiled XSL Stylesheet Cache"),
     cancreate
   ]
   coclass XSLTemplate
   {
     dispinterface IXSLTemplate;
   };
   [
     uuid(F5078F21-C551-11D3-89B9-0000F81FE221),
     helpstring("Compiled XSL Stylesheet Cache 2.6"),
     cancreate
   ]
   coclass XSLTemplate26
   {
     dispinterface IXSLTemplate;
   };
   [
     uuid(F5078F36-C551-11D3-89B9-0000F81FE221),
     helpstring("Compiled XSL Stylesheet Cache 3.0"),
     cancreate
   ]
   coclass XSLTemplate30
   {
     dispinterface IXSLTemplate;
   };
   [
     uuid(88D969C3-F192-11D4-A65F-0040963251E5),
     helpstring("Compiled XSL Stylesheet Cache 4.0"),
     cancreate
   ]
   coclass XSLTemplate40
   {
     dispinterface IXSLTemplate;
   };
   [
     uuid(88D96A08-F192-11D4-A65F-0040963251E5),
     helpstring("XSL Stylesheet Cache 6.0"),
     cancreate
   ]
   coclass XSLTemplate60
   {
     dispinterface IXSLTemplate;
   };
   [
     uuid(F6D90F14-9C73-11D3-B32E-00C04F990BB4),
     helpstring("XML Data Source Object"),
     cancreate
   ]
   coclass DSOControl
   {
     dispinterface IDSOControl;
   };
   [
     uuid(F5078F1F-C551-11D3-89B9-0000F81FE221),
     helpstring("XML Data Source Object"),
     cancreate
   ]
   coclass DSOControl26
   {
     dispinterface IDSOControl;
   };
   [
     uuid(F5078F39-C551-11D3-89B9-0000F81FE221),
     helpstring("XML Data Source Object"),
     cancreate
   ]
   coclass DSOControl30
   {
     dispinterface IDSOControl;
   };
   [
     uuid(88D969C4-F192-11D4-A65F-0040963251E5),
     helpstring("XML Data Source Object"),
     cancreate
   ]
   coclass DSOControl40
   {
     dispinterface IDSOControl;
   };
   [
     uuid(F6D90F16-9C73-11D3-B32E-00C04F990BB4),
     helpstring("XML HTTP Request class."),
     cancreate
   ]
   coclass XMLHTTP
   {
     dispinterface IXMLHTTPRequest;
   };
   [
     uuid(F5078F1E-C551-11D3-89B9-0000F81FE221),
     helpstring("XML HTTP Request class."),
     cancreate
   ]
   coclass XMLHTTP26
   {
     dispinterface IXMLHTTPRequest;
   };
   [
     uuid(F5078F35-C551-11D3-89B9-0000F81FE221),
     helpstring("XML HTTP Request class."),
     cancreate
   ]
   coclass XMLHTTP30
   {
     dispinterface IXMLHTTPRequest;
   };
   [
     uuid(88D969C5-F192-11D4-A65F-0040963251E5),
     helpstring("XML HTTP Request class."),
     cancreate
   ]
   coclass XMLHTTP40
   {
     dispinterface IXMLHTTPRequest;
   };
   [
     uuid(88D96A0A-F192-11D4-A65F-0040963251E5),
     helpstring("XML HTTP Request class 6.0"),
     cancreate
   ]
   coclass XMLHTTP60
   {
     dispinterface IXMLHTTPRequest;
   };
   [
     uuid(AFBA6B42-5692-48EA-8141-DC517DCF0EF1),
     helpstring("Server XML HTTP Request class."),
     cancreate
   ]
   coclass ServerXMLHTTP
   {
     dispinterface IServerXMLHTTPRequest;
   };
   [
     uuid(AFB40FFD-B609-40A3-9828-F88BBE11E4E3),
     helpstring("Server XML HTTP Request class."),
     cancreate
   ]
   coclass ServerXMLHTTP30
   {
     dispinterface IServerXMLHTTPRequest;
   };
   [
     uuid(88D969C6-F192-11D4-A65F-0040963251E5),
     helpstring("Server XML HTTP Request class."),
     cancreate
   ]
   coclass ServerXMLHTTP40
   {
     dispinterface IServerXMLHTTPRequest2;
   };
   [
     uuid(88D96A0B-F192-11D4-A65F-0040963251E5),
     helpstring("Server XML HTTP Request 6.0 "),
     cancreate
   ]
   coclass ServerXMLHTTP60
   {
     dispinterface IServerXMLHTTPRequest2;
   };
   [
     uuid(079AA557-4A18-424A-8EEE-E39F0A8D41B9),
     helpstring("SAX XML Reader (version independent) coclass"),
     cancreate
   ]
   coclass SAXXMLReader
   {
     dispinterface IVBSAXXMLReader;
     interface ISAXXMLReader;
     dispinterface IMXReaderControl;
   };
   [
     uuid(3124C396-FB13-4836-A6AD-1317F1713688),
     helpstring("SAX XML Reader 3.0 coclass"),
     cancreate
   ]
   coclass SAXXMLReader30
   {
     dispinterface IVBSAXXMLReader;
     interface ISAXXMLReader;
     dispinterface IMXReaderControl;
   };
   [
     uuid(7C6E29BC-8B8B-4C3D-859E-AF6CD158BE0F),
     helpstring("SAX XML Reader 4.0 coclass"),
     cancreate
   ]
   coclass SAXXMLReader40
   {
     dispinterface IVBSAXXMLReader;
     interface ISAXXMLReader;
   };
   [
     uuid(88D96A0C-F192-11D4-A65F-0040963251E5),
     helpstring("SAX XML Reader 6.0"),
     cancreate
   ]
   coclass SAXXMLReader60
   {
     dispinterface IVBSAXXMLReader;
     interface ISAXXMLReader;
   };
   [
     uuid(FC220AD8-A72A-4EE8-926E-0B7AD152A020),
     helpstring("Microsoft XML Writer (version independent) coclass"),
     cancreate
   ]
   coclass MXXMLWriter
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXErrorHandler;
     interface ISAXDTDHandler;
     interface ISAXLexicalHandler;
     interface ISAXDeclHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(3D813DFE-6C91-4A4E-8F41-04346A841D9C),
     helpstring("Microsoft XML Writer 3.0 coclass"),
     cancreate
   ]
   coclass MXXMLWriter30
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXDeclHandler;
     interface ISAXDTDHandler;
     interface ISAXErrorHandler;
     interface ISAXLexicalHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(88D969C8-F192-11D4-A65F-0040963251E5),
     helpstring("Microsoft XML Writer 4.0 coclass"),
     cancreate
   ]
   coclass MXXMLWriter40
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXDeclHandler;
     interface ISAXDTDHandler;
     interface ISAXErrorHandler;
     interface ISAXLexicalHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(88D96A0F-F192-11D4-A65F-0040963251E5),
     helpstring("Microsoft XML Writer 6.0"),
     cancreate
   ]
   coclass MXXMLWriter60
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXDeclHandler;
     interface ISAXDTDHandler;
     interface ISAXErrorHandler;
     interface ISAXLexicalHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(A4C23EC3-6B70-4466-9127-550077239978),
     helpstring("Microsoft HTML Writer (version independent) coclass"),
     cancreate
   ]
   coclass MXHTMLWriter
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXErrorHandler;
     interface ISAXDTDHandler;
     interface ISAXLexicalHandler;
     interface ISAXDeclHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(853D1540-C1A7-4AA9-A226-4D3BD301146D),
     helpstring("Microsoft HTML Writer 3.0 coclass"),
     cancreate
   ]
   coclass MXHTMLWriter30
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXDeclHandler;
     interface ISAXDTDHandler;
     interface ISAXErrorHandler;
     interface ISAXLexicalHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(88D969C9-F192-11D4-A65F-0040963251E5),
     helpstring("Microsoft HTML Writer 4.0 coclass"),
     cancreate
   ]
   coclass MXHTMLWriter40
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXDeclHandler;
     interface ISAXDTDHandler;
     interface ISAXErrorHandler;
     interface ISAXLexicalHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(88D96A10-F192-11D4-A65F-0040963251E5),
     helpstring("Microsoft HTML Writer 6.0"),
     cancreate
   ]
   coclass MXHTMLWriter60
   {
     dispinterface IMXWriter;
     interface ISAXContentHandler;
     interface ISAXDeclHandler;
     interface ISAXDTDHandler;
     interface ISAXErrorHandler;
     interface ISAXLexicalHandler;
     dispinterface IVBSAXContentHandler;
     dispinterface IVBSAXDeclHandler;
     dispinterface IVBSAXDTDHandler;
     dispinterface IVBSAXErrorHandler;
     dispinterface IVBSAXLexicalHandler;
   };
   [
     uuid(4DD441AD-526D-4A77-9F1B-9841ED802FB0),
     helpstring("SAX Attributes (version independent) coclass"),
     cancreate
   ]
   coclass SAXAttributes
   {
     dispinterface IMXAttributes;
     dispinterface IVBSAXAttributes;
     interface ISAXAttributes;
   };
   [
     uuid(3E784A01-F3AE-4DC0-9354-9526B9370EBA),
     helpstring("SAX Attributes 3.0 coclass"),
     cancreate
   ]
   coclass SAXAttributes30
   {
     dispinterface IMXAttributes;
     dispinterface IVBSAXAttributes;
     interface ISAXAttributes;
   };
   [
     uuid(88D969CA-F192-11D4-A65F-0040963251E5),
     helpstring("SAX Attributes 4.0 coclass"),
     cancreate
   ]
   coclass SAXAttributes40
   {
     dispinterface IMXAttributes;
     dispinterface IVBSAXAttributes;
     interface ISAXAttributes;
   };
   [
     uuid(88D96A0E-F192-11D4-A65F-0040963251E5),
     helpstring("SAX Attributes 6.0"),
     cancreate
   ]
   coclass SAXAttributes60
   {
     dispinterface IMXAttributes;
     dispinterface IVBSAXAttributes;
     interface ISAXAttributes;
   };
   [
     uuid(88D969D5-F192-11D4-A65F-0040963251E5),
     helpstring("MX Namespace Manager coclass"),
     cancreate
   ]
   coclass MXNamespaceManager
   {
     dispinterface IVBMXNamespaceManager;
     interface IMXNamespaceManager;
   };
   [
     uuid(88D969D6-F192-11D4-A65F-0040963251E5),
     helpstring("MX Namespace Manager 4.0 coclass"),
     cancreate
   ]
   coclass MXNamespaceManager40
   {
     dispinterface IVBMXNamespaceManager;
     interface IMXNamespaceManager;
   };
   [
     uuid(88D96A11-F192-11D4-A65F-0040963251E5),
     helpstring("MX Namespace Manager 6.0"),
     cancreate
   ]
   coclass MXNamespaceManager60
   {
     dispinterface IVBMXNamespaceManager;
     interface IMXNamespaceManager;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(2933BF8F-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMImplementation : IDispatch
   {
     [id(145)]
     HRESULT __stdcall hasFeature (
       [in] BSTR feature,
       [in] BSTR version,
       [out retval] WINBOOL *hasFeature
     );
   };
   [
     uuid(2933BF80-7B36-11D2-B20E-00C04F983E60),
     helpstring("Core DOM node interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNode : IDispatch
   {
     [id(2), propget]
     HRESULT __stdcall nodeName (
       [out retval] BSTR *name
     );
     [propget]
     HRESULT __stdcall nodeValue (
       [out retval] VARIANT *value
     );
     [id(3), propput]
     HRESULT __stdcall nodeValue (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall nodeType (
       [out retval] DOMNodeType *type
     );
     [id(6), propget]
     HRESULT __stdcall parentNode (
       [out retval] dispinterface IXMLDOMNode **parent
     );
     [propget]
     HRESULT __stdcall childNodes (
       [out retval] dispinterface IXMLDOMNodeList **childList
     );
     [propget]
     HRESULT __stdcall firstChild (
       [out retval] dispinterface IXMLDOMNode **firstChild
     );
     [propget]
     HRESULT __stdcall lastChild (
       [out retval] dispinterface IXMLDOMNode **lastChild
     );
     [propget]
     HRESULT __stdcall previousSibling (
       [out retval] dispinterface IXMLDOMNode **previousSibling
     );
     [propget]
     HRESULT __stdcall nextSibling (
       [out retval] dispinterface IXMLDOMNode **nextSibling
     );
     [propget]
     HRESULT __stdcall attributes (
       [out retval] dispinterface IXMLDOMNamedNodeMap **attributeMap
     );
     HRESULT __stdcall insertBefore (
       [in] dispinterface IXMLDOMNode *newChild,
       [in] VARIANT refChild,
       [out retval] dispinterface IXMLDOMNode **outNewChild
     );
     HRESULT __stdcall replaceChild (
       [in] dispinterface IXMLDOMNode *newChild,
       [in] dispinterface IXMLDOMNode *oldChild,
       [out retval] dispinterface IXMLDOMNode **outOldChild
     );
     HRESULT __stdcall removeChild (
       [in] dispinterface IXMLDOMNode *childNode,
       [out retval] dispinterface IXMLDOMNode **oldChild
     );
     HRESULT __stdcall appendChild (
       [in] dispinterface IXMLDOMNode *newChild,
       [out retval] dispinterface IXMLDOMNode **outNewChild
     );
     HRESULT __stdcall hasChildNodes (
       [out retval] WINBOOL *hasChild
     );
     [propget]
     HRESULT __stdcall ownerDocument (
       [out retval] dispinterface IXMLDOMDocument **XMLDOMDocument
     );
     HRESULT __stdcall cloneNode (
       [in] WINBOOL deep,
       [out retval] dispinterface IXMLDOMNode **cloneRoot
     );
     [id(21), propget]
     HRESULT __stdcall nodeTypeString (
       [out retval] BSTR *nodeType
     );
     [id(24), propget]
     HRESULT __stdcall text (
       [out retval] BSTR *text
     );
     [id(24), propput]
     HRESULT __stdcall text (
       [in] BSTR argNo1
     );
     [id(22), propget]
     HRESULT __stdcall specified (
       [out retval] WINBOOL *isSpecified
     );
     [propget]
     HRESULT __stdcall definition (
       [out retval] dispinterface IXMLDOMNode **definitionNode
     );
     [id(25), propget]
     HRESULT __stdcall nodeTypedValue (
       [out retval] VARIANT *typedValue
     );
     [id(25), propput]
     HRESULT __stdcall nodeTypedValue (
       [in] VARIANT argNo1
     );
     [propget]
     HRESULT __stdcall dataType (
       [out retval] VARIANT *dataTypeName
     );
     [id(26), propput]
     HRESULT __stdcall dataType (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall xml (
       [out retval] BSTR *xmlString
     );
     HRESULT __stdcall transformNode (
       [in] dispinterface IXMLDOMNode *stylesheet,
       [out retval] BSTR *xmlString
     );
     HRESULT __stdcall selectNodes (
       [in] BSTR queryString,
       [out retval] dispinterface IXMLDOMNodeList **resultList
     );
     HRESULT __stdcall selectSingleNode (
       [in] BSTR queryString,
       [out retval] dispinterface IXMLDOMNode **resultNode
     );
     [propget]
     HRESULT __stdcall parsed (
       [out retval] WINBOOL *isParsed
     );
     [propget]
     HRESULT __stdcall namespaceURI (
       [out retval] BSTR *namespaceURI
     );
     [propget]
     HRESULT __stdcall prefix (
       [out retval] BSTR *prefixString
     );
     [propget]
     HRESULT __stdcall baseName (
       [out retval] BSTR *nameString
     );
     HRESULT __stdcall transformNodeToObject (
       [in] dispinterface IXMLDOMNode *stylesheet,
       [in] VARIANT outputObject
     );
   };
   [
     uuid(2933BF82-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNodeList : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] dispinterface IXMLDOMNode **listItem
     );
     [id(74), propget]
     HRESULT __stdcall length (
       [out retval] long *listLength
     );
     [id(76)]
     HRESULT __stdcall nextNode (
       [out retval] dispinterface IXMLDOMNode **nextItem
     );
     HRESULT __stdcall reset (void);
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(2933BF83-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNamedNodeMap : IDispatch
   {
     [id(83)]
     HRESULT __stdcall getNamedItem (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMNode **namedItem
     );
     HRESULT __stdcall setNamedItem (
       [in] dispinterface IXMLDOMNode *newItem,
       [out retval] dispinterface IXMLDOMNode **nameItem
     );
     HRESULT __stdcall removeNamedItem (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMNode **namedItem
     );
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] dispinterface IXMLDOMNode **listItem
     );
     [id(74), propget]
     HRESULT __stdcall length (
       [out retval] long *listLength
     );
     [id(87)]
     HRESULT __stdcall getQualifiedItem (
       [in] BSTR baseName,
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **qualifiedItem
     );
     HRESULT __stdcall removeQualifiedItem (
       [in] BSTR baseName,
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **qualifiedItem
     );
     HRESULT __stdcall nextNode (
       [out retval] dispinterface IXMLDOMNode **nextItem
     );
     HRESULT __stdcall reset (void);
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(2933BF81-7B36-11D2-B20E-00C04F983E60),
     hidden,
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocument : IXMLDOMNode
   {
     [id(38), propget]
     HRESULT __stdcall doctype (
       [out retval] dispinterface IXMLDOMDocumentType **documentType
     );
     [propget]
     HRESULT __stdcall implementation (
       [out retval] dispinterface IXMLDOMImplementation **impl
     );
     [propget]
     HRESULT __stdcall documentElement (
       [out retval] dispinterface IXMLDOMElement **DOMElement
     );
     [id(40), propputref]
     HRESULT __stdcall documentElement (
       [in] dispinterface IXMLDOMElement *argNo1
     );
     HRESULT __stdcall createElement (
       [in] BSTR tagName,
       [out retval] dispinterface IXMLDOMElement **element
     );
     HRESULT __stdcall createDocumentFragment (
       [out retval] dispinterface IXMLDOMDocumentFragment **docFrag
     );
     HRESULT __stdcall createTextNode (
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMText **text
     );
     HRESULT __stdcall createComment (
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMComment **comment
     );
     HRESULT __stdcall createCDATASection (
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMCDATASection **cdata
     );
     HRESULT __stdcall createProcessingInstruction (
       [in] BSTR target,
       [in] BSTR data,
       [out retval] dispinterface IXMLDOMProcessingInstruction **pi
     );
     HRESULT __stdcall createAttribute (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMAttribute **attribute
     );
     [id(49)]
     HRESULT __stdcall createEntityReference (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMEntityReference **entityRef
     );
     HRESULT __stdcall getElementsByTagName (
       [in] BSTR tagName,
       [out retval] dispinterface IXMLDOMNodeList **resultList
     );
     [id(54)]
     HRESULT __stdcall createNode (
       [in] VARIANT type,
       [in] BSTR name,
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **node
     );
     [id(56)]
     HRESULT __stdcall nodeFromID (
       [in] BSTR idString,
       [out retval] dispinterface IXMLDOMNode **node
     );
     [id(58)]
     HRESULT __stdcall load (
       [in] VARIANT xmlSource,
       [out retval] WINBOOL *isSuccessful
     );
     [id(-525), propget]
     HRESULT __stdcall readyState (
       [out retval] long *value
     );
     [id(59), propget]
     HRESULT __stdcall parseError (
       [out retval] dispinterface IXMLDOMParseError **errorObj
     );
     [propget]
     HRESULT __stdcall url (
       [out retval] BSTR *urlString
     );
     [propget]
     HRESULT __stdcall async (
       [out retval] WINBOOL *isAsync
     );
     [id(61), propput]
     HRESULT __stdcall async (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall abort (void);
     HRESULT __stdcall loadXML (
       [in] BSTR bstrXML,
       [out retval] WINBOOL *isSuccessful
     );
     HRESULT __stdcall save (
       [in] VARIANT destination
     );
     [propget]
     HRESULT __stdcall validateOnParse (
       [out retval] WINBOOL *isValidating
     );
     [id(65), propput]
     HRESULT __stdcall validateOnParse (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall resolveExternals (
       [out retval] WINBOOL *isResolving
     );
     [id(66), propput]
     HRESULT __stdcall resolveExternals (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall preserveWhiteSpace (
       [out retval] WINBOOL *isPreserving
     );
     [id(67), propput]
     HRESULT __stdcall preserveWhiteSpace (
       [in] WINBOOL argNo1
     );
     [propput]
     HRESULT __stdcall onreadystatechange (
       [in] VARIANT argNo1
     );
     [propput]
     HRESULT __stdcall ondataavailable (
       [in] VARIANT argNo1
     );
     [propput]
     HRESULT __stdcall ontransformnode (
       [in] VARIANT argNo1
     );
   };
   [
     uuid(2933BF8B-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocumentType : IXMLDOMNode
   {
     [id(131), propget]
     HRESULT __stdcall name (
       [out retval] BSTR *rootName
     );
     [propget]
     HRESULT __stdcall entities (
       [out retval] dispinterface IXMLDOMNamedNodeMap **entityMap
     );
     [propget]
     HRESULT __stdcall notations (
       [out retval] dispinterface IXMLDOMNamedNodeMap **notationMap
     );
   };
   [
     uuid(2933BF86-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMElement : IXMLDOMNode
   {
     [id(97), propget]
     HRESULT __stdcall tagName (
       [out retval] BSTR *tagName
     );
     [id(99)]
     HRESULT __stdcall getAttribute (
       [in] BSTR name,
       [out retval] VARIANT *value
     );
     HRESULT __stdcall setAttribute (
       [in] BSTR name,
       [in] VARIANT value
     );
     HRESULT __stdcall removeAttribute (
       [in] BSTR name
     );
     HRESULT __stdcall getAttributeNode (
       [in] BSTR name,
       [out retval] dispinterface IXMLDOMAttribute **attributeNode
     );
     HRESULT __stdcall setAttributeNode (
       [in] dispinterface IXMLDOMAttribute *DOMAttribute,
       [out retval] dispinterface IXMLDOMAttribute **attributeNode
     );
     HRESULT __stdcall removeAttributeNode (
       [in] dispinterface IXMLDOMAttribute *DOMAttribute,
       [out retval] dispinterface IXMLDOMAttribute **attributeNode
     );
     HRESULT __stdcall getElementsByTagName (
       [in] BSTR tagName,
       [out retval] dispinterface IXMLDOMNodeList **resultList
     );
     HRESULT __stdcall normalize (void);
   };
   [
     uuid(2933BF85-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMAttribute : IXMLDOMNode
   {
     [id(118), propget]
     HRESULT __stdcall name (
       [out retval] BSTR *attributeName
     );
     [id(120), propget]
     HRESULT __stdcall value (
       [out retval] VARIANT *attributeValue
     );
     [id(120), propput]
     HRESULT __stdcall value (
       [in] VARIANT argNo1
     );
   };
   [
     uuid(3EFAA413-272F-11D2-836F-0000F87A7782),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocumentFragment : IXMLDOMNode
   {
   };
   [
     uuid(2933BF87-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMText : IXMLDOMCharacterData
   {
     [id(123)]
     HRESULT __stdcall splitText (
       [in] long offset,
       [out retval] dispinterface IXMLDOMText **rightHandTextNode
     );
   };
   [
     uuid(2933BF84-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMCharacterData : IXMLDOMNode
   {
     [id(109), propget]
     HRESULT __stdcall data (
       [out retval] BSTR *data
     );
     [id(109), propput]
     HRESULT __stdcall data (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall length (
       [out retval] long *dataLength
     );
     HRESULT __stdcall substringData (
       [in] long offset,
       [in] long count,
       [out retval] BSTR *data
     );
     HRESULT __stdcall appendData (
       [in] BSTR data
     );
     HRESULT __stdcall insertData (
       [in] long offset,
       [in] BSTR data
     );
     HRESULT __stdcall deleteData (
       [in] long offset,
       [in] long count
     );
     HRESULT __stdcall replaceData (
       [in] long offset,
       [in] long count,
       [in] BSTR data
     );
   };
   [
     uuid(2933BF88-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMComment : IXMLDOMCharacterData
   {
   };
   [
     uuid(2933BF8A-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMCDATASection : IXMLDOMText
   {
   };
   [
     uuid(2933BF89-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMProcessingInstruction : IXMLDOMNode
   {
     [id(127), propget]
     HRESULT __stdcall target (
       [out retval] BSTR *name
     );
     [propget]
     HRESULT __stdcall data (
       [out retval] BSTR *value
     );
     [id(128), propput]
     HRESULT __stdcall data (
       [in] BSTR argNo1
     );
   };
   [
     uuid(2933BF8E-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMEntityReference : IXMLDOMNode
   {
   };
   [
     uuid(3EFAA426-272F-11D2-836F-0000F87A7782),
     helpstring("structure for reporting parser errors"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMParseError : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall errorCode (
       [out retval] long *errorCode
     );
     [id(179), propget]
     HRESULT __stdcall url (
       [out retval] BSTR *urlString
     );
     [propget]
     HRESULT __stdcall reason (
       [out retval] BSTR *reasonString
     );
     [propget]
     HRESULT __stdcall srcText (
       [out retval] BSTR *sourceString
     );
     [propget]
     HRESULT __stdcall line (
       [out retval] long *lineNumber
     );
     [propget]
     HRESULT __stdcall linepos (
       [out retval] long *linePosition
     );
     [propget]
     HRESULT __stdcall filepos (
       [out retval] long *filePosition
     );
   };
   [
     uuid(2933BF95-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocument2 : IXMLDOMDocument
   {
     [id(201), propget]
     HRESULT __stdcall namespaces (
       [out retval] dispinterface IXMLDOMSchemaCollection **namespaceCollection
     );
     [propget]
     HRESULT __stdcall schemas (
       [out retval] VARIANT *otherCollection
     );
     [id(202), propputref]
     HRESULT __stdcall schemas (
       [in] VARIANT argNo1
     );
     HRESULT __stdcall validate (
       [out retval] dispinterface IXMLDOMParseError **errorObj
     );
     HRESULT __stdcall setProperty (
       [in] BSTR name,
       [in] VARIANT value
     );
     HRESULT __stdcall getProperty (
       [in] BSTR name,
       [out retval] VARIANT *value
     );
   };
   [
     uuid(373984C8-B845-449B-91E7-45AC83036ADE),
     helpstring("XML Schemas Collection"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMSchemaCollection : IDispatch
   {
     [id(3)]
     HRESULT __stdcall add (
       [in] BSTR namespaceURI,
       [in] VARIANT var
     );
     HRESULT __stdcall get (
       [in] BSTR namespaceURI,
       [out retval] dispinterface IXMLDOMNode **schemaNode
     );
     HRESULT __stdcall remove (
       [in] BSTR namespaceURI
     );
     [propget]
     HRESULT __stdcall length (
       [out retval] long *length
     );
     [id(0), propget]
     HRESULT __stdcall namespaceURI (
       [in] long index,
       [out retval] BSTR *length
     );
     [id(8)]
     HRESULT __stdcall addCollection (
       [in] dispinterface IXMLDOMSchemaCollection *otherCollection
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(2933BF96-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMDocument3 : IXMLDOMDocument2
   {
     [id(208)]
     HRESULT __stdcall validateNode (
       [in] dispinterface IXMLDOMNode *node,
       [out retval] dispinterface IXMLDOMParseError **errorObj
     );
     HRESULT __stdcall importNode (
       [in] dispinterface IXMLDOMNode *node,
       [in] WINBOOL deep,
       [out retval] dispinterface IXMLDOMNode **clone
     );
   };
   [
     uuid(2933BF8C-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMNotation : IXMLDOMNode
   {
     [id(136), propget]
     HRESULT __stdcall publicId (
       [out retval] VARIANT *publicId
     );
     [propget]
     HRESULT __stdcall systemId (
       [out retval] VARIANT *systemId
     );
   };
   [
     uuid(2933BF8D-7B36-11D2-B20E-00C04F983E60),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMEntity : IXMLDOMNode
   {
     [id(140), propget]
     HRESULT __stdcall publicId (
       [out retval] VARIANT *publicId
     );
     [propget]
     HRESULT __stdcall systemId (
       [out retval] VARIANT *systemId
     );
     [propget]
     HRESULT __stdcall notationName (
       [out retval] BSTR *name
     );
   };
   [
     uuid(3EFAA428-272F-11D2-836F-0000F87A7782),
     helpstring("structure for reporting parser errors"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMParseError2 : IXMLDOMParseError
   {
     [id(190), propget]
     HRESULT __stdcall errorXPath (
       [out retval] BSTR *xpathexpr
     );
     [id(187), propget]
     HRESULT __stdcall allErrors (
       [out retval] dispinterface IXMLDOMParseErrorCollection **allErrors
     );
     HRESULT __stdcall errorParameters (
       [in] long index,
       [out retval] BSTR *param
     );
     [propget]
     HRESULT __stdcall errorParametersCount (
       [out retval] long *count
     );
   };
   [
     uuid(3EFAA429-272F-11D2-836F-0000F87A7782),
     helpstring("structure for reporting parser errors"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMParseErrorCollection : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] dispinterface IXMLDOMParseError2 **error
     );
     [id(193), propget]
     HRESULT __stdcall length (
       [out retval] long *length
     );
     [propget]
     HRESULT __stdcall next (
       [out retval] dispinterface IXMLDOMParseError2 **error
     );
     HRESULT __stdcall reset (void);
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(3EFAA425-272F-11D2-836F-0000F87A7782),
     helpstring("XTL runtime object"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXTLRuntime : IXMLDOMNode
   {
     [id(187)]
     HRESULT __stdcall uniqueID (
       [in] dispinterface IXMLDOMNode *pNode,
       [out retval] long *pID
     );
     HRESULT __stdcall depth (
       [in] dispinterface IXMLDOMNode *pNode,
       [out retval] long *pDepth
     );
     HRESULT __stdcall childNumber (
       [in] dispinterface IXMLDOMNode *pNode,
       [out retval] long *pNumber
     );
     HRESULT __stdcall ancestorChildNumber (
       [in] BSTR bstrNodeName,
       [in] dispinterface IXMLDOMNode *pNode,
       [out retval] long *pNumber
     );
     HRESULT __stdcall absoluteChildNumber (
       [in] dispinterface IXMLDOMNode *pNode,
       [out retval] long *pNumber
     );
     HRESULT __stdcall formatIndex (
       [in] long lIndex,
       [in] BSTR bstrFormat,
       [out retval] BSTR *pbstrFormattedString
     );
     HRESULT __stdcall formatNumber (
       [in] double dblNumber,
       [in] BSTR bstrFormat,
       [out retval] BSTR *pbstrFormattedString
     );
     HRESULT __stdcall formatDate (
       [in] VARIANT varDate,
       [in] BSTR bstrFormat,
       [in opt] VARIANT varDestLocale,
       [out retval] BSTR *pbstrFormattedString
     );
     HRESULT __stdcall formatTime (
       [in] VARIANT varTime,
       [in] BSTR bstrFormat,
       [in opt] VARIANT varDestLocale,
       [out retval] BSTR *pbstrFormattedString
     );
   };
   [
     uuid(2933BF93-7B36-11D2-B20E-00C04F983E60),
     helpstring("IXSLTemplate Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXSLTemplate : IDispatch
   {
     [id(2), propputref]
     HRESULT __stdcall stylesheet (
       [in] dispinterface IXMLDOMNode *argNo1
     );
     [id(2), propget]
     HRESULT __stdcall stylesheet (
       [out retval] dispinterface IXMLDOMNode **stylesheet
     );
     HRESULT __stdcall createProcessor (
       [out retval] dispinterface IXSLProcessor **ppProcessor
     );
   };
   [
     uuid(2933BF92-7B36-11D2-B20E-00C04F983E60),
     helpstring("IXSLProcessor Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXSLProcessor : IDispatch
   {
     [id(2), propput]
     HRESULT __stdcall input (
       [in] VARIANT argNo1
     );
     [id(2), propget]
     HRESULT __stdcall input (
       [out retval] VARIANT *pVar
     );
     [propget]
     HRESULT __stdcall ownerTemplate (
       [out retval] dispinterface IXSLTemplate **ppTemplate
     );
     HRESULT __stdcall setStartMode (
       [in] BSTR mode,
       [in opt] BSTR namespaceURI = L""
     );
     [propget]
     HRESULT __stdcall startMode (
       [out retval] BSTR *mode
     );
     [propget]
     HRESULT __stdcall startModeURI (
       [out retval] BSTR *namespaceURI
     );
     [propput]
     HRESULT __stdcall output (
       [in] VARIANT argNo1
     );
     [id(7), propget]
     HRESULT __stdcall output (
       [out retval] VARIANT *pOutput
     );
     HRESULT __stdcall transform (
       [out retval] WINBOOL *pDone
     );
     HRESULT __stdcall reset (void);
     [propget]
     HRESULT __stdcall readyState (
       [out retval] long *pReadyState
     );
     HRESULT __stdcall addParameter (
       [in] BSTR baseName,
       [in] VARIANT parameter,
       [in opt] BSTR namespaceURI = L""
     );
     HRESULT __stdcall addObject (
       [in] IDispatch * obj,
       [in] BSTR namespaceURI
     );
     [propget]
     HRESULT __stdcall stylesheet (
       [out retval] dispinterface IXMLDOMNode **stylesheet
     );
   };
   [
     uuid(8C033CAA-6CD6-4F73-B728-4531AF74945F),
     helpstring("IVBSAXXMLReader interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXXMLReader : IDispatch
   {
     [id(1282)]
     HRESULT __stdcall getFeature (
       [in] BSTR strName,
       [out retval] WINBOOL *fValue
     );
     HRESULT __stdcall putFeature (
       [in] BSTR strName,
       [in] WINBOOL fValue
     );
     HRESULT __stdcall getProperty (
       [in] BSTR strName,
       [out retval] VARIANT *varValue
     );
     HRESULT __stdcall putProperty (
       [in] BSTR strName,
       [in] VARIANT varValue
     );
     [propget]
     HRESULT __stdcall entityResolver (
       [out retval] dispinterface IVBSAXEntityResolver **oResolver
     );
     [id(1286), propputref]
     HRESULT __stdcall entityResolver (
       [in] dispinterface IVBSAXEntityResolver *argNo1
     );
     [propget]
     HRESULT __stdcall contentHandler (
       [out retval] dispinterface IVBSAXContentHandler **oHandler
     );
     [id(1287), propputref]
     HRESULT __stdcall contentHandler (
       [in] dispinterface IVBSAXContentHandler *argNo1
     );
     [propget]
     HRESULT __stdcall dtdHandler (
       [out retval] dispinterface IVBSAXDTDHandler **oHandler
     );
     [id(1288), propputref]
     HRESULT __stdcall dtdHandler (
       [in] dispinterface IVBSAXDTDHandler *argNo1
     );
     [propget]
     HRESULT __stdcall errorHandler (
       [out retval] dispinterface IVBSAXErrorHandler **oHandler
     );
     [id(1289), propputref]
     HRESULT __stdcall errorHandler (
       [in] dispinterface IVBSAXErrorHandler *argNo1
     );
     [propget]
     HRESULT __stdcall baseURL (
       [out retval] BSTR *strBaseURL
     );
     [id(1290), propput]
     HRESULT __stdcall baseURL (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall secureBaseURL (
       [out retval] BSTR *strSecureBaseURL
     );
     [id(1291), propput]
     HRESULT __stdcall secureBaseURL (
       [in] BSTR argNo1
     );
     HRESULT __stdcall parse (
       [in opt] VARIANT varInput
     );
     HRESULT __stdcall parseURL (
       [in] BSTR strURL
     );
   };
   [
     uuid(0C05D096-F45B-4ACA-AD1A-AA0BC25518DC),
     helpstring("IVBSAXEntityResolver interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXEntityResolver : IDispatch
   {
     [id(1319)]
     HRESULT __stdcall resolveEntity (
       [in out] BSTR *strPublicId,
       [in out] BSTR *strSystemId,
       [out retval] VARIANT *varInput
     );
   };
   [
     uuid(2ED7290A-4DD5-4B46-BB26-4E4155E77FAA),
     helpstring("IVBSAXContentHandler interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXContentHandler : IDispatch
   {
     [id(1322), propputref]
     HRESULT __stdcall documentLocator (
       [in] dispinterface IVBSAXLocator *argNo1
     );
     HRESULT __stdcall startDocument (void);
     HRESULT __stdcall endDocument (void);
     HRESULT __stdcall startPrefixMapping (
       [in out] BSTR *strPrefix,
       [in out] BSTR *strURI
     );
     HRESULT __stdcall endPrefixMapping (
       [in out] BSTR *strPrefix
     );
     HRESULT __stdcall startElement (
       [in out] BSTR *strNamespaceURI,
       [in out] BSTR *strLocalName,
       [in out] BSTR *strQName,
       [in] dispinterface IVBSAXAttributes *oAttributes
     );
     HRESULT __stdcall endElement (
       [in out] BSTR *strNamespaceURI,
       [in out] BSTR *strLocalName,
       [in out] BSTR *strQName
     );
     HRESULT __stdcall characters (
       [in out] BSTR *strChars
     );
     HRESULT __stdcall ignorableWhitespace (
       [in out] BSTR *strChars
     );
     HRESULT __stdcall processingInstruction (
       [in out] BSTR *strTarget,
       [in out] BSTR *strData
     );
     HRESULT __stdcall skippedEntity (
       [in out] BSTR *strName
     );
   };
   [
     uuid(796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288),
     helpstring("IVBSAXLocator interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXLocator : IDispatch
   {
     [id(1313), propget]
     HRESULT __stdcall columnNumber (
       [out retval] int *nColumn
     );
     [propget]
     HRESULT __stdcall lineNumber (
       [out retval] int *nLine
     );
     [propget]
     HRESULT __stdcall publicId (
       [out retval] BSTR *strPublicId
     );
     [propget]
     HRESULT __stdcall systemId (
       [out retval] BSTR *strSystemId
     );
   };
   [
     uuid(10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0),
     helpstring("IVBSAXAttributes interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXAttributes : IDispatch
   {
     [id(1344), propget]
     HRESULT __stdcall length (
       [out retval] int *nLength
     );
     HRESULT __stdcall getURI (
       [in] int nIndex,
       [out retval] BSTR *strURI
     );
     HRESULT __stdcall getLocalName (
       [in] int nIndex,
       [out retval] BSTR *strLocalName
     );
     HRESULT __stdcall getQName (
       [in] int nIndex,
       [out retval] BSTR *strQName
     );
     HRESULT __stdcall getIndexFromName (
       [in] BSTR strURI,
       [in] BSTR strLocalName,
       [out retval] int *nIndex
     );
     HRESULT __stdcall getIndexFromQName (
       [in] BSTR strQName,
       [out retval] int *nIndex
     );
     HRESULT __stdcall getType (
       [in] int nIndex,
       [out retval] BSTR *strType
     );
     HRESULT __stdcall getTypeFromName (
       [in] BSTR strURI,
       [in] BSTR strLocalName,
       [out retval] BSTR *strType
     );
     HRESULT __stdcall getTypeFromQName (
       [in] BSTR strQName,
       [out retval] BSTR *strType
     );
     HRESULT __stdcall getValue (
       [in] int nIndex,
       [out retval] BSTR *strValue
     );
     HRESULT __stdcall getValueFromName (
       [in] BSTR strURI,
       [in] BSTR strLocalName,
       [out retval] BSTR *strValue
     );
     HRESULT __stdcall getValueFromQName (
       [in] BSTR strQName,
       [out retval] BSTR *strValue
     );
   };
   [
     uuid(24FB3297-302D-4620-BA39-3A732D850558),
     helpstring("IVBSAXDTDHandler interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXDTDHandler : IDispatch
   {
     [id(1335)]
     HRESULT __stdcall notationDecl (
       [in out] BSTR *strName,
       [in out] BSTR *strPublicId,
       [in out] BSTR *strSystemId
     );
     HRESULT __stdcall unparsedEntityDecl (
       [in out] BSTR *strName,
       [in out] BSTR *strPublicId,
       [in out] BSTR *strSystemId,
       [in out] BSTR *strNotationName
     );
   };
   [
     uuid(D963D3FE-173C-4862-9095-B92F66995F52),
     helpstring("IVBSAXErrorHandler interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXErrorHandler : IDispatch
   {
     [id(1339)]
     HRESULT __stdcall error (
       [in] dispinterface IVBSAXLocator *oLocator,
       [in out] BSTR *strErrorMessage,
       [in] long nErrorCode
     );
     HRESULT __stdcall fatalError (
       [in] dispinterface IVBSAXLocator *oLocator,
       [in out] BSTR *strErrorMessage,
       [in] long nErrorCode
     );
     HRESULT __stdcall ignorableWarning (
       [in] dispinterface IVBSAXLocator *oLocator,
       [in out] BSTR *strErrorMessage,
       [in] long nErrorCode
     );
   };
   [
     uuid(1299EB1B-5B88-433E-82DE-82CA75AD4E04),
     helpstring("IVBSAXXMLFilter interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXXMLFilter : IDispatch
   {
     [id(1309), propget]
     HRESULT __stdcall parent (
       [out retval] dispinterface IVBSAXXMLReader **oReader
     );
     [id(1309), propputref]
     HRESULT __stdcall parent (
       [in] dispinterface IVBSAXXMLReader *argNo1
     );
   };
   [
     uuid(032AAC35-8C0E-4D9D-979F-E3B702935576),
     helpstring("IVBSAXLexicalHandler interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXLexicalHandler : IDispatch
   {
     [id(1358)]
     HRESULT __stdcall startDTD (
       [in out] BSTR *strName,
       [in out] BSTR *strPublicId,
       [in out] BSTR *strSystemId
     );
     HRESULT __stdcall endDTD (void);
     HRESULT __stdcall startEntity (
       [in out] BSTR *strName
     );
     HRESULT __stdcall endEntity (
       [in out] BSTR *strName
     );
     HRESULT __stdcall startCDATA (void);
     HRESULT __stdcall endCDATA (void);
     HRESULT __stdcall comment (
       [in out] BSTR *strChars
     );
   };
   [
     uuid(E8917260-7579-4BE1-B5DD-7AFBFA6F077B),
     helpstring("IVBSAXDeclHandler interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBSAXDeclHandler : IDispatch
   {
     [id(1367)]
     HRESULT __stdcall elementDecl (
       [in out] BSTR *strName,
       [in out] BSTR *strModel
     );
     HRESULT __stdcall attributeDecl (
       [in out] BSTR *strElementName,
       [in out] BSTR *strAttributeName,
       [in out] BSTR *strType,
       [in out] BSTR *strValueDefault,
       [in out] BSTR *strValue
     );
     HRESULT __stdcall internalEntityDecl (
       [in out] BSTR *strName,
       [in out] BSTR *strValue
     );
     HRESULT __stdcall externalEntityDecl (
       [in out] BSTR *strName,
       [in out] BSTR *strPublicId,
       [in out] BSTR *strSystemId
     );
   };
   [
     uuid(4D7FF4BA-1565-4EA8-94E1-6E724A46F98D),
     helpstring("IMXWriter interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IMXWriter : IDispatch
   {
     [id(1385), propput]
     HRESULT __stdcall output (
       [in] VARIANT argNo1
     );
     [id(1385), propget]
     HRESULT __stdcall output (
       [out retval] VARIANT *varDestination
     );
     [id(1387), propput]
     HRESULT __stdcall encoding (
       [in] BSTR argNo1
     );
     [id(1387), propget]
     HRESULT __stdcall encoding (
       [out retval] BSTR *strEncoding
     );
     [propput]
     HRESULT __stdcall byteOrderMark (
       [in] WINBOOL argNo1
     );
     [id(1388), propget]
     HRESULT __stdcall byteOrderMark (
       [out retval] WINBOOL *fWriteByteOrderMark
     );
     [propput]
     HRESULT __stdcall indent (
       [in] WINBOOL argNo1
     );
     [id(1389), propget]
     HRESULT __stdcall indent (
       [out retval] WINBOOL *fIndentMode
     );
     [propput]
     HRESULT __stdcall standalone (
       [in] WINBOOL argNo1
     );
     [id(1390), propget]
     HRESULT __stdcall standalone (
       [out retval] WINBOOL *fValue
     );
     [propput]
     HRESULT __stdcall omitXMLDeclaration (
       [in] WINBOOL argNo1
     );
     [id(1391), propget]
     HRESULT __stdcall omitXMLDeclaration (
       [out retval] WINBOOL *fValue
     );
     [propput]
     HRESULT __stdcall version (
       [in] BSTR argNo1
     );
     [id(1392), propget]
     HRESULT __stdcall version (
       [out retval] BSTR *strVersion
     );
     [propput]
     HRESULT __stdcall disableOutputEscaping (
       [in] WINBOOL argNo1
     );
     [id(1393), propget]
     HRESULT __stdcall disableOutputEscaping (
       [out retval] WINBOOL *fValue
     );
     HRESULT __stdcall flush (void);
   };
   [
     uuid(F10D27CC-3EC0-415C-8ED8-77AB1C5E7262),
     helpstring("IMXAttributes interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IMXAttributes : IDispatch
   {
     [id(1373)]
     HRESULT __stdcall addAttribute (
       [in] BSTR strURI,
       [in] BSTR strLocalName,
       [in] BSTR strQName,
       [in] BSTR strType,
       [in] BSTR strValue
     );
     [id(1383)]
     HRESULT __stdcall addAttributeFromIndex (
       [in] VARIANT varAtts,
       [in] int nIndex
     );
     [id(1374)]
     HRESULT __stdcall clear (void);
     HRESULT __stdcall removeAttribute (
       [in] int nIndex
     );
     HRESULT __stdcall setAttribute (
       [in] int nIndex,
       [in] BSTR strURI,
       [in] BSTR strLocalName,
       [in] BSTR strQName,
       [in] BSTR strType,
       [in] BSTR strValue
     );
     HRESULT __stdcall setAttributes (
       [in] VARIANT varAtts
     );
     HRESULT __stdcall setLocalName (
       [in] int nIndex,
       [in] BSTR strLocalName
     );
     HRESULT __stdcall setQName (
       [in] int nIndex,
       [in] BSTR strQName
     );
     HRESULT __stdcall setType (
       [in] int nIndex,
       [in] BSTR strType
     );
     HRESULT __stdcall setURI (
       [in] int nIndex,
       [in] BSTR strURI
     );
     HRESULT __stdcall setValue (
       [in] int nIndex,
       [in] BSTR strValue
     );
   };
   [
     uuid(808F4E35-8D5A-4FBE-8466-33A41279ED30),
     helpstring("IMXReaderControl interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IMXReaderControl : IDispatch
   {
     [id(1398)]
     HRESULT __stdcall abort (void);
     HRESULT __stdcall resume (void);
     HRESULT __stdcall suspend (void);
   };
   [
     uuid(FA4BB38C-FAF9-4CCA-9302-D1DD0FE520DB),
     helpstring("IMXSchemaDeclHandler interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IMXSchemaDeclHandler : IDispatch
   {
     [id(1403)]
     HRESULT __stdcall schemaElementDecl (
       [in] dispinterface ISchemaElement *oSchemaElement
     );
   };
   [
     uuid(50EA08B7-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Element"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaElement : ISchemaParticle
   {
     [id(1476), propget]
     HRESULT __stdcall type (
       [out retval] dispinterface ISchemaType **type
     );
     [id(1469), propget]
     HRESULT __stdcall scope (
       [out retval] dispinterface ISchemaComplexType **scope
     );
     [id(1431), propget]
     HRESULT __stdcall defaultValue (
       [out retval] BSTR *defaultValue
     );
     [id(1438), propget]
     HRESULT __stdcall fixedValue (
       [out retval] BSTR *fixedValue
     );
     [id(1443), propget]
     HRESULT __stdcall isNillable (
       [out retval] WINBOOL *nillable
     );
     [id(1441), propget]
     HRESULT __stdcall identityConstraints (
       [out retval] dispinterface ISchemaItemCollection **constraints
     );
     [id(1471), propget]
     HRESULT __stdcall substitutionGroup (
       [out retval] dispinterface ISchemaElement **element
     );
     [propget]
     HRESULT __stdcall substitutionGroupExclusions (
       [out retval] SCHEMADERIVATIONMETHOD *exclusions
     );
     [id(1433), propget]
     HRESULT __stdcall disallowedSubstitutions (
       [out retval] SCHEMADERIVATIONMETHOD *disallowed
     );
     [id(1442), propget]
     HRESULT __stdcall isAbstract (
       [out retval] WINBOOL *abstract
     );
     [id(1444), propget]
     HRESULT __stdcall isReference (
       [out retval] WINBOOL *reference
     );
   };
   [
     uuid(50EA08B5-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Particle"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaParticle : ISchemaItem
   {
     [id(1455), propget]
     HRESULT __stdcall minOccurs (
       [out retval] VARIANT *minOccurs
     );
     [id(1451), propget]
     HRESULT __stdcall maxOccurs (
       [out retval] VARIANT *maxOccurs
     );
   };
   [
     uuid(50EA08B3-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Item"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaItem : IDispatch
   {
     [id(1457), propget]
     HRESULT __stdcall name (
       [out retval] BSTR *name
     );
     [id(1459), propget]
     HRESULT __stdcall namespaceURI (
       [out retval] BSTR *namespaceURI
     );
     [id(1467), propget]
     HRESULT __stdcall schema (
       [out retval] dispinterface ISchema **schema
     );
     [id(1440), propget]
     HRESULT __stdcall id (
       [out retval] BSTR *id
     );
     [id(1446), propget]
     HRESULT __stdcall itemType (
       [out retval] SOMITEMTYPE *itemType
     );
     [id(1478), propget]
     HRESULT __stdcall unhandledAttributes (
       [out retval] dispinterface IVBSAXAttributes **attributes
     );
     [id(1483)]
     HRESULT __stdcall writeAnnotation (
       [in] IUnknown * annotationSink,
       [out retval] WINBOOL *isWritten
     );
   };
   [
     uuid(50EA08B4-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchema : ISchemaItem
   {
     [id(1474), propget]
     HRESULT __stdcall targetNamespace (
       [out retval] BSTR *targetNamespace
     );
     [id(1481), propget]
     HRESULT __stdcall version (
       [out retval] BSTR *version
     );
     [id(1477), propget]
     HRESULT __stdcall types (
       [out retval] dispinterface ISchemaItemCollection **types
     );
     [id(1434), propget]
     HRESULT __stdcall elements (
       [out retval] dispinterface ISchemaItemCollection **elements
     );
     [id(1427), propget]
     HRESULT __stdcall attributes (
       [out retval] dispinterface ISchemaItemCollection **attributes
     );
     [id(1426), propget]
     HRESULT __stdcall attributeGroups (
       [out retval] dispinterface ISchemaItemCollection **attributeGroups
     );
     [id(1456), propget]
     HRESULT __stdcall modelGroups (
       [out retval] dispinterface ISchemaItemCollection **modelGroups
     );
     [id(1460), propget]
     HRESULT __stdcall notations (
       [out retval] dispinterface ISchemaItemCollection **notations
     );
     [id(1468), propget]
     HRESULT __stdcall schemaLocations (
       [out retval] dispinterface ISchemaStringCollection **schemaLocations
     );
   };
   [
     uuid(50EA08B2-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Item Collection"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaItemCollection : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] dispinterface ISchemaItem **item
     );
     [id(1423)]
     HRESULT __stdcall itemByName (
       [in] BSTR name,
       [out retval] dispinterface ISchemaItem **item
     );
     HRESULT __stdcall itemByQName (
       [in] BSTR name,
       [in] BSTR namespaceURI,
       [out retval] dispinterface ISchemaItem **item
     );
     [id(1447), propget]
     HRESULT __stdcall length (
       [out retval] long *length
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(50EA08B1-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema String Collection"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaStringCollection : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] BSTR *bstr
     );
     [id(1447), propget]
     HRESULT __stdcall length (
       [out retval] long *length
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(50EA08B8-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Type"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaType : ISchemaItem
   {
     [id(1428), propget]
     HRESULT __stdcall baseTypes (
       [out retval] dispinterface ISchemaItemCollection **baseTypes
     );
     [id(1437), propget]
     HRESULT __stdcall final (
       [out retval] SCHEMADERIVATIONMETHOD *final
     );
     [id(1480), propget]
     HRESULT __stdcall variety (
       [out retval] SCHEMATYPEVARIETY *variety
     );
     [id(1432), propget]
     HRESULT __stdcall derivedBy (
       [out retval] SCHEMADERIVATIONMETHOD *derivedBy
     );
     [id(1445)]
     HRESULT __stdcall isValid (
       [in] BSTR data,
       [out retval] WINBOOL *valid
     );
     [id(1452), propget]
     HRESULT __stdcall minExclusive (
       [out retval] BSTR *minExclusive
     );
     [propget]
     HRESULT __stdcall minInclusive (
       [out retval] BSTR *minInclusive
     );
     [id(1448), propget]
     HRESULT __stdcall maxExclusive (
       [out retval] BSTR *maxExclusive
     );
     [propget]
     HRESULT __stdcall maxInclusive (
       [out retval] BSTR *maxInclusive
     );
     [id(1475), propget]
     HRESULT __stdcall totalDigits (
       [out retval] VARIANT *totalDigits
     );
     [id(1439), propget]
     HRESULT __stdcall fractionDigits (
       [out retval] VARIANT *fractionDigits
     );
     [id(1447), propget]
     HRESULT __stdcall length (
       [out retval] VARIANT *length
     );
     [id(1454), propget]
     HRESULT __stdcall minLength (
       [out retval] VARIANT *minLength
     );
     [id(1450), propget]
     HRESULT __stdcall maxLength (
       [out retval] VARIANT *maxLength
     );
     [id(1435), propget]
     HRESULT __stdcall enumeration (
       [out retval] dispinterface ISchemaStringCollection **enumeration
     );
     [id(1482), propget]
     HRESULT __stdcall whitespace (
       [out retval] SCHEMAWHITESPACE *whitespace
     );
     [id(1462), propget]
     HRESULT __stdcall patterns (
       [out retval] dispinterface ISchemaStringCollection **patterns
     );
   };
   [
     uuid(50EA08B9-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Complex Type"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaComplexType : ISchemaType
   {
     [id(1442), propget]
     HRESULT __stdcall isAbstract (
       [out retval] WINBOOL *abstract
     );
     [id(1425), propget]
     HRESULT __stdcall anyAttribute (
       [out retval] dispinterface ISchemaAny **anyAttribute
     );
     [id(1427), propget]
     HRESULT __stdcall attributes (
       [out retval] dispinterface ISchemaItemCollection **attributes
     );
     [id(1430), propget]
     HRESULT __stdcall contentType (
       [out retval] SCHEMACONTENTTYPE *contentType
     );
     [id(1429), propget]
     HRESULT __stdcall contentModel (
       [out retval] dispinterface ISchemaModelGroup **contentModel
     );
     [id(1464), propget]
     HRESULT __stdcall prohibitedSubstitutions (
       [out retval] SCHEMADERIVATIONMETHOD *prohibited
     );
   };
   [
     uuid(50EA08BC-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Any"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaAny : ISchemaParticle
   {
     [id(1458), propget]
     HRESULT __stdcall namespaces (
       [out retval] dispinterface ISchemaStringCollection **namespaces
     );
     [id(1463), propget]
     HRESULT __stdcall processContents (
       [out retval] SCHEMAPROCESSCONTENTS *processContents
     );
   };
   [
     uuid(50EA08BB-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Type"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaModelGroup : ISchemaParticle
   {
     [id(1461), propget]
     HRESULT __stdcall particles (
       [out retval] dispinterface ISchemaItemCollection **particles
     );
   };
   [
     uuid(C90352F7-643C-4FBC-BB23-E996EB2D51FD),
     helpstring("IMXXMLFilter interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IMXXMLFilter : IDispatch
   {
     [id(1423)]
     HRESULT __stdcall getFeature (
       [in] BSTR strName,
       [out retval] WINBOOL *fValue
     );
     [id(1425)]
     HRESULT __stdcall putFeature (
       [in] BSTR strName,
       [in] WINBOOL fValue
     );
     [id(1424)]
     HRESULT __stdcall getProperty (
       [in] BSTR strName,
       [out retval] VARIANT *varValue
     );
     [id(1426)]
     HRESULT __stdcall putProperty (
       [in] BSTR strName,
       [in] VARIANT varValue
     );
     [id(1421), propget]
     HRESULT __stdcall entityResolver (
       [out retval] IUnknown **oResolver
     );
     [id(1421), propputref]
     HRESULT __stdcall entityResolver (
       [in] IUnknown * argNo1
     );
     [id(1419), propget]
     HRESULT __stdcall contentHandler (
       [out retval] IUnknown **oHandler
     );
     [id(1419), propputref]
     HRESULT __stdcall contentHandler (
       [in] IUnknown * argNo1
     );
     [propget]
     HRESULT __stdcall dtdHandler (
       [out retval] IUnknown **oHandler
     );
     [id(1420), propputref]
     HRESULT __stdcall dtdHandler (
       [in] IUnknown * argNo1
     );
     [id(1422), propget]
     HRESULT __stdcall errorHandler (
       [out retval] IUnknown **oHandler
     );
     [id(1422), propputref]
     HRESULT __stdcall errorHandler (
       [in] IUnknown * argNo1
     );
   };
   [
     uuid(50EA08B0-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schemas Collection 2"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMSchemaCollection2 : IXMLDOMSchemaCollection
   {
     [id(1419)]
     HRESULT __stdcall validate (void);
     [propput]
     HRESULT __stdcall validateOnLoad (
       [in] WINBOOL argNo1
     );
     [id(1420), propget]
     HRESULT __stdcall validateOnLoad (
       [out retval] WINBOOL *validateOnLoad
     );
     HRESULT __stdcall getSchema (
       [in] BSTR namespaceURI,
       [out retval] dispinterface ISchema **schema
     );
     HRESULT __stdcall getDeclaration (
       [in] dispinterface IXMLDOMNode *node,
       [out retval] dispinterface ISchemaItem **item
     );
   };
   [
     uuid(50EA08B6-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Attribute"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaAttribute : ISchemaItem
   {
     [id(1476), propget]
     HRESULT __stdcall type (
       [out retval] dispinterface ISchemaType **type
     );
     [id(1469), propget]
     HRESULT __stdcall scope (
       [out retval] dispinterface ISchemaComplexType **scope
     );
     [id(1431), propget]
     HRESULT __stdcall defaultValue (
       [out retval] BSTR *defaultValue
     );
     [id(1438), propget]
     HRESULT __stdcall fixedValue (
       [out retval] BSTR *fixedValue
     );
     [id(1479), propget]
     HRESULT __stdcall use (
       [out retval] SCHEMAUSE *use
     );
     [id(1444), propget]
     HRESULT __stdcall isReference (
       [out retval] WINBOOL *reference
     );
   };
   [
     uuid(50EA08BA-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Attribute Group"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaAttributeGroup : ISchemaItem
   {
     [id(1425), propget]
     HRESULT __stdcall anyAttribute (
       [out retval] dispinterface ISchemaAny **anyAttribute
     );
     [id(1427), propget]
     HRESULT __stdcall attributes (
       [out retval] dispinterface ISchemaItemCollection **attributes
     );
   };
   [
     uuid(50EA08BD-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Any"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaIdentityConstraint : ISchemaItem
   {
     [id(1470), propget]
     HRESULT __stdcall selector (
       [out retval] BSTR *selector
     );
     [id(1436), propget]
     HRESULT __stdcall fields (
       [out retval] dispinterface ISchemaStringCollection **fields
     );
     [id(1466), propget]
     HRESULT __stdcall referencedKey (
       [out retval] dispinterface ISchemaIdentityConstraint **key
     );
   };
   [
     uuid(50EA08BE-DD1B-4664-9A50-C2F40F4BD79A),
     helpstring("XML Schema Notation"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface ISchemaNotation : ISchemaItem
   {
     [id(1473), propget]
     HRESULT __stdcall systemIdentifier (
       [out retval] BSTR *uri
     );
     [id(1465), propget]
     HRESULT __stdcall publicIdentifier (
       [out retval] BSTR *uri
     );
   };
   [
     uuid(AA634FC7-5888-44A7-A257-3A47150D3A0E),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLDOMSelection : IXMLDOMNodeList
   {
     [id(81), propget]
     HRESULT __stdcall expr (
       [out retval] BSTR *expression
     );
     [id(81), propput]
     HRESULT __stdcall expr (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall context (
       [out retval] dispinterface IXMLDOMNode **ppNode
     );
     [id(82), propputref]
     HRESULT __stdcall context (
       [in] dispinterface IXMLDOMNode *argNo1
     );
     HRESULT __stdcall peekNode (
       [out retval] dispinterface IXMLDOMNode **ppNode
     );
     HRESULT __stdcall matches (
       [in] dispinterface IXMLDOMNode *pNode,
       [out retval] dispinterface IXMLDOMNode **ppNode
     );
     HRESULT __stdcall removeNext (
       [out retval] dispinterface IXMLDOMNode **ppNode
     );
     HRESULT __stdcall removeAll (void);
     HRESULT __stdcall clone (
       [out retval] dispinterface IXMLDOMSelection **ppNode
     );
     HRESULT __stdcall getProperty (
       [in] BSTR name,
       [out retval] VARIANT *value
     );
     HRESULT __stdcall setProperty (
       [in] BSTR name,
       [in] VARIANT value
     );
   };
   [
     uuid(3EFAA427-272F-11D2-836F-0000F87A7782),
     hidden,
     dispatchable
   ]
   dispinterface XMLDOMDocumentEvents
   {
     [id(198)]
     HRESULT __stdcall ondataavailable (void);
     [id(-609)]
     HRESULT __stdcall onreadystatechange (void);
   };
   [
     uuid(310AFA62-0575-11D2-9CA9-0060B0EC3D39),
     helpstring("DSO Control"),
     hidden,
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IDSOControl : IDispatch
   {
     [id(65537), propget]
     HRESULT __stdcall XMLDocument (
       [out retval] dispinterface IXMLDOMDocument **ppDoc
     );
     [id(65537), propput]
     HRESULT __stdcall XMLDocument (
       [in] dispinterface IXMLDOMDocument *argNo1
     );
     [propget]
     HRESULT __stdcall JavaDSOCompatible (
       [out retval] long *fJavaDSOCompatible
     );
     [id(65538), propput]
     HRESULT __stdcall JavaDSOCompatible (
       [in] long argNo1
     );
     [id(-525), propget]
     HRESULT __stdcall readyState (
       [out retval] long *state
     );
   };
   [
     uuid(ED8C108D-4349-11D2-91A4-00C04F7969E8),
     helpstring("IXMLHTTPRequest Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IXMLHTTPRequest : IDispatch
   {
     [id(1)]
     HRESULT __stdcall open (
       [in] BSTR bstrMethod,
       [in] BSTR bstrUrl,
       [in opt] VARIANT varAsync,
       [in opt] VARIANT bstrUser,
       [in opt] VARIANT bstrPassword
     );
     HRESULT __stdcall setRequestHeader (
       [in] BSTR bstrHeader,
       [in] BSTR bstrValue
     );
     HRESULT __stdcall getResponseHeader (
       [in] BSTR bstrHeader,
       [out retval] BSTR *pbstrValue
     );
     HRESULT __stdcall getAllResponseHeaders (
       [out retval] BSTR *pbstrHeaders
     );
     HRESULT __stdcall send (
       [in opt] VARIANT varBody
     );
     HRESULT __stdcall abort (void);
     [propget]
     HRESULT __stdcall status (
       [out retval] long *plStatus
     );
     [propget]
     HRESULT __stdcall statusText (
       [out retval] BSTR *pbstrStatus
     );
     [propget]
     HRESULT __stdcall responseXML (
       [out retval] IDispatch **ppBody
     );
     [propget]
     HRESULT __stdcall responseText (
       [out retval] BSTR *pbstrBody
     );
     [propget]
     HRESULT __stdcall responseBody (
       [out retval] VARIANT *pvarBody
     );
     [propget]
     HRESULT __stdcall responseStream (
       [out retval] VARIANT *pvarBody
     );
     [propget]
     HRESULT __stdcall readyState (
       [out retval] long *plState
     );
     [propput]
     HRESULT __stdcall onreadystatechange (
       [in] IDispatch * argNo1
     );
   };
   [
     uuid(2E9196BF-13BA-4DD4-91CA-6C571F281495),
     helpstring("IServerXMLHTTPRequest Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IServerXMLHTTPRequest : IXMLHTTPRequest
   {
     [id(15)]
     HRESULT __stdcall setTimeouts (
       [in] long resolveTimeout,
       [in] long connectTimeout,
       [in] long sendTimeout,
       [in] long receiveTimeout
     );
     HRESULT __stdcall waitForResponse (
       [in opt] VARIANT timeoutInSeconds,
       [out retval] WINBOOL *isSuccessful
     );
     HRESULT __stdcall getOption (
       [in] SERVERXMLHTTP_OPTION option,
       [out retval] VARIANT *value
     );
     HRESULT __stdcall setOption (
       [in] SERVERXMLHTTP_OPTION option,
       [in] VARIANT value
     );
   };
   [
     uuid(2E01311B-C322-4B0A-BD77-B90CFDC8DCE7),
     helpstring("IServerXMLHTTPRequest2 Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IServerXMLHTTPRequest2 : IServerXMLHTTPRequest
   {
     [id(19)]
     HRESULT __stdcall setProxy (
       [in] SXH_PROXY_SETTING proxySetting,
       [in opt] VARIANT varProxyServer,
       [in opt] VARIANT varBypassList
     );
     HRESULT __stdcall setProxyCredentials (
       [in] BSTR bstrUserName,
       [in] BSTR bstrPassword
     );
   };
   [
     uuid(C90352F4-643C-4FBC-BB23-E996EB2D51FD),
     helpstring("IMXNamespacePrefixes interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IMXNamespacePrefixes : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall item (
       [in] long index,
       [out retval] BSTR *prefix
     );
     [id(1416), propget]
     HRESULT __stdcall length (
       [out retval] long *length
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _newEnum (
       [out retval] IUnknown **ppUnk
     );
   };
   [
     uuid(C90352F5-643C-4FBC-BB23-E996EB2D51FD),
     helpstring("IVBMXNamespaceManager interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IVBMXNamespaceManager : IDispatch
   {
     [id(1406), propput]
     HRESULT __stdcall allowOverride (
       [in] WINBOOL argNo1
     );
     [id(1406), propget]
     HRESULT __stdcall allowOverride (
       [out retval] WINBOOL *fOverride
     );
     HRESULT __stdcall reset (void);
     HRESULT __stdcall pushContext (void);
     HRESULT __stdcall pushNodeContext (
       [in] dispinterface IXMLDOMNode *contextNode,
       [in opt] WINBOOL fDeep = (BOOL) -1
     );
     HRESULT __stdcall popContext (void);
     HRESULT __stdcall declarePrefix (
       [in] BSTR prefix,
       [in] BSTR namespaceURI
     );
     HRESULT __stdcall getDeclaredPrefixes (
       [out retval] dispinterface IMXNamespacePrefixes **prefixes
     );
     HRESULT __stdcall getPrefixes (
       [in] BSTR namespaceURI,
       [out retval] dispinterface IMXNamespacePrefixes **prefixes
     );
     HRESULT __stdcall getURI (
       [in] BSTR prefix,
       [out retval] VARIANT *uri
     );
     HRESULT __stdcall getURIFromNode (
       [in] BSTR strPrefix,
       [in] dispinterface IXMLDOMNode *contextNode,
       [out retval] VARIANT *uri
     );
   };

};

/* Interface declarations.  */
[
  uuid(A4F96ED0-F829-476E-81C0-CDC7BD2A0802),
  helpstring("ISAXXMLReader interface"),
  hidden
]
interface ISAXXMLReader : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall getFeature (
    [in] USHORT *pwchName,
    [out retval] WINBOOL *pvfValue
  );
  HRESULT __stdcall putFeature (
    [in] USHORT *pwchName,
    [in] WINBOOL vfValue
  );
  HRESULT __stdcall getProperty (
    [in] USHORT *pwchName,
    [out retval] VARIANT *pvarValue
  );
  HRESULT __stdcall putProperty (
    [in] USHORT *pwchName,
    [in] VARIANT varValue
  );
  HRESULT __stdcall getEntityResolver (
    [out retval] interface ISAXEntityResolver **ppResolver
  );
  HRESULT __stdcall putEntityResolver (
    [in] interface ISAXEntityResolver *pResolver
  );
  HRESULT __stdcall getContentHandler (
    [out retval] interface ISAXContentHandler **ppHandler
  );
  HRESULT __stdcall putContentHandler (
    [in] interface ISAXContentHandler *pHandler
  );
  HRESULT __stdcall getDTDHandler (
    [out retval] interface ISAXDTDHandler **ppHandler
  );
  HRESULT __stdcall putDTDHandler (
    [in] interface ISAXDTDHandler *pHandler
  );
  HRESULT __stdcall getErrorHandler (
    [out retval] interface ISAXErrorHandler **ppHandler
  );
  HRESULT __stdcall putErrorHandler (
    [in] interface ISAXErrorHandler *pHandler
  );
  HRESULT __stdcall getBaseURL (
    [out retval] USHORT *ppwchBaseUrl
  );
  HRESULT __stdcall putBaseURL (
    [in] USHORT *pwchBaseUrl
  );
  HRESULT __stdcall getSecureBaseURL (
    [out retval] USHORT *ppwchSecureBaseUrl
  );
  HRESULT __stdcall putSecureBaseURL (
    [in] USHORT *pwchSecureBaseUrl
  );
  HRESULT __stdcall parse (
    [in opt] VARIANT varInput
  );
  HRESULT __stdcall parseURL (
    [in] USHORT *pwchUrl
  );
};
[
  uuid(99BCA7BD-E8C4-4D5F-A0CF-6D907901FF07),
  helpstring("ISAXEntityResolver interface"),
  hidden
]
interface ISAXEntityResolver : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall resolveEntity (
    [in] USHORT *pwchPublicId,
    [in] USHORT *pwchSystemId,
    [out retval] VARIANT *pvarInput
  );
};
[
  uuid(1545CDFA-9E4E-4497-A8A4-2BF7D0112C44),
  helpstring("ISAXContentHandler interface"),
  hidden
]
interface ISAXContentHandler : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall putDocumentLocator (
    [in] interface ISAXLocator *pLocator
  );
  HRESULT __stdcall startDocument (void);
  HRESULT __stdcall endDocument (void);
  HRESULT __stdcall startPrefixMapping (
    [in] USHORT *pwchPrefix,
    [in] int cchPrefix,
    [in] USHORT *pwchUri,
    [in] int cchUri
  );
  HRESULT __stdcall endPrefixMapping (
    [in] USHORT *pwchPrefix,
    [in] int cchPrefix
  );
  HRESULT __stdcall startElement (
    [in] USHORT *pwchNamespaceUri,
    [in] int cchNamespaceUri,
    [in] USHORT *pwchLocalName,
    [in] int cchLocalName,
    [in] USHORT *pwchQName,
    [in] int cchQName,
    [in] interface ISAXAttributes *pAttributes
  );
  HRESULT __stdcall endElement (
    [in] USHORT *pwchNamespaceUri,
    [in] int cchNamespaceUri,
    [in] USHORT *pwchLocalName,
    [in] int cchLocalName,
    [in] USHORT *pwchQName,
    [in] int cchQName
  );
  HRESULT __stdcall characters (
    [in] USHORT *pwchChars,
    [in] int cchChars
  );
  HRESULT __stdcall ignorableWhitespace (
    [in] USHORT *pwchChars,
    [in] int cchChars
  );
  HRESULT __stdcall processingInstruction (
    [in] USHORT *pwchTarget,
    [in] int cchTarget,
    [in] USHORT *pwchData,
    [in] int cchData
  );
  HRESULT __stdcall skippedEntity (
    [in] USHORT *pwchName,
    [in] int cchName
  );
};
[
  uuid(9B7E472A-0DE4-4640-BFF3-84D38A051C31),
  helpstring("ISAXLocator interface"),
  hidden
]
interface ISAXLocator : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall getColumnNumber (
    [out retval] int *pnColumn
  );
  HRESULT __stdcall getLineNumber (
    [out retval] int *pnLine
  );
  HRESULT __stdcall getPublicId (
    [out retval] USHORT *ppwchPublicId
  );
  HRESULT __stdcall getSystemId (
    [out retval] USHORT *ppwchSystemId
  );
};
[
  uuid(F078ABE1-45D2-4832-91EA-4466CE2F25C9),
  helpstring("ISAXAttributes interface"),
  hidden
]
interface ISAXAttributes : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall getLength (
    [out retval] int *pnLength
  );
  HRESULT __stdcall getURI (
    [in] int nIndex,
    [out] USHORT *ppwchUri,
    [out] int *pcchUri
  );
  HRESULT __stdcall getLocalName (
    [in] int nIndex,
    [out] USHORT *ppwchLocalName,
    [out] int *pcchLocalName
  );
  HRESULT __stdcall getQName (
    [in] int nIndex,
    [out] USHORT *ppwchQName,
    [out] int *pcchQName
  );
  HRESULT __stdcall getName (
    [in] int nIndex,
    [out] USHORT *ppwchUri,
    [out] int *pcchUri,
    [out] USHORT *ppwchLocalName,
    [out] int *pcchLocalName,
    [out] USHORT *ppwchQName,
    [out] int *pcchQName
  );
  HRESULT __stdcall getIndexFromName (
    [in] USHORT *pwchUri,
    [in] int cchUri,
    [in] USHORT *pwchLocalName,
    [in] int cchLocalName,
    [out retval] int *pnIndex
  );
  HRESULT __stdcall getIndexFromQName (
    [in] USHORT *pwchQName,
    [in] int cchQName,
    [out retval] int *pnIndex
  );
  HRESULT __stdcall getType (
    [in] int nIndex,
    [out] USHORT *ppwchType,
    [out] int *pcchType
  );
  HRESULT __stdcall getTypeFromName (
    [in] USHORT *pwchUri,
    [in] int cchUri,
    [in] USHORT *pwchLocalName,
    [in] int cchLocalName,
    [out] USHORT *ppwchType,
    [out] int *pcchType
  );
  HRESULT __stdcall getTypeFromQName (
    [in] USHORT *pwchQName,
    [in] int cchQName,
    [out] USHORT *ppwchType,
    [out] int *pcchType
  );
  HRESULT __stdcall getValue (
    [in] int nIndex,
    [out] USHORT *ppwchValue,
    [out] int *pcchValue
  );
  HRESULT __stdcall getValueFromName (
    [in] USHORT *pwchUri,
    [in] int cchUri,
    [in] USHORT *pwchLocalName,
    [in] int cchLocalName,
    [out] USHORT *ppwchValue,
    [out] int *pcchValue
  );
  HRESULT __stdcall getValueFromQName (
    [in] USHORT *pwchQName,
    [in] int cchQName,
    [out] USHORT *ppwchValue,
    [out] int *pcchValue
  );
};
[
  uuid(E15C1BAF-AFB3-4D60-8C36-19A8C45DEFED),
  helpstring("ISAXDTDHandler interface"),
  hidden
]
interface ISAXDTDHandler : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall notationDecl (
    [in] USHORT *pwchName,
    [in] int cchName,
    [in] USHORT *pwchPublicId,
    [in] int cchPublicId,
    [in] USHORT *pwchSystemId,
    [in] int cchSystemId
  );
  HRESULT __stdcall unparsedEntityDecl (
    [in] USHORT *pwchName,
    [in] int cchName,
    [in] USHORT *pwchPublicId,
    [in] int cchPublicId,
    [in] USHORT *pwchSystemId,
    [in] int cchSystemId,
    [in] USHORT *pwchNotationName,
    [in] int cchNotationName
  );
};
[
  uuid(A60511C4-CCF5-479E-98A3-DC8DC545B7D0),
  helpstring("ISAXErrorHandler interface"),
  hidden
]
interface ISAXErrorHandler : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall error (
    [in] interface ISAXLocator *pLocator,
    [in] USHORT *pwchErrorMessage,
    [in] HRESULT hrErrorCode
  );
  HRESULT __stdcall fatalError (
    [in] interface ISAXLocator *pLocator,
    [in] USHORT *pwchErrorMessage,
    [in] HRESULT hrErrorCode
  );
  HRESULT __stdcall ignorableWarning (
    [in] interface ISAXLocator *pLocator,
    [in] USHORT *pwchErrorMessage,
    [in] HRESULT hrErrorCode
  );
};
[
  uuid(70409222-CA09-4475-ACB8-40312FE8D145),
  helpstring("ISAXXMLFilter interface"),
  hidden
]
interface ISAXXMLFilter : ISAXXMLReader
{
  [id(1610743808)]
  HRESULT __stdcall getParent (
    [out retval] interface ISAXXMLReader **ppReader
  );
  HRESULT __stdcall putParent (
    [in] interface ISAXXMLReader *pReader
  );
};
[
  uuid(7F85D5F5-47A8-4497-BDA5-84BA04819EA6),
  helpstring("ISAXLexicalHandler interface"),
  hidden
]
interface ISAXLexicalHandler : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall startDTD (
    [in] USHORT *pwchName,
    [in] int cchName,
    [in] USHORT *pwchPublicId,
    [in] int cchPublicId,
    [in] USHORT *pwchSystemId,
    [in] int cchSystemId
  );
  HRESULT __stdcall endDTD (void);
  HRESULT __stdcall startEntity (
    [in] USHORT *pwchName,
    [in] int cchName
  );
  HRESULT __stdcall endEntity (
    [in] USHORT *pwchName,
    [in] int cchName
  );
  HRESULT __stdcall startCDATA (void);
  HRESULT __stdcall endCDATA (void);
  HRESULT __stdcall comment (
    [in] USHORT *pwchChars,
    [in] int cchChars
  );
};
[
  uuid(862629AC-771A-47B2-8337-4E6843C1BE90),
  helpstring("ISAXDeclHandler interface"),
  hidden
]
interface ISAXDeclHandler : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall elementDecl (
    [in] USHORT *pwchName,
    [in] int cchName,
    [in] USHORT *pwchModel,
    [in] int cchModel
  );
  HRESULT __stdcall attributeDecl (
    [in] USHORT *pwchElementName,
    [in] int cchElementName,
    [in] USHORT *pwchAttributeName,
    [in] int cchAttributeName,
    [in] USHORT *pwchType,
    [in] int cchType,
    [in] USHORT *pwchValueDefault,
    [in] int cchValueDefault,
    [in] USHORT *pwchValue,
    [in] int cchValue
  );
  HRESULT __stdcall internalEntityDecl (
    [in] USHORT *pwchName,
    [in] int cchName,
    [in] USHORT *pwchValue,
    [in] int cchValue
  );
  HRESULT __stdcall externalEntityDecl (
    [in] USHORT *pwchName,
    [in] int cchName,
    [in] USHORT *pwchPublicId,
    [in] int cchPublicId,
    [in] USHORT *pwchSystemId,
    [in] int cchSystemId
  );
};
[
  uuid(C90352F6-643C-4FBC-BB23-E996EB2D51FD),
  helpstring("IMXNamespaceManager interface"),
  hidden
]
interface IMXNamespaceManager : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall putAllowOverride (
    [in] WINBOOL fOverride
  );
  HRESULT __stdcall getAllowOverride (
    [out retval] WINBOOL *fOverride
  );
  HRESULT __stdcall reset (void);
  HRESULT __stdcall pushContext (void);
  HRESULT __stdcall pushNodeContext (
    [in] dispinterface IXMLDOMNode *contextNode,
    [in] WINBOOL fDeep
  );
  HRESULT __stdcall popContext (void);
  HRESULT __stdcall declarePrefix (
    [in] USHORT *prefix,
    [in] USHORT *namespaceURI
  );
  HRESULT __stdcall getDeclaredPrefix (
    [in] long nIndex,
    [in out] USHORT *pwchPrefix,
    [in out] int *pcchPrefix
  );
  HRESULT __stdcall getPrefix (
    [in] USHORT *pwszNamespaceURI,
    [in] long nIndex,
    [in out] USHORT *pwchPrefix,
    [in out] int *pcchPrefix
  );
  HRESULT __stdcall getURI (
    [in] USHORT *pwchPrefix,
    [in] dispinterface IXMLDOMNode *pContextNode,
    [in out] USHORT *pwchUri,
    [in out] int *pcchUri
  );
};

