/* Automated generated idl file <jsglobal>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Union record forward declarations.  */
dispinterface GlobalObj;
dispinterface DateObj;
dispinterface MathObj;
dispinterface NumberObj;
dispinterface RegExpObj;
dispinterface StringObj;
dispinterface ArrayInstance;
dispinterface FunctionInstance;
dispinterface StringInstance;
dispinterface BoolInstance;
dispinterface NumberInstance;
dispinterface ObjectInstance;
dispinterface DateInstance;
dispinterface RegExpInstance;
dispinterface ErrorInstance;
dispinterface EvalErrorInstance;
dispinterface RangeErrorInstance;
dispinterface ReferenceErrorInstance;
dispinterface SyntaxErrorInstance;
dispinterface TypeErrorInstance;
dispinterface URIErrorInstance;

[
  uuid(3EEF9759-35FC-11D1-8CE4-00C04FC2B085),
  version(1.0),
  helpstring("Microsoft JScript Globals")
]
library jsglobal
{
  importlib("stdole2.tlb");

   /* Dispatch interface declarations.  */
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B086),
     dispatchable
   ]
   dispinterface GlobalObj
   {
     [id(2)]
     VARIANT __stdcall Array (void);
     VARIANT __stdcall Boolean (void);
     VARIANT __stdcall Date (void);
     VARIANT __stdcall Function (void);
     VARIANT __stdcall Number (void);
     VARIANT __stdcall Object (void);
     VARIANT __stdcall String (void);
     VARIANT __stdcall RegExp (void);
     VARIANT __stdcall ActiveXObject (void);
     VARIANT __stdcall VBArray (void);
     VARIANT __stdcall Enumerator (void);
     VARIANT __stdcall escape (
       VARIANT String
     );
     VARIANT __stdcall eval (
       VARIANT x
     );
     VARIANT __stdcall isNaN (
       VARIANT Number
     );
     VARIANT __stdcall isFinite (
       VARIANT Number
     );
     VARIANT __stdcall parseInt (
       VARIANT String,
       VARIANT radix
     );
     VARIANT __stdcall parseFloat (
       VARIANT String
     );
     VARIANT __stdcall unescape (
       VARIANT String
     );
     VARIANT __stdcall GetObject (
       [opt] VARIANT path,
       [opt] VARIANT classname
     );
     VARIANT __stdcall ScriptEngine (void);
     VARIANT __stdcall ScriptEngineMajorVersion (void);
     VARIANT __stdcall ScriptEngineMinorVersion (void);
     VARIANT __stdcall ScriptEngineBuildVersion (void);
     VARIANT __stdcall CollectGarbage (void);
     VARIANT __stdcall Math (void);
     [id(0), readonly]
     VARIANT NaN;
     [readonly]
     VARIANT Infinity;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B087),
     dispatchable
   ]
   dispinterface DateObj
   {
     [id(100)]
     VARIANT __stdcall parse (
       VARIANT String
     );
     VARIANT __stdcall UTC (
       VARIANT year,
       [opt] VARIANT month,
       [opt] VARIANT Date,
       [opt] VARIANT hours,
       [opt] VARIANT minutes,
       [opt] VARIANT seconds,
       [opt] VARIANT ms
     );
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B088),
     dispatchable
   ]
   dispinterface MathObj
   {
     [id(208)]
     VARIANT __stdcall abs (
       VARIANT x
     );
     VARIANT __stdcall acos (
       VARIANT x
     );
     VARIANT __stdcall asin (
       VARIANT x
     );
     VARIANT __stdcall atan (
       VARIANT x
     );
     VARIANT __stdcall atan2 (
       VARIANT x,
       VARIANT y
     );
     VARIANT __stdcall ceil (
       VARIANT x
     );
     VARIANT __stdcall cos (
       VARIANT x
     );
     VARIANT __stdcall exp (
       VARIANT x
     );
     VARIANT __stdcall floor (
       VARIANT x
     );
     VARIANT __stdcall log (
       VARIANT x
     );
     VARIANT __stdcall max (
       VARIANT x,
       VARIANT y
     );
     VARIANT __stdcall min (
       VARIANT x,
       VARIANT y
     );
     VARIANT __stdcall pow (
       VARIANT x,
       VARIANT y
     );
     VARIANT __stdcall random (void);
     VARIANT __stdcall round (
       VARIANT x
     );
     VARIANT __stdcall sin (
       VARIANT x
     );
     VARIANT __stdcall sqrt (
       VARIANT x
     );
     VARIANT __stdcall tan (
       VARIANT x
     );
     [id(200), readonly]
     VARIANT E;
     [readonly]
     VARIANT LOG2E;
     [readonly]
     VARIANT LOG10E;
     [readonly]
     VARIANT LN2;
     [readonly]
     VARIANT LN10;
     [readonly]
     VARIANT PI;
     [readonly]
     VARIANT SQRT2;
     [readonly]
     VARIANT SQRT1_2;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B089),
     dispatchable
   ]
   dispinterface NumberObj
   {
     [id(300), readonly]
     VARIANT MAX_VALUE;
     [readonly]
     VARIANT MIN_VALUE;
     [readonly]
     VARIANT NaN;
     [readonly]
     VARIANT NEGATIVE_INFINITY;
     [readonly]
     VARIANT POSITIVE_INFINITY;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B090),
     dispatchable
   ]
   dispinterface RegExpObj
   {
     [id(400), readonly]
     VARIANT index;
     [readonly]
     VARIANT input;
     [readonly]
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B091),
     dispatchable
   ]
   dispinterface StringObj
   {
     [id(500)]
     VARIANT __stdcall fromCharCode (
       VARIANT char0
     );
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B092),
     dispatchable
   ]
   dispinterface ArrayInstance
   {
     [id(601)]
     dispinterface ArrayInstance * __stdcall concat (
       VARIANT Array
     );
     dispinterface StringInstance * __stdcall join (
       VARIANT separator
     );
     VARIANT __stdcall pop (void);
     VARIANT __stdcall push (
       VARIANT value
     );
     dispinterface ArrayInstance * __stdcall reverse (void);
     VARIANT __stdcall shift (void);
     dispinterface ArrayInstance * __stdcall slice (
       VARIANT start,
       VARIANT end
     );
     dispinterface ArrayInstance * __stdcall sort (
       VARIANT sortfunction
     );
     dispinterface ArrayInstance * __stdcall splice (
       VARIANT start,
       VARIANT deletecount
     );
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     dispinterface ArrayInstance * __stdcall valueOf (void);
     VARIANT __stdcall unshift (
       VARIANT value
     );
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(600)]
     VARIANT length;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B093),
     dispatchable
   ]
   dispinterface FunctionInstance
   {
     [id(701)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     dispinterface FunctionInstance * __stdcall valueOf (void);
     VARIANT __stdcall apply (
       VARIANT thisValue,
       VARIANT argArray
     );
     VARIANT __stdcall call (
       VARIANT thisValue
     );
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(700)]
     VARIANT length;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B094),
     dispatchable
   ]
   dispinterface StringInstance
   {
     [id(801)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall valueOf (void);
     dispinterface StringInstance * __stdcall anchor (
       VARIANT anchorString
     );
     dispinterface StringInstance * __stdcall big (void);
     dispinterface StringInstance * __stdcall blink (void);
     dispinterface StringInstance * __stdcall bold (void);
     dispinterface StringInstance * __stdcall charAt (
       VARIANT index
     );
     VARIANT __stdcall charCodeAt (
       VARIANT index
     );
     dispinterface StringInstance * __stdcall concat (
       VARIANT String
     );
     dispinterface StringInstance * __stdcall fixed (void);
     dispinterface StringInstance * __stdcall fontcolor (
       VARIANT colorval
     );
     dispinterface StringInstance * __stdcall fontsize (
       VARIANT size
     );
     VARIANT __stdcall indexOf (
       VARIANT substring,
       VARIANT startindex
     );
     dispinterface StringInstance * __stdcall italics (void);
     VARIANT __stdcall lastIndexOf (
       VARIANT substring,
       VARIANT startindex
     );
     dispinterface StringInstance * __stdcall link (
       VARIANT linkstring
     );
     VARIANT __stdcall match (
       VARIANT RegExp
     );
     dispinterface StringInstance * __stdcall replace (
       VARIANT RegExp,
       VARIANT replacetext
     );
     VARIANT __stdcall search (
       VARIANT RegExp
     );
     dispinterface StringInstance * __stdcall slice (
       VARIANT start,
       VARIANT end
     );
     dispinterface StringInstance * __stdcall small (void);
     dispinterface ArrayInstance * __stdcall split (
       VARIANT RegExp
     );
     dispinterface StringInstance * __stdcall strike (void);
     dispinterface StringInstance * __stdcall sub (void);
     dispinterface StringInstance * __stdcall substring (
       VARIANT start,
       VARIANT end
     );
     dispinterface StringInstance * __stdcall substr (
       VARIANT start,
       VARIANT length
     );
     dispinterface StringInstance * __stdcall sup (void);
     dispinterface StringInstance * __stdcall toLowerCase (void);
     dispinterface StringInstance * __stdcall toUpperCase (void);
     dispinterface StringInstance * __stdcall toLocaleLowerCase (void);
     dispinterface StringInstance * __stdcall toLocaleUpperCase (void);
     VARIANT __stdcall localeCompare (
       VARIANT that
     );
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(800)]
     VARIANT length;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B095),
     dispatchable
   ]
   dispinterface BoolInstance
   {
     [id(900)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall valueOf (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B096),
     dispatchable
   ]
   dispinterface NumberInstance
   {
     [id(1000)]
     dispinterface StringInstance * __stdcall toString (
       VARIANT radix
     );
     dispinterface StringInstance * __stdcall toLocaleString (void);
     dispinterface StringInstance * __stdcall toFixed (
       VARIANT fractionDigits
     );
     dispinterface StringInstance * __stdcall toExponential (
       VARIANT fractionDigits
     );
     dispinterface StringInstance * __stdcall toPrecision (
       VARIANT precision
     );
     VARIANT __stdcall valueOf (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B097),
     dispatchable
   ]
   dispinterface ObjectInstance
   {
     [id(1100)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     dispinterface ObjectInstance * __stdcall valueOf (void);
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B098),
     dispatchable
   ]
   dispinterface DateInstance
   {
     [id(1200)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     dispinterface DateInstance * __stdcall valueOf (void);
     dispinterface StringInstance * __stdcall toUTCString (void);
     dispinterface StringInstance * __stdcall toDateString (void);
     dispinterface StringInstance * __stdcall toTimeString (void);
     dispinterface StringInstance * __stdcall toLocaleDateString (void);
     dispinterface StringInstance * __stdcall toLocaleTimeString (void);
     VARIANT __stdcall getTime (void);
     VARIANT __stdcall getFullYear (void);
     VARIANT __stdcall getUTCFullYear (void);
     VARIANT __stdcall getMonth (void);
     VARIANT __stdcall getUTCMonth (void);
     VARIANT __stdcall getDate (void);
     VARIANT __stdcall getUTCDate (void);
     VARIANT __stdcall getDay (void);
     VARIANT __stdcall getUTCDay (void);
     VARIANT __stdcall getHours (void);
     VARIANT __stdcall getUTCHours (void);
     VARIANT __stdcall getMinutes (void);
     VARIANT __stdcall getUTCMinutes (void);
     VARIANT __stdcall getSeconds (void);
     VARIANT __stdcall getUTCSeconds (void);
     VARIANT __stdcall getMilliseconds (void);
     VARIANT __stdcall getUTCMilliseconds (void);
     VARIANT __stdcall getTimezoneOffset (void);
     dispinterface DateInstance * __stdcall setTime (
       VARIANT time
     );
     dispinterface DateInstance * __stdcall setMilliseconds (
       VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setUTCMilliseconds (
       VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setSeconds (
       VARIANT seconds,
       [opt] VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setUTCSeconds (
       VARIANT seconds,
       [opt] VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setMinutes (
       VARIANT minutes,
       [opt] VARIANT seconds,
       [opt] VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setUTCMinutes (
       VARIANT minutes,
       [opt] VARIANT seconds,
       [opt] VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setHours (
       VARIANT hours,
       [opt] VARIANT minutes,
       [opt] VARIANT seconds,
       [opt] VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setUTCHours (
       VARIANT hours,
       [opt] VARIANT minutes,
       [opt] VARIANT seconds,
       [opt] VARIANT milliseconds
     );
     dispinterface DateInstance * __stdcall setDate (
       VARIANT Date
     );
     dispinterface DateInstance * __stdcall setUTCDate (
       VARIANT Date
     );
     dispinterface DateInstance * __stdcall setMonth (
       VARIANT month,
       [opt] VARIANT Date
     );
     dispinterface DateInstance * __stdcall setUTCMonth (
       VARIANT month,
       [opt] VARIANT Date
     );
     dispinterface DateInstance * __stdcall setFullYear (
       VARIANT year,
       [opt] VARIANT month,
       [opt] VARIANT Date
     );
     dispinterface DateInstance * __stdcall setUTCFullYear (
       VARIANT year,
       [opt] VARIANT month,
       [opt] VARIANT Date
     );
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B099),
     dispatchable
   ]
   dispinterface RegExpInstance
   {
     [id(1305)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     dispinterface ArrayInstance * __stdcall exec (
       VARIANT String
     );
     [id(1300)]
     dispinterface StringInstance *source;
     VARIANT global;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B09A),
     dispatchable
   ]
   dispinterface ErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B09B),
     dispatchable
   ]
   dispinterface EvalErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B09C),
     dispatchable
   ]
   dispinterface RangeErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B09D),
     dispatchable
   ]
   dispinterface ReferenceErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B09E),
     dispatchable
   ]
   dispinterface SyntaxErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B09F),
     dispatchable
   ]
   dispinterface TypeErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };
   [
     uuid(3EEF9758-35FC-11D1-8CE4-00C04FC2B0A0),
     dispatchable
   ]
   dispinterface URIErrorInstance
   {
     [id(1405)]
     dispinterface StringInstance * __stdcall toString (void);
     dispinterface StringInstance * __stdcall toLocaleString (void);
     VARIANT __stdcall hasOwnProperty (
       VARIANT propertyName
     );
     VARIANT __stdcall propertyIsEnumerable (
       VARIANT propertyName
     );
     VARIANT __stdcall isPrototypeOf (
       VARIANT obj
     );
     [id(1400)]
     dispinterface StringInstance *name;
     dispinterface StringInstance *message;
     VARIANT ignoreCase;
     VARIANT multiline;
     VARIANT lastIndex;
   };

};

