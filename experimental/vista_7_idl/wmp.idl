/* Automated generated idl file <wmplib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IWMPEvents;
interface IWMPEvents2;
interface IWMPSyncDevice;
interface IWMPEvents3;
interface IWMPCdromRip;
interface IWMPCdromBurn;
interface IWMPLibrary;
interface IWMPEvents4;
interface IWMPPlayerServices;
interface IWMPPlayerServices2;
interface IWMPRemoteMediaServices;
interface IWMPSyncServices;
interface IWMPLibraryServices;
interface IWMPLibrarySharingServices;
interface IWMPLibrary2;
interface IWMPFolderMonitorServices;
interface IWMPSyncDevice2;
interface IWMPSyncDevice3;

/* Union record forward declarations.  */
dispinterface IWMPPlaylist;
dispinterface IWMPMedia;
dispinterface IWMPMediaCollection;
dispinterface IWMPStringCollection;
dispinterface _WMPOCXEvents;
dispinterface IWMPPlayer4;
dispinterface IWMPCore3;
dispinterface IWMPCore2;
dispinterface IWMPCore;
dispinterface IWMPControls;
dispinterface IWMPSettings;
dispinterface IWMPPlaylistCollection;
dispinterface IWMPPlaylistArray;
dispinterface IWMPNetwork;
dispinterface IWMPCdromCollection;
dispinterface IWMPCdrom;
dispinterface IWMPClosedCaption;
dispinterface IWMPError;
dispinterface IWMPErrorItem;
dispinterface IWMPDVD;
dispinterface IWMPPlayerApplication;
dispinterface IWMPPlayer3;
dispinterface IWMPPlayer2;
dispinterface IWMPPlayer;
dispinterface IWMPErrorItem2;
dispinterface IWMPControls2;
dispinterface IWMPMedia2;
dispinterface IWMPMedia3;
dispinterface IWMPMetadataPicture;
dispinterface IWMPMetadataText;
dispinterface IWMPSettings2;
dispinterface IWMPControls3;
dispinterface IWMPClosedCaption2;
dispinterface IWMPMediaCollection2;
dispinterface IWMPQuery;
dispinterface IWMPStringCollection2;
dispinterface IWMPPlaylistCtrl;
dispinterface IAppDispatch;
dispinterface IWMPSafeBrowser;
dispinterface IWMPObjectExtendedProps;
dispinterface IWMPLayoutSubView;
dispinterface IWMPLayoutView;
dispinterface IWMPEventObject;
dispinterface IWMPTheme;
dispinterface IWMPLayoutSettingsDispatch;
dispinterface IWMPWindow;
dispinterface IWMPBrandDispatch;
dispinterface IWMPNowPlayingHelperDispatch;
dispinterface IWMPNowDoingDispatch;
dispinterface IWMPHoverPreviewDispatch;
dispinterface IWMPButtonCtrlEvents;
dispinterface IWMPButtonCtrl;
dispinterface IWMPListBoxCtrl;
dispinterface IWMPListBoxItem;
dispinterface IWMPPlaylistCtrlColumn;
dispinterface IWMPSliderCtrlEvents;
dispinterface IWMPSliderCtrl;
dispinterface IWMPVideoCtrlEvents;
dispinterface IWMPVideoCtrl;
dispinterface IWMPEffectsCtrl;
dispinterface IWMPEqualizerSettingsCtrl;
dispinterface IWMPVideoSettingsCtrl;
dispinterface IWMPDolbyDigitalSettingsCtrl;
dispinterface IWMPLibraryTreeCtrl;
dispinterface IWMPEditCtrl;
dispinterface IWMPSkinList;
dispinterface IWMPPluginUIHost;
dispinterface IWMPMenuCtrl;
dispinterface IWMPAutoMenuCtrl;
dispinterface IWMPRegionalButtonCtrl;
dispinterface IWMPRegionalButtonEvents;
dispinterface IWMPRegionalButton;
dispinterface IWMPCustomSliderCtrlEvents;
dispinterface IWMPCustomSlider;
dispinterface IWMPTextCtrl;
dispinterface ITaskCntrCtrl;
dispinterface _WMPCoreEvents;
dispinterface IWMPGraphEventHandler;
dispinterface IBattery;
dispinterface IBatteryPreset;
dispinterface IBatteryRandomPreset;
dispinterface IBatterySavedPreset;
dispinterface IBarsEffect;
dispinterface IWMPExternal;
dispinterface IWMPExternalColors;
dispinterface IWMPSubscriptionServiceLimited;
dispinterface IWMPSubscriptionServiceExternal;
dispinterface IWMPDownloadManager;
dispinterface IWMPDownloadCollection;
dispinterface IWMPDownloadItem2;
dispinterface IWMPDownloadItem;
dispinterface IWMPSubscriptionServicePlayMedia;
dispinterface IWMPDiscoExternal;
dispinterface IWMPCDDVDWizardExternal;
dispinterface IWMPBaseExternal;
dispinterface IWMPOfflineExternal;
dispinterface IWMPDMRAVTransportService;
dispinterface IWMPDMRConnectionManagerService;
dispinterface IWMPDMRRenderingControlService;

/* Union record forward declarations.  */
coclass WindowsMediaPlayer;
coclass WMPButtonCtrl;
coclass WMPListBoxCtrl;
coclass WMPSliderCtrl;
coclass WMPVideoCtrl;
coclass WMPEffects;
coclass WMPEqualizerSettingsCtrl;
coclass WMPVideoSettingsCtrl;
coclass WMPDolbyDigitalSettingsCtrl;
coclass WMPLibraryTreeCtrl;
coclass WMPEditCtrl;
coclass WMPSkinList;
coclass WMPMenuCtrl;
coclass WMPAutoMenuCtrl;
coclass WMPRegionalButtonCtrl;
coclass WMPRegionalButton;
coclass WMPCustomSliderCtrl;
coclass WMPTextCtrl;
coclass WMPPlaylistCtrl;
coclass WMPCore;

/* Enumeration declarations.  */
[
  helpstring("WMP Playlist Change Event Type")
]
enum WMPPlaylistChangeEventType
{
  wmplcUnknown = (int) 201326592,
  wmplcClear = (int) 201326593,
  wmplcInfoChange = (int) 201326594,
  wmplcMove = (int) 201326595,
  wmplcDelete = (int) 201326596,
  wmplcInsert = (int) 201326597,
  wmplcAppend = (int) 201326598,
  wmplcPrivate = (int) 201326599,
  wmplcNameChange = (int) 201326600,
  wmplcMorph = (int) 201326601,
  wmplcSort = (int) 201326602,
  wmplcLast = (int) 201326603
};
[
  helpstring("WMP Sync Device Status")
]
enum WMPDeviceStatus
{
  wmpdsUnknown = (int) 201326592,
  wmpdsPartnershipExists = (int) 201326593,
  wmpdsPartnershipDeclined = (int) 201326594,
  wmpdsPartnershipAnother = (int) 201326595,
  wmpdsManualDevice = (int) 201326596,
  wmpdsNewDevice = (int) 201326597,
  wmpdsLast = (int) 201326598
};
[
  helpstring("WMP Sync States")
]
enum WMPSyncState
{
  wmpssUnknown = (int) 201326592,
  wmpssSynchronizing = (int) 201326593,
  wmpssStopped = (int) 201326594,
  wmpssEstimating = (int) 201326595,
  wmpssLast = (int) 201326596
};
[
  helpstring("WMP Ripping States")
]
enum WMPRipState
{
  wmprsUnknown = (int) 201326592,
  wmprsRipping = (int) 201326593,
  wmprsStopped = (int) 201326594
};
[
  helpstring("WMP CD Burning Formats")
]
enum WMPBurnFormat
{
  wmpbfAudioCD = (int) 201326592,
  wmpbfDataCD = (int) 201326593
};
[
  helpstring("WMP CD Burning States")
]
enum WMPBurnState
{
  wmpbsUnknown = (int) 201326592,
  wmpbsBusy = (int) 201326593,
  wmpbsReady = (int) 201326594,
  wmpbsWaitingForDisc = (int) 201326595,
  wmpbsRefreshStatusPending = (int) 201326596,
  wmpbsPreparingToBurn = (int) 201326597,
  wmpbsBurning = (int) 201326598,
  wmpbsStopped = (int) 201326599,
  wmpbsErasing = (int) 201326600,
  wmpbsDownloading = (int) 201326601
};
[
  helpstring("WMP Library Types")
]
enum WMPLibraryType
{
  wmpltUnknown = (int) 201326592,
  wmpltAll = (int) 201326593,
  wmpltLocal = (int) 201326594,
  wmpltRemote = (int) 201326595,
  wmpltDisc = (int) 201326596,
  wmpltPortableDevice = (int) 201326597
};
[
  helpstring("WMP Folder Scan States")
]
enum WMPFolderScanState
{
  wmpfssUnknown = (int) 201326592,
  wmpfssScanning = (int) 201326593,
  wmpfssUpdating = (int) 201326594,
  wmpfssStopped = (int) 201326595
};
[
  helpstring("WMP String Collection Change Event Type")
]
enum WMPStringCollectionChangeEventType
{
  wmpsccetUnknown = (int) 201326592,
  wmpsccetInsert = (int) 201326593,
  wmpsccetChange = (int) 201326594,
  wmpsccetDelete = (int) 201326595,
  wmpsccetClear = (int) 201326596,
  wmpsccetBeginUpdates = (int) 201326597,
  wmpsccetEndUpdates = (int) 201326598
};
[
  helpstring("State of opening process")
]
enum WMPOpenState
{
  wmposUndefined = (int) 201326592,
  wmposPlaylistChanging = (int) 201326593,
  wmposPlaylistLocating = (int) 201326594,
  wmposPlaylistConnecting = (int) 201326595,
  wmposPlaylistLoading = (int) 201326596,
  wmposPlaylistOpening = (int) 201326597,
  wmposPlaylistOpenNoMedia = (int) 201326598,
  wmposPlaylistChanged = (int) 201326599,
  wmposMediaChanging = (int) 201326600,
  wmposMediaLocating = (int) 201326601,
  wmposMediaConnecting = (int) 201326602,
  wmposMediaLoading = (int) 201326603,
  wmposMediaOpening = (int) 201326604,
  wmposMediaOpen = (int) 201326605,
  wmposBeginCodecAcquisition = (int) 201326606,
  wmposEndCodecAcquisition = (int) 201326607,
  wmposBeginLicenseAcquisition = (int) 201326608,
  wmposEndLicenseAcquisition = (int) 201326609,
  wmposBeginIndividualization = (int) 201326610,
  wmposEndIndividualization = (int) 201326611,
  wmposMediaWaiting = (int) 201326612,
  wmposOpeningUnknownURL = (int) 201326613
};
[
  helpstring("State of playback")
]
enum WMPPlayState
{
  wmppsUndefined = (int) 201326592,
  wmppsStopped = (int) 201326593,
  wmppsPaused = (int) 201326594,
  wmppsPlaying = (int) 201326595,
  wmppsScanForward = (int) 201326596,
  wmppsScanReverse = (int) 201326597,
  wmppsBuffering = (int) 201326598,
  wmppsWaiting = (int) 201326599,
  wmppsMediaEnded = (int) 201326600,
  wmppsTransitioning = (int) 201326601,
  wmppsReady = (int) 201326602,
  wmppsReconnecting = (int) 201326603,
  wmppsLast = (int) 201326604
};
[
  helpstring("State of a download")
]
enum WMPSubscriptionDownloadState
{
  wmpsdlsDownloading = (int) 201326592,
  wmpsdlsPaused = (int) 201326593,
  wmpsdlsProcessing = (int) 201326594,
  wmpsdlsCompleted = (int) 201326595,
  wmpsdlsCancelled = (int) 201326596
};
enum WMP_WRITENAMESEX_TYPE
{
  WMP_WRITENAMES_TYPE_CD_BY_TOC = (int) 201326592,
  WMP_WRITENAMES_TYPE_CD_BY_CONTENT_ID = (int) 201326593,
  WMP_WRITENAMES_TYPE_CD_BY_MDQCD = (int) 201326594,
  WMP_WRITENAMES_TYPE_DVD_BY_DVDID = (int) 201326595
};

/* Type definitions.  */
typedef ULONGLONG ULONG_PTR;

[
  uuid(6BF52A50-394A-11D3-B153-00C04F79FAA6),
  version(1.0),
  helpstring("Windows Media Player")
]
library wmplib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(6BF52A52-394A-11D3-B153-00C04F79FAA6),
     helpstring("Windows Media Player ActiveX Control"),
     cancreate
   ]
   coclass WindowsMediaPlayer
   {
     dispinterface IWMPPlayer4;
     dispinterface IWMPPlayer3;
     dispinterface IWMPPlayer2;
     dispinterface IWMPPlayer;
     dispinterface IWMPControls;
     dispinterface IWMPSettings;
     dispinterface IWMPPlaylist;
     dispinterface IWMPMedia;
     dispinterface IWMPMediaCollection;
     dispinterface IWMPPlaylistCollection;
     dispinterface IWMPCdromCollection;
     dispinterface IWMPError;
     dispinterface IWMPErrorItem;
     dispinterface IWMPErrorItem2;
     dispinterface IWMPClosedCaption;
     dispinterface IWMPDVD;
     dispinterface IWMPControls2;
     dispinterface IWMPMedia2;
     dispinterface IWMPMedia3;
     dispinterface IWMPMetadataPicture;
     dispinterface IWMPMetadataText;
     dispinterface IWMPSettings2;
     dispinterface IWMPControls3;
     dispinterface IWMPClosedCaption2;
     dispinterface IWMPMediaCollection2;
     dispinterface IWMPStringCollection2;
     dispinterface _WMPOCXEvents;
   };
   [
     uuid(87291B51-0C8E-11D3-BB2A-00A0C93CA73A),
     helpstring("WMPButtonCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPButtonCtrl
   {
     dispinterface IWMPButtonCtrl;
     dispinterface IWMPButtonCtrlEvents;
   };
   [
     uuid(FC1880CF-83B9-43A7-A066-C44CE8C82583),
     helpstring("WMPListBoxCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPListBoxCtrl
   {
     dispinterface IWMPListBoxCtrl;
   };
   [
     uuid(F2BF2C90-405F-11D3-BB39-00A0C93CA73A),
     helpstring("WMPSliderCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPSliderCtrl
   {
     dispinterface IWMPSliderCtrl;
     dispinterface IWMPSliderCtrlEvents;
   };
   [
     uuid(61CECF11-FC3A-11D2-A1CD-005004602752),
     helpstring("WMPVideoCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPVideoCtrl
   {
     dispinterface IWMPVideoCtrl;
     dispinterface IWMPVideoCtrlEvents;
   };
   [
     uuid(47DEA830-D619-4154-B8D8-6B74845D6A2D),
     helpstring("WMPEffects: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPEffects
   {
     dispinterface IWMPEffectsCtrl;
   };
   [
     uuid(93EB32F5-87B1-45AD-ACC6-0F2483DB83BB),
     helpstring("WMPEqualizerSettingsCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPEqualizerSettingsCtrl
   {
     dispinterface IWMPEqualizerSettingsCtrl;
   };
   [
     uuid(AE7BFAFE-DCC8-4A73-92C8-CC300CA88859),
     helpstring("WMPVideoSettingsCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPVideoSettingsCtrl
   {
     dispinterface IWMPVideoSettingsCtrl;
   };
   [
     uuid(1EA16D11-DCB1-41FE-BC17-42CDFBEF8F53),
     helpstring("WMPDolbyDigitalSettingsCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPDolbyDigitalSettingsCtrl
   {
     dispinterface IWMPDolbyDigitalSettingsCtrl;
   };
   [
     uuid(D9DE732A-AEE9-4503-9D11-5605589977A8),
     helpstring("WMPLibraryTreeCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPLibraryTreeCtrl
   {
     dispinterface IWMPLibraryTreeCtrl;
   };
   [
     uuid(6342FCED-25EA-4033-BDDB-D049A14382D3),
     helpstring("WMPEditCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPEditCtrl
   {
     dispinterface IWMPEditCtrl;
   };
   [
     uuid(A8A55FAC-82EA-4BD7-BD7B-11586A4D99E4),
     helpstring("WMPSkinList: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPSkinList
   {
     dispinterface IWMPSkinList;
   };
   [
     uuid(BAB3768B-8883-4AEC-9F9B-E14C947913EF),
     helpstring("WMPMenuCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPMenuCtrl
   {
     dispinterface IWMPMenuCtrl;
   };
   [
     uuid(6B28F900-8D64-4B80-9963-CC52DDD1FBB4),
     helpstring("WMPAutoMenuCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPAutoMenuCtrl
   {
     dispinterface IWMPAutoMenuCtrl;
   };
   [
     uuid(AE3B6831-25A9-11D3-BD41-00C04F6EA5AE),
     helpstring("WMPRegionalButtonCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPRegionalButtonCtrl
   {
     dispinterface IWMPRegionalButtonCtrl;
   };
   [
     uuid(09AEFF11-69EF-11D3-BD4D-00C04F6EA5AE),
     helpstring("WMPRegionalButton: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPRegionalButton
   {
     dispinterface IWMPRegionalButton;
     dispinterface IWMPRegionalButtonEvents;
   };
   [
     uuid(95F45AA3-ED0A-11D2-BA67-0000F80855E6),
     helpstring("WMPCustomSliderCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPCustomSliderCtrl
   {
     dispinterface IWMPCustomSlider;
     dispinterface IWMPCustomSliderCtrlEvents;
   };
   [
     uuid(DDDA102E-0E17-11D3-A2E2-00C04F79F88E),
     helpstring("WMPTextCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPTextCtrl
   {
     dispinterface IWMPTextCtrl;
   };
   [
     uuid(5F9CFD93-8CAD-11D3-9A7E-00C04F8EFB70),
     helpstring("WMPPlaylistCtrl: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPPlaylistCtrl
   {
     dispinterface IWMPPlaylistCtrl;
   };
   [
     uuid(09428D37-E0B9-11D2-B147-00C04F79FAA6),
     helpstring("WMPCore: Not Public.  Internal object used by Windows Media Player.")
   ]
   coclass WMPCore
   {
     dispinterface IWMPCore3;
     dispinterface IWMPCore2;
     dispinterface IWMPCore;
     dispinterface IWMPControls;
     dispinterface IWMPPlaylist;
     dispinterface IWMPSettings;
     dispinterface IWMPMedia;
     dispinterface IWMPStringCollection;
     dispinterface IWMPMediaCollection;
     dispinterface IWMPPlaylistCollection;
     dispinterface IWMPCdromCollection;
     dispinterface IWMPCdrom;
     dispinterface IWMPErrorItem;
     dispinterface IWMPClosedCaption;
     dispinterface IWMPError;
     dispinterface IWMPDVD;
     dispinterface IWMPControls2;
     dispinterface IWMPMedia2;
     dispinterface IWMPMedia3;
     dispinterface IWMPMetadataPicture;
     dispinterface IWMPMetadataText;
     dispinterface IWMPSettings2;
     dispinterface IWMPControls3;
     dispinterface IWMPClosedCaption2;
     dispinterface _WMPCoreEvents;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(D5F0F4F1-130C-11D3-B14E-00C04F79FAA6),
     helpstring("IWMPPlaylist: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlaylist : IDispatch
   {
     [id(201), propget]
     HRESULT __stdcall count (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall name (
       [out retval] BSTR *pbstrName
     );
     [id(202), propput]
     HRESULT __stdcall name (
       [in] BSTR argNo1
     );
     [id(210), propget]
     HRESULT __stdcall attributeCount (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall attributeName (
       [in] long lIndex,
       [out retval] BSTR *pbstrAttributeName
     );
     [propget]
     HRESULT __stdcall Item (
       long lIndex,
       [out retval] dispinterface IWMPMedia **ppIWMPMedia
     );
     [id(203)]
     HRESULT __stdcall getItemInfo (
       [in] BSTR bstrName,
       [out retval] BSTR *pbstrVal
     );
     HRESULT __stdcall setItemInfo (
       [in] BSTR bstrName,
       [in] BSTR bstrValue
     );
     [id(213), propget]
     HRESULT __stdcall isIdentical (
       [in] dispinterface IWMPPlaylist *pIWMPPlaylist,
       [out retval] WINBOOL *pvbool
     );
     [id(205)]
     HRESULT __stdcall clear (void);
     HRESULT __stdcall insertItem (
       [in] long lIndex,
       [in] dispinterface IWMPMedia *pIWMPMedia
     );
     HRESULT __stdcall appendItem (
       [in] dispinterface IWMPMedia *pIWMPMedia
     );
     HRESULT __stdcall removeItem (
       [in] dispinterface IWMPMedia *pIWMPMedia
     );
     HRESULT __stdcall moveItem (
       long lIndexOld,
       long lIndexNew
     );
   };
   [
     uuid(94D55E95-3FAC-11D3-B155-00C04F79FAA6),
     helpstring("IWMPMedia: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMedia : IDispatch
   {
     [id(763), propget]
     HRESULT __stdcall isIdentical (
       [in] dispinterface IWMPMedia *pIWMPMedia,
       [out retval] WINBOOL *pvbool
     );
     [id(751), propget]
     HRESULT __stdcall sourceURL (
       [out retval] BSTR *pbstrSourceURL
     );
     [id(764), propget]
     HRESULT __stdcall name (
       [out retval] BSTR *pbstrName
     );
     [id(764), propput]
     HRESULT __stdcall name (
       [in] BSTR argNo1
     );
     [id(752), propget]
     HRESULT __stdcall imageSourceWidth (
       [out retval] long *pWidth
     );
     [propget]
     HRESULT __stdcall imageSourceHeight (
       [out retval] long *pHeight
     );
     [propget]
     HRESULT __stdcall markerCount (
       [out retval] long *pMarkerCount
     );
     HRESULT __stdcall getMarkerTime (
       [in] long MarkerNum,
       [out retval] double *pMarkerTime
     );
     HRESULT __stdcall getMarkerName (
       [in] long MarkerNum,
       [out retval] BSTR *pbstrMarkerName
     );
     [propget]
     HRESULT __stdcall duration (
       [out retval] double *pDuration
     );
     [propget]
     HRESULT __stdcall durationString (
       [out retval] BSTR *pbstrDuration
     );
     [propget]
     HRESULT __stdcall attributeCount (
       [out retval] long *plCount
     );
     HRESULT __stdcall getAttributeName (
       [in] long lIndex,
       [out retval] BSTR *pbstrItemName
     );
     HRESULT __stdcall getItemInfo (
       [in] BSTR bstrItemName,
       [out retval] BSTR *pbstrVal
     );
     HRESULT __stdcall setItemInfo (
       [in] BSTR bstrItemName,
       [in] BSTR bstrVal
     );
     [id(765)]
     HRESULT __stdcall getItemInfoByAtom (
       [in] long lAtom,
       [out retval] BSTR *pbstrVal
     );
     HRESULT __stdcall isMemberOf (
       [in] dispinterface IWMPPlaylist *pPlaylist,
       [out retval] WINBOOL *pvarfIsMemberOf
     );
     HRESULT __stdcall isReadOnlyItem (
       [in] BSTR bstrItemName,
       [out retval] WINBOOL *pvarfIsReadOnly
     );
   };
   [
     uuid(8363BC22-B4B4-4B19-989D-1CD765749DD1),
     helpstring("IWMPMediaCollection: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMediaCollection : IDispatch
   {
     [id(452)]
     HRESULT __stdcall add (
       [in] BSTR bstrURL,
       [out retval] dispinterface IWMPMedia **ppItem
     );
     HRESULT __stdcall getAll (
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
     HRESULT __stdcall getByName (
       [in] BSTR bstrName,
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
     HRESULT __stdcall getByGenre (
       [in] BSTR bstrGenre,
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
     HRESULT __stdcall getByAuthor (
       [in] BSTR bstrAuthor,
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
     HRESULT __stdcall getByAlbum (
       [in] BSTR bstrAlbum,
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
     HRESULT __stdcall getByAttribute (
       [in] BSTR bstrAttribute,
       [in] BSTR bstrValue,
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
     HRESULT __stdcall remove (
       [in] dispinterface IWMPMedia *pItem,
       [in] WINBOOL varfDeleteFile
     );
     [id(461)]
     HRESULT __stdcall getAttributeStringCollection (
       [in] BSTR bstrAttribute,
       [in] BSTR bstrMediaType,
       [out retval] dispinterface IWMPStringCollection **ppStringCollection
     );
     [id(470)]
     HRESULT __stdcall getMediaAtom (
       [in] BSTR bstrItemName,
       [out retval] long *plAtom
     );
     HRESULT __stdcall setDeleted (
       [in] dispinterface IWMPMedia *pItem,
       [in] WINBOOL varfIsDeleted
     );
     HRESULT __stdcall isDeleted (
       [in] dispinterface IWMPMedia *pItem,
       [out retval] WINBOOL *pvarfIsDeleted
     );
   };
   [
     uuid(4A976298-8C0D-11D3-B389-00C04F68574B),
     helpstring("IWMPStringCollection: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPStringCollection : IDispatch
   {
     [id(401), propget]
     HRESULT __stdcall count (
       [out retval] long *plCount
     );
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] BSTR *pbstrString
     );
   };
   [
     uuid(6BF52A51-394A-11D3-B153-00C04F79FAA6),
     helpstring("_WMPOCXEvents: Public interface."),
     hidden,
     dispatchable
   ]
   dispinterface _WMPOCXEvents
   {
     [id(5001)]
     void __stdcall OpenStateChange (
       [in] long NewState
     );
     [id(5101)]
     void __stdcall PlayStateChange (
       [in] long NewState
     );
     void __stdcall AudioLanguageChange (
       [in] long LangID
     );
     [id(5002)]
     void __stdcall StatusChange (void);
     [id(5301)]
     void __stdcall ScriptCommand (
       [in] BSTR scType,
       [in] BSTR Param
     );
     [id(5403)]
     void __stdcall NewStream (void);
     [id(5401)]
     void __stdcall Disconnect (
       [in] long Result
     );
     void __stdcall Buffering (
       [in] WINBOOL Start
     );
     [id(5501)]
     void __stdcall Error (void);
     [id(5601)]
     void __stdcall Warning (
       [in] long WarningType,
       [in] long Param,
       [in] BSTR Description
     );
     [id(5201)]
     void __stdcall EndOfStream (
       [in] long Result
     );
     void __stdcall PositionChange (
       [in] double oldPosition,
       [in] double newPosition
     );
     void __stdcall MarkerHit (
       [in] long MarkerNum
     );
     void __stdcall DurationUnitChange (
       [in] long NewDurationUnit
     );
     [id(5701)]
     void __stdcall CdromMediaChange (
       [in] long CdromNum
     );
     [id(5801)]
     void __stdcall PlaylistChange (
       [in] IDispatch * Playlist,
       [in] enum WMPPlaylistChangeEventType change
     );
     [id(5804)]
     void __stdcall CurrentPlaylistChange (
       [in] enum WMPPlaylistChangeEventType change
     );
     void __stdcall CurrentPlaylistItemAvailable (
       [in] BSTR bstrItemName
     );
     [id(5802)]
     void __stdcall MediaChange (
       [in] IDispatch * Item
     );
     void __stdcall CurrentMediaItemAvailable (
       [in] BSTR bstrItemName
     );
     [id(5806)]
     void __stdcall CurrentItemChange (
       [in] IDispatch * pdispMedia
     );
     void __stdcall MediaCollectionChange (void);
     void __stdcall MediaCollectionAttributeStringAdded (
       [in] BSTR bstrAttribName,
       [in] BSTR bstrAttribVal
     );
     void __stdcall MediaCollectionAttributeStringRemoved (
       [in] BSTR bstrAttribName,
       [in] BSTR bstrAttribVal
     );
     [id(5820)]
     void __stdcall MediaCollectionAttributeStringChanged (
       [in] BSTR bstrAttribName,
       [in] BSTR bstrOldAttribVal,
       [in] BSTR bstrNewAttribVal
     );
     [id(5810)]
     void __stdcall PlaylistCollectionChange (void);
     void __stdcall PlaylistCollectionPlaylistAdded (
       [in] BSTR bstrPlaylistName
     );
     void __stdcall PlaylistCollectionPlaylistRemoved (
       [in] BSTR bstrPlaylistName
     );
     [id(5818)]
     void __stdcall PlaylistCollectionPlaylistSetAsDeleted (
       [in] BSTR bstrPlaylistName,
       [in] WINBOOL varfIsDeleted
     );
     void __stdcall ModeChange (
       [in] BSTR ModeName,
       [in] WINBOOL NewValue
     );
     [id(5821)]
     void __stdcall MediaError (
       [in] IDispatch * pMediaObject
     );
     [id(5823)]
     void __stdcall OpenPlaylistSwitch (
       [in] IDispatch * pItem
     );
     [id(5822)]
     void __stdcall DomainChange (
       [in] BSTR strDomain
     );
     [id(6501)]
     void __stdcall SwitchedToPlayerApplication (void);
     void __stdcall SwitchedToControl (void);
     void __stdcall PlayerDockedStateChange (void);
     void __stdcall PlayerReconnect (void);
     void __stdcall Click (
       [in] short nButton,
       [in] short nShiftState,
       [in] long fX,
       [in] long fY
     );
     void __stdcall DoubleClick (
       [in] short nButton,
       [in] short nShiftState,
       [in] long fX,
       [in] long fY
     );
     void __stdcall KeyDown (
       [in] short nKeyCode,
       [in] short nShiftState
     );
     void __stdcall KeyPress (
       [in] short nKeyAscii
     );
     void __stdcall KeyUp (
       [in] short nKeyCode,
       [in] short nShiftState
     );
     void __stdcall MouseDown (
       [in] short nButton,
       [in] short nShiftState,
       [in] long fX,
       [in] long fY
     );
     void __stdcall MouseMove (
       [in] short nButton,
       [in] short nShiftState,
       [in] long fX,
       [in] long fY
     );
     void __stdcall MouseUp (
       [in] short nButton,
       [in] short nShiftState,
       [in] long fX,
       [in] long fY
     );
     void __stdcall DeviceConnect (
       [in] interface IWMPSyncDevice *pDevice
     );
     void __stdcall DeviceDisconnect (
       [in] interface IWMPSyncDevice *pDevice
     );
     void __stdcall DeviceStatusChange (
       [in] interface IWMPSyncDevice *pDevice,
       [in] enum WMPDeviceStatus NewStatus
     );
     void __stdcall DeviceSyncStateChange (
       [in] interface IWMPSyncDevice *pDevice,
       [in] enum WMPSyncState NewState
     );
     void __stdcall DeviceSyncError (
       [in] interface IWMPSyncDevice *pDevice,
       [in] IDispatch * pMedia
     );
     void __stdcall CreatePartnershipComplete (
       [in] interface IWMPSyncDevice *pDevice,
       [in] HRESULT hrResult
     );
     [id(6527)]
     void __stdcall DeviceEstimation (
       [in] interface IWMPSyncDevice *pDevice,
       [in] HRESULT hrResult,
       [in] LONGLONG qwEstimatedUsedSpace,
       [in] LONGLONG qwEstimatedSpace
     );
     [id(6519)]
     void __stdcall CdromRipStateChange (
       [in] interface IWMPCdromRip *pCdromRip,
       [in] enum WMPRipState wmprs
     );
     void __stdcall CdromRipMediaError (
       [in] interface IWMPCdromRip *pCdromRip,
       [in] IDispatch * pMedia
     );
     void __stdcall CdromBurnStateChange (
       [in] interface IWMPCdromBurn *pCdromBurn,
       [in] enum WMPBurnState wmpbs
     );
     void __stdcall CdromBurnMediaError (
       [in] interface IWMPCdromBurn *pCdromBurn,
       [in] IDispatch * pMedia
     );
     void __stdcall CdromBurnError (
       [in] interface IWMPCdromBurn *pCdromBurn,
       [in] HRESULT hrError
     );
     void __stdcall LibraryConnect (
       [in] interface IWMPLibrary *pLibrary
     );
     void __stdcall LibraryDisconnect (
       [in] interface IWMPLibrary *pLibrary
     );
     void __stdcall FolderScanStateChange (
       [in] enum WMPFolderScanState wmpfss
     );
     [id(5824)]
     void __stdcall StringCollectionChange (
       [in] IDispatch * pdispStringCollection,
       [in] enum WMPStringCollectionChangeEventType change,
       [in] long lCollectionIndex
     );
     void __stdcall MediaCollectionMediaAdded (
       [in] IDispatch * pdispMedia
     );
     void __stdcall MediaCollectionMediaRemoved (
       [in] IDispatch * pdispMedia
     );
   };
   [
     uuid(6C497D62-8919-413C-82DB-E935FB3EC584),
     helpstring("IWMPPlayer4: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlayer4 : IWMPCore3
   {
     [id(19), propget]
     HRESULT __stdcall enabled (
       [out retval] WINBOOL *pbEnabled
     );
     [id(19), propput]
     HRESULT __stdcall enabled (
       [in] WINBOOL argNo1
     );
     [id(21), propget]
     HRESULT __stdcall fullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [id(21), propput]
     HRESULT __stdcall fullScreen (
       WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall enableContextMenu (
       [out retval] WINBOOL *pbEnableContextMenu
     );
     [id(22), propput]
     HRESULT __stdcall enableContextMenu (
       WINBOOL argNo1
     );
     [propput]
     HRESULT __stdcall uiMode (
       [in] BSTR argNo1
     );
     [id(23), propget]
     HRESULT __stdcall uiMode (
       [out retval] BSTR *pbstrMode
     );
     [propget]
     HRESULT __stdcall stretchToFit (
       [out retval] WINBOOL *pbEnabled
     );
     [id(24), propput]
     HRESULT __stdcall stretchToFit (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall windowlessVideo (
       [out retval] WINBOOL *pbEnabled
     );
     [id(25), propput]
     HRESULT __stdcall windowlessVideo (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall isRemote (
       [out retval] WINBOOL *pvarfIsRemote
     );
     [propget]
     HRESULT __stdcall playerApplication (
       [out retval] dispinterface IWMPPlayerApplication **ppIWMPPlayerApplication
     );
     HRESULT __stdcall openPlayer (
       [in] BSTR bstrURL
     );
   };
   [
     uuid(7587C667-628F-499F-88E7-6A6F4E888464),
     helpstring("IWMPCore3: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCore3 : IWMPCore2
   {
     [id(41)]
     HRESULT __stdcall newPlaylist (
       [in] BSTR bstrName,
       [in] BSTR bstrURL,
       [out retval] dispinterface IWMPPlaylist **ppPlaylist
     );
     HRESULT __stdcall newMedia (
       [in] BSTR bstrURL,
       [out retval] dispinterface IWMPMedia **ppMedia
     );
   };
   [
     uuid(BC17E5B7-7561-4C18-BB90-17D485775659),
     helpstring("IWMPCore2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCore2 : IWMPCore
   {
     [id(40), propget]
     HRESULT __stdcall dvd (
       [out retval] dispinterface IWMPDVD **ppDVD
     );
   };
   [
     uuid(D84CCA99-CCE2-11D2-9ECC-0000F8085981),
     helpstring("IWMPCore: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCore : IDispatch
   {
     [id(3)]
     HRESULT __stdcall close (void);
     [id(1), propget]
     HRESULT __stdcall URL (
       [out retval] BSTR *pbstrURL
     );
     [id(1), propput]
     HRESULT __stdcall URL (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall openState (
       [out retval] enum WMPOpenState *pwmpos
     );
     [id(10), propget]
     HRESULT __stdcall playState (
       [out retval] enum WMPPlayState *pwmpps
     );
     [id(4), propget]
     HRESULT __stdcall controls (
       [out retval] dispinterface IWMPControls **ppControl
     );
     [propget]
     HRESULT __stdcall settings (
       [out retval] dispinterface IWMPSettings **ppSettings
     );
     [propget]
     HRESULT __stdcall currentMedia (
       [out retval] dispinterface IWMPMedia **ppMedia
     );
     [id(6), propput]
     HRESULT __stdcall currentMedia (
       [in] dispinterface IWMPMedia *argNo1
     );
     [id(8), propget]
     HRESULT __stdcall mediaCollection (
       [out retval] dispinterface IWMPMediaCollection **ppMediaCollection
     );
     [propget]
     HRESULT __stdcall playlistCollection (
       [out retval] dispinterface IWMPPlaylistCollection **ppPlaylistCollection
     );
     [id(11), propget]
     HRESULT __stdcall versionInfo (
       [out retval] BSTR *pbstrVersionInfo
     );
     HRESULT __stdcall launchURL (
       [in] BSTR bstrURL
     );
     [id(7), propget]
     HRESULT __stdcall network (
       [out retval] dispinterface IWMPNetwork **ppQNI
     );
     [id(13), propget]
     HRESULT __stdcall currentPlaylist (
       [out retval] dispinterface IWMPPlaylist **ppPL
     );
     [id(13), propput]
     HRESULT __stdcall currentPlaylist (
       [in] dispinterface IWMPPlaylist *argNo1
     );
     [propget]
     HRESULT __stdcall cdromCollection (
       [out retval] dispinterface IWMPCdromCollection **ppCdromCollection
     );
     [propget]
     HRESULT __stdcall closedCaption (
       [out retval] dispinterface IWMPClosedCaption **ppClosedCaption
     );
     [propget]
     HRESULT __stdcall isOnline (
       [out retval] WINBOOL *pfOnline
     );
     [propget]
     HRESULT __stdcall Error (
       [out retval] dispinterface IWMPError **ppError
     );
     [propget]
     HRESULT __stdcall status (
       [out retval] BSTR *pbstrStatus
     );
   };
   [
     uuid(74C09E02-F828-11D2-A74B-00A0C905F36E),
     helpstring("IWMPControls: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPControls : IDispatch
   {
     [id(62), propget]
     HRESULT __stdcall isAvailable (
       [in] BSTR bstrItem,
       [out retval] WINBOOL *pIsAvailable
     );
     [id(51)]
     HRESULT __stdcall play (void);
     HRESULT __stdcall stop (void);
     HRESULT __stdcall pause (void);
     HRESULT __stdcall fastForward (void);
     HRESULT __stdcall fastReverse (void);
     [propget]
     HRESULT __stdcall currentPosition (
       [out retval] double *pdCurrentPosition
     );
     [id(56), propput]
     HRESULT __stdcall currentPosition (
       [in] double argNo1
     );
     [propget]
     HRESULT __stdcall currentPositionString (
       [out retval] BSTR *pbstrCurrentPosition
     );
     HRESULT __stdcall next (void);
     HRESULT __stdcall previous (void);
     [propget]
     HRESULT __stdcall currentItem (
       [out retval] dispinterface IWMPMedia **ppIWMPMedia
     );
     [id(60), propput]
     HRESULT __stdcall currentItem (
       [in] dispinterface IWMPMedia *argNo1
     );
     [propget]
     HRESULT __stdcall currentMarker (
       [out retval] long *plMarker
     );
     [id(61), propput]
     HRESULT __stdcall currentMarker (
       [in] long argNo1
     );
     [id(63)]
     HRESULT __stdcall playItem (
       [in] dispinterface IWMPMedia *pIWMPMedia
     );
   };
   [
     uuid(9104D1AB-80C9-4FED-ABF0-2E6417A6DF14),
     helpstring("IWMPSettings: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSettings : IDispatch
   {
     [id(113), propget]
     HRESULT __stdcall isAvailable (
       [in] BSTR bstrItem,
       [out retval] WINBOOL *pIsAvailable
     );
     [id(101), propget]
     HRESULT __stdcall autoStart (
       [out retval] WINBOOL *pfAutoStart
     );
     [id(101), propput]
     HRESULT __stdcall autoStart (
       [in] WINBOOL argNo1
     );
     [id(108), propget]
     HRESULT __stdcall baseURL (
       [out retval] BSTR *pbstrBaseURL
     );
     [id(108), propput]
     HRESULT __stdcall baseURL (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall defaultFrame (
       [out retval] BSTR *pbstrDefaultFrame
     );
     [id(109), propput]
     HRESULT __stdcall defaultFrame (
       [in] BSTR argNo1
     );
     [id(103), propget]
     HRESULT __stdcall invokeURLs (
       [out retval] WINBOOL *pfInvokeURLs
     );
     [id(103), propput]
     HRESULT __stdcall invokeURLs (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall mute (
       [out retval] WINBOOL *pfMute
     );
     [id(104), propput]
     HRESULT __stdcall mute (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall playCount (
       [out retval] long *plCount
     );
     [id(105), propput]
     HRESULT __stdcall playCount (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall rate (
       [out retval] double *pdRate
     );
     [id(106), propput]
     HRESULT __stdcall rate (
       [in] double argNo1
     );
     [id(102), propget]
     HRESULT __stdcall balance (
       [out retval] long *plBalance
     );
     [id(102), propput]
     HRESULT __stdcall balance (
       [in] long argNo1
     );
     [id(107), propget]
     HRESULT __stdcall volume (
       [out retval] long *plVolume
     );
     [id(107), propput]
     HRESULT __stdcall volume (
       [in] long argNo1
     );
     [id(110)]
     HRESULT __stdcall getMode (
       [in] BSTR bstrMode,
       [out retval] WINBOOL *pvarfMode
     );
     HRESULT __stdcall setMode (
       [in] BSTR bstrMode,
       [in] WINBOOL varfMode
     );
     [propget]
     HRESULT __stdcall enableErrorDialogs (
       [out retval] WINBOOL *pfEnableErrorDialogs
     );
     [id(112), propput]
     HRESULT __stdcall enableErrorDialogs (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(10A13217-23A7-439B-B1C0-D847C79B7774),
     helpstring("IWMPPlaylistCollection: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlaylistCollection : IDispatch
   {
     [id(552)]
     HRESULT __stdcall newPlaylist (
       [in] BSTR bstrName,
       [out retval] dispinterface IWMPPlaylist **ppItem
     );
     HRESULT __stdcall getAll (
       [out retval] dispinterface IWMPPlaylistArray **ppPlaylistArray
     );
     HRESULT __stdcall getByName (
       [in] BSTR bstrName,
       [out retval] dispinterface IWMPPlaylistArray **ppPlaylistArray
     );
     [id(556)]
     HRESULT __stdcall remove (
       [in] dispinterface IWMPPlaylist *pItem
     );
     [id(560)]
     HRESULT __stdcall setDeleted (
       [in] dispinterface IWMPPlaylist *pItem,
       [in] WINBOOL varfIsDeleted
     );
     HRESULT __stdcall isDeleted (
       [in] dispinterface IWMPPlaylist *pItem,
       [out retval] WINBOOL *pvarfIsDeleted
     );
     HRESULT __stdcall importPlaylist (
       [in] dispinterface IWMPPlaylist *pItem,
       [out retval] dispinterface IWMPPlaylist **ppImportedItem
     );
   };
   [
     uuid(679409C0-99F7-11D3-9FB7-00105AA620BB),
     helpstring("IWMPPlaylistArray: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlaylistArray : IDispatch
   {
     [id(501), propget]
     HRESULT __stdcall count (
       [out retval] long *plCount
     );
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] dispinterface IWMPPlaylist **ppItem
     );
   };
   [
     uuid(EC21B779-EDEF-462D-BBA4-AD9DDE2B29A7),
     helpstring("IWMPNetwork: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPNetwork : IDispatch
   {
     [id(801), propget]
     HRESULT __stdcall bandWidth (
       [out retval] long *plBandwidth
     );
     [propget]
     HRESULT __stdcall recoveredPackets (
       [out retval] long *plRecoveredPackets
     );
     [propget]
     HRESULT __stdcall sourceProtocol (
       [out retval] BSTR *pbstrSourceProtocol
     );
     [propget]
     HRESULT __stdcall receivedPackets (
       [out retval] long *plReceivedPackets
     );
     [propget]
     HRESULT __stdcall lostPackets (
       [out retval] long *plLostPackets
     );
     [propget]
     HRESULT __stdcall receptionQuality (
       [out retval] long *plReceptionQuality
     );
     [propget]
     HRESULT __stdcall bufferingCount (
       [out retval] long *plBufferingCount
     );
     [propget]
     HRESULT __stdcall bufferingProgress (
       [out retval] long *plBufferingProgress
     );
     [propget]
     HRESULT __stdcall bufferingTime (
       [out retval] long *plBufferingTime
     );
     [id(809), propput]
     HRESULT __stdcall bufferingTime (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall frameRate (
       [out retval] long *plFrameRate
     );
     [propget]
     HRESULT __stdcall maxBitRate (
       [out retval] long *plBitRate
     );
     [propget]
     HRESULT __stdcall bitRate (
       [out retval] long *plBitRate
     );
     HRESULT __stdcall getProxySettings (
       [in] BSTR bstrProtocol,
       [out retval] long *plProxySetting
     );
     HRESULT __stdcall setProxySettings (
       [in] BSTR bstrProtocol,
       [in] long lProxySetting
     );
     HRESULT __stdcall getProxyName (
       [in] BSTR bstrProtocol,
       [out retval] BSTR *pbstrProxyName
     );
     HRESULT __stdcall setProxyName (
       [in] BSTR bstrProtocol,
       [in] BSTR bstrProxyName
     );
     HRESULT __stdcall getProxyPort (
       [in] BSTR bstrProtocol,
       [out retval] long *lProxyPort
     );
     HRESULT __stdcall setProxyPort (
       [in] BSTR bstrProtocol,
       [in] long lProxyPort
     );
     HRESULT __stdcall getProxyExceptionList (
       [in] BSTR bstrProtocol,
       [out retval] BSTR *pbstrExceptionList
     );
     HRESULT __stdcall setProxyExceptionList (
       [in] BSTR bstrProtocol,
       [in] BSTR pbstrExceptionList
     );
     HRESULT __stdcall getProxyBypassForLocal (
       [in] BSTR bstrProtocol,
       [out retval] WINBOOL *pfBypassForLocal
     );
     HRESULT __stdcall setProxyBypassForLocal (
       [in] BSTR bstrProtocol,
       [in] WINBOOL fBypassForLocal
     );
     [propget]
     HRESULT __stdcall maxBandwidth (
       [out retval] long *lMaxBandwidth
     );
     [id(823), propput]
     HRESULT __stdcall maxBandwidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall downloadProgress (
       [out retval] long *plDownloadProgress
     );
     [propget]
     HRESULT __stdcall encodedFrameRate (
       [out retval] long *plFrameRate
     );
     [propget]
     HRESULT __stdcall framesSkipped (
       [out retval] long *plFrames
     );
   };
   [
     uuid(EE4C8FE2-34B2-11D3-A3BF-006097C9B344),
     helpstring("IWMPCdromCollection: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCdromCollection : IDispatch
   {
     [id(301), propget]
     HRESULT __stdcall count (
       [out retval] long *plCount
     );
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] dispinterface IWMPCdrom **ppItem
     );
     HRESULT __stdcall getByDriveSpecifier (
       [in] BSTR bstrDriveSpecifier,
       [out retval] dispinterface IWMPCdrom **ppCdrom
     );
   };
   [
     uuid(CFAB6E98-8730-11D3-B388-00C04F68574B),
     helpstring("IWMPCdrom: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCdrom : IDispatch
   {
     [id(251), propget]
     HRESULT __stdcall driveSpecifier (
       [out retval] BSTR *pbstrDrive
     );
     [propget]
     HRESULT __stdcall Playlist (
       [out retval] dispinterface IWMPPlaylist **ppPlaylist
     );
     HRESULT __stdcall eject (void);
   };
   [
     uuid(4F2DF574-C588-11D3-9ED0-00C04FB6E937),
     helpstring("IWMPClosedCaption: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPClosedCaption : IDispatch
   {
     [id(951), propget]
     HRESULT __stdcall SAMIStyle (
       [out retval] BSTR *pbstrSAMIStyle
     );
     [id(951), propput]
     HRESULT __stdcall SAMIStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SAMILang (
       [out retval] BSTR *pbstrSAMILang
     );
     [id(952), propput]
     HRESULT __stdcall SAMILang (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SAMIFileName (
       [out retval] BSTR *pbstrSAMIFileName
     );
     [id(953), propput]
     HRESULT __stdcall SAMIFileName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall captioningId (
       [out retval] BSTR *pbstrCaptioningID
     );
     [id(954), propput]
     HRESULT __stdcall captioningId (
       [in] BSTR argNo1
     );
   };
   [
     uuid(A12DCF7D-14AB-4C1B-A8CD-63909F06025B),
     helpstring("IWMPError: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPError : IDispatch
   {
     [id(851)]
     HRESULT __stdcall clearErrorQueue (void);
     [propget]
     HRESULT __stdcall errorCount (
       [out retval] long *plNumErrors
     );
     [propget]
     HRESULT __stdcall Item (
       [in] long dwIndex,
       [out retval] dispinterface IWMPErrorItem **ppErrorItem
     );
     HRESULT __stdcall webHelp (void);
   };
   [
     uuid(3614C646-3B3B-4DE7-A81E-930E3F2127B3),
     helpstring("IWMPErrorItem: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPErrorItem : IDispatch
   {
     [id(901), propget]
     HRESULT __stdcall errorCode (
       [out retval] long *phr
     );
     [propget]
     HRESULT __stdcall errorDescription (
       [out retval] BSTR *pbstrDescription
     );
     [propget]
     HRESULT __stdcall errorContext (
       [out retval] VARIANT *pvarContext
     );
     [propget]
     HRESULT __stdcall remedy (
       [out retval] long *plRemedy
     );
     [propget]
     HRESULT __stdcall customUrl (
       [out retval] BSTR *pbstrCustomUrl
     );
   };
   [
     uuid(8DA61686-4668-4A5C-AE5D-803193293DBE),
     helpstring("IWMPDVD: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDVD : IDispatch
   {
     [id(1001), propget]
     HRESULT __stdcall isAvailable (
       [in] BSTR bstrItem,
       [out retval] WINBOOL *pIsAvailable
     );
     [propget]
     HRESULT __stdcall domain (
       [out retval] BSTR *strDomain
     );
     HRESULT __stdcall topMenu (void);
     HRESULT __stdcall titleMenu (void);
     HRESULT __stdcall back (void);
     HRESULT __stdcall resume (void);
   };
   [
     uuid(40897764-CEAB-47BE-AD4A-8E28537F9BBF),
     helpstring("IWMPPlayerApplication: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlayerApplication : IDispatch
   {
     [id(1101)]
     HRESULT __stdcall switchToPlayerApplication (void);
     HRESULT __stdcall switchToControl (void);
     [propget]
     HRESULT __stdcall playerDocked (
       [out retval] WINBOOL *pbPlayerDocked
     );
     [propget]
     HRESULT __stdcall hasDisplay (
       [out retval] WINBOOL *pbHasDisplay
     );
   };
   [
     uuid(54062B68-052A-4C25-A39F-8B63346511D4),
     helpstring("IWMPPlayer3: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlayer3 : IWMPCore2
   {
     [id(19), propget]
     HRESULT __stdcall enabled (
       [out retval] WINBOOL *pbEnabled
     );
     [id(19), propput]
     HRESULT __stdcall enabled (
       [in] WINBOOL argNo1
     );
     [id(21), propget]
     HRESULT __stdcall fullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [id(21), propput]
     HRESULT __stdcall fullScreen (
       WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall enableContextMenu (
       [out retval] WINBOOL *pbEnableContextMenu
     );
     [id(22), propput]
     HRESULT __stdcall enableContextMenu (
       WINBOOL argNo1
     );
     [propput]
     HRESULT __stdcall uiMode (
       [in] BSTR argNo1
     );
     [id(23), propget]
     HRESULT __stdcall uiMode (
       [out retval] BSTR *pbstrMode
     );
     [propget]
     HRESULT __stdcall stretchToFit (
       [out retval] WINBOOL *pbEnabled
     );
     [id(24), propput]
     HRESULT __stdcall stretchToFit (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall windowlessVideo (
       [out retval] WINBOOL *pbEnabled
     );
     [id(25), propput]
     HRESULT __stdcall windowlessVideo (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(0E6B01D1-D407-4C85-BF5F-1C01F6150280),
     helpstring("IWMPPlayer2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlayer2 : IWMPCore
   {
     [id(19), propget]
     HRESULT __stdcall enabled (
       [out retval] WINBOOL *pbEnabled
     );
     [id(19), propput]
     HRESULT __stdcall enabled (
       [in] WINBOOL argNo1
     );
     [id(21), propget]
     HRESULT __stdcall fullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [id(21), propput]
     HRESULT __stdcall fullScreen (
       WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall enableContextMenu (
       [out retval] WINBOOL *pbEnableContextMenu
     );
     [id(22), propput]
     HRESULT __stdcall enableContextMenu (
       WINBOOL argNo1
     );
     [propput]
     HRESULT __stdcall uiMode (
       [in] BSTR argNo1
     );
     [id(23), propget]
     HRESULT __stdcall uiMode (
       [out retval] BSTR *pbstrMode
     );
     [propget]
     HRESULT __stdcall stretchToFit (
       [out retval] WINBOOL *pbEnabled
     );
     [id(24), propput]
     HRESULT __stdcall stretchToFit (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall windowlessVideo (
       [out retval] WINBOOL *pbEnabled
     );
     [id(25), propput]
     HRESULT __stdcall windowlessVideo (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(6BF52A4F-394A-11D3-B153-00C04F79FAA6),
     helpstring("IWMPPlayer: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlayer : IWMPCore
   {
     [id(19), propget]
     HRESULT __stdcall enabled (
       [out retval] WINBOOL *pbEnabled
     );
     [id(19), propput]
     HRESULT __stdcall enabled (
       [in] WINBOOL argNo1
     );
     [id(21), propget]
     HRESULT __stdcall fullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [id(21), propput]
     HRESULT __stdcall fullScreen (
       WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall enableContextMenu (
       [out retval] WINBOOL *pbEnableContextMenu
     );
     [id(22), propput]
     HRESULT __stdcall enableContextMenu (
       WINBOOL argNo1
     );
     [propput]
     HRESULT __stdcall uiMode (
       [in] BSTR argNo1
     );
     [id(23), propget]
     HRESULT __stdcall uiMode (
       [out retval] BSTR *pbstrMode
     );
   };
   [
     uuid(F75CCEC0-C67C-475C-931E-8719870BEE7D),
     helpstring("IWMPErrorItem2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPErrorItem2 : IWMPErrorItem
   {
     [id(906), propget]
     HRESULT __stdcall condition (
       [out retval] long *plCondition
     );
   };
   [
     uuid(6F030D25-0890-480F-9775-1F7E40AB5B8E),
     helpstring("IWMPControls2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPControls2 : IWMPControls
   {
     [id(64)]
     HRESULT __stdcall step (
       [in] long lStep
     );
   };
   [
     uuid(AB7C88BB-143E-4EA4-ACC3-E4350B2106C3),
     helpstring("IWMPMedia2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMedia2 : IWMPMedia
   {
     [id(768), propget]
     HRESULT __stdcall Error (
       [out retval] dispinterface IWMPErrorItem **ppIWMPErrorItem
     );
   };
   [
     uuid(F118EFC7-F03A-4FB4-99C9-1C02A5C1065B),
     helpstring("IWMPMedia3: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMedia3 : IWMPMedia2
   {
     [id(769)]
     HRESULT __stdcall getAttributeCountByType (
       [in] BSTR bstrType,
       [in] BSTR bstrLanguage,
       [out retval] long *plCount
     );
     HRESULT __stdcall getItemInfoByType (
       [in] BSTR bstrType,
       [in] BSTR bstrLanguage,
       [in] long lIndex,
       [out retval] VARIANT *pvarValue
     );
   };
   [
     uuid(5C29BBE0-F87D-4C45-AA28-A70F0230FFA9),
     helpstring("IWMPMetadataPicture: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMetadataPicture : IDispatch
   {
     [id(1051), propget]
     HRESULT __stdcall mimeType (
       [out retval] BSTR *pbstrMimeType
     );
     [propget]
     HRESULT __stdcall pictureType (
       [out retval] BSTR *pbstrPictureType
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrDescription
     );
     [propget]
     HRESULT __stdcall URL (
       [out retval] BSTR *pbstrURL
     );
   };
   [
     uuid(769A72DB-13D2-45E2-9C48-53CA9D5B7450),
     helpstring("IWMPMetadataText: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMetadataText : IDispatch
   {
     [id(1056), propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrDescription
     );
     [id(1055), propget]
     HRESULT __stdcall text (
       [out retval] BSTR *pbstrText
     );
   };
   [
     uuid(FDA937A4-EECE-4DA5-A0B6-39BF89ADE2C2),
     helpstring("IWMPSettings2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSettings2 : IWMPSettings
   {
     [id(114), propget]
     HRESULT __stdcall defaultAudioLanguage (
       [out retval] long *plLangID
     );
     [propget]
     HRESULT __stdcall mediaAccessRights (
       [out retval] BSTR *pbstrRights
     );
     HRESULT __stdcall requestMediaAccessRights (
       [in] BSTR bstrDesiredAccess,
       [out retval] WINBOOL *pvbAccepted
     );
   };
   [
     uuid(A1D1110E-D545-476A-9A78-AC3E4CB1E6BD),
     helpstring("IWMPControls3: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPControls3 : IWMPControls2
   {
     [id(65), propget]
     HRESULT __stdcall audioLanguageCount (
       [out retval] long *plCount
     );
     HRESULT __stdcall getAudioLanguageID (
       [in] long lIndex,
       [out retval] long *plLangID
     );
     HRESULT __stdcall getAudioLanguageDescription (
       [in] long lIndex,
       [out retval] BSTR *pbstrLangDesc
     );
     [propget]
     HRESULT __stdcall currentAudioLanguage (
       [out retval] long *plLangID
     );
     [id(68), propput]
     HRESULT __stdcall currentAudioLanguage (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall currentAudioLanguageIndex (
       [out retval] long *plIndex
     );
     [id(69), propput]
     HRESULT __stdcall currentAudioLanguageIndex (
       [in] long argNo1
     );
     HRESULT __stdcall getLanguageName (
       [in] long lLangID,
       [out retval] BSTR *pbstrLangName
     );
     [propget]
     HRESULT __stdcall currentPositionTimecode (
       [out retval] BSTR *bstrTimecode
     );
     [id(71), propput]
     HRESULT __stdcall currentPositionTimecode (
       [in] BSTR argNo1
     );
   };
   [
     uuid(350BA78B-6BC8-4113-A5F5-312056934EB6),
     helpstring("IWMPClosedCaption2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPClosedCaption2 : IWMPClosedCaption
   {
     [id(955), propget]
     HRESULT __stdcall SAMILangCount (
       [out retval] long *plCount
     );
     HRESULT __stdcall getSAMILangName (
       [in] long nIndex,
       [out retval] BSTR *pbstrName
     );
     HRESULT __stdcall getSAMILangID (
       [in] long nIndex,
       [out retval] long *plLangID
     );
     [propget]
     HRESULT __stdcall SAMIStyleCount (
       [out retval] long *plCount
     );
     HRESULT __stdcall getSAMIStyleName (
       [in] long nIndex,
       [out retval] BSTR *pbstrName
     );
   };
   [
     uuid(8BA957F5-FD8C-4791-B82D-F840401EE474),
     helpstring("IWMPMediaCollection2: Public interface for Windows Media Player SDK."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMediaCollection2 : IWMPMediaCollection
   {
     [id(1401)]
     HRESULT __stdcall createQuery (
       [out retval] dispinterface IWMPQuery **ppQuery
     );
     HRESULT __stdcall getPlaylistByQuery (
       [in] dispinterface IWMPQuery *pQuery,
       [in] BSTR bstrMediaType,
       [in] BSTR bstrSortAttribute,
       [in] WINBOOL fSortAscending,
       [out retval] dispinterface IWMPPlaylist **ppPlaylist
     );
     HRESULT __stdcall getStringCollectionByQuery (
       [in] BSTR bstrAttribute,
       [in] dispinterface IWMPQuery *pQuery,
       [in] BSTR bstrMediaType,
       [in] BSTR bstrSortAttribute,
       [in] WINBOOL fSortAscending,
       [out retval] dispinterface IWMPStringCollection **ppStringCollection
     );
     HRESULT __stdcall getByAttributeAndMediaType (
       [in] BSTR bstrAttribute,
       [in] BSTR bstrValue,
       [in] BSTR bstrMediaType,
       [out retval] dispinterface IWMPPlaylist **ppMediaItems
     );
   };
   [
     uuid(A00918F3-A6B0-4BFB-9189-FD834C7BC5A5),
     helpstring("IWMPQuery: Public interface for Windows Media Player SDK."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPQuery : IDispatch
   {
     [id(1351)]
     HRESULT __stdcall addCondition (
       [in] BSTR bstrAttribute,
       [in] BSTR bstrOperator,
       [in] BSTR bstrValue
     );
     HRESULT __stdcall beginNextGroup (void);
   };
   [
     uuid(46AD648D-53F1-4A74-92E2-2A1B68D63FD4),
     helpstring("IWMPStringCollection2: Public interface for Windows Media Player SDK."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPStringCollection2 : IWMPStringCollection
   {
     [id(1451)]
     HRESULT __stdcall isIdentical (
       [in] dispinterface IWMPStringCollection2 *pIWMPStringCollection2,
       [out retval] WINBOOL *pvbool
     );
     HRESULT __stdcall getItemInfo (
       [in] long lCollectionIndex,
       [in] BSTR bstrItemName,
       [out retval] BSTR *pbstrValue
     );
     HRESULT __stdcall getAttributeCountByType (
       [in] long lCollectionIndex,
       [in] BSTR bstrType,
       [in] BSTR bstrLanguage,
       [out retval] long *plCount
     );
     HRESULT __stdcall getItemInfoByType (
       [in] long lCollectionIndex,
       [in] BSTR bstrType,
       [in] BSTR bstrLanguage,
       [in] long lAttributeIndex,
       [out retval] VARIANT *pvarValue
     );
   };
   [
     uuid(5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70),
     helpstring("IWMPPlaylistCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlaylistCtrl : IDispatch
   {
     [id(5601), propget]
     HRESULT __stdcall Playlist (
       [out retval] dispinterface IWMPPlaylist **ppdispPlaylist
     );
     [id(5601), propput]
     HRESULT __stdcall Playlist (
       [in] dispinterface IWMPPlaylist *argNo1
     );
     [propget]
     HRESULT __stdcall columns (
       [out retval] BSTR *pbstrColumns
     );
     [id(5602), propput]
     HRESULT __stdcall columns (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall columnCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall columnOrder (
       [out retval] BSTR *pbstrColumnOrder
     );
     [id(5604), propput]
     HRESULT __stdcall columnOrder (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall columnsVisible (
       [out retval] WINBOOL *pVal
     );
     [id(5605), propput]
     HRESULT __stdcall columnsVisible (
       [in] WINBOOL argNo1
     );
     [id(5607), propget]
     HRESULT __stdcall dropDownVisible (
       [out retval] WINBOOL *pVal
     );
     [id(5607), propput]
     HRESULT __stdcall dropDownVisible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall playlistItemsVisible (
       [out retval] WINBOOL *pVal
     );
     [id(5608), propput]
     HRESULT __stdcall playlistItemsVisible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall checkboxesVisible (
       [out retval] WINBOOL *pVal
     );
     [id(5609), propput]
     HRESULT __stdcall checkboxesVisible (
       [in] WINBOOL argNo1
     );
     [id(5612), propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5612), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall foregroundColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5613), propput]
     HRESULT __stdcall foregroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledItemColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5614), propput]
     HRESULT __stdcall disabledItemColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall itemPlayingColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5615), propput]
     HRESULT __stdcall itemPlayingColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall itemPlayingBackgroundColor (
       [out retval] BSTR *pbstrBackgroundColor
     );
     [id(5616), propput]
     HRESULT __stdcall itemPlayingBackgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundImage (
       [out retval] BSTR *pbstrImage
     );
     [id(5617), propput]
     HRESULT __stdcall backgroundImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall allowItemEditing (
       [out retval] WINBOOL *pVal
     );
     [id(5618), propput]
     HRESULT __stdcall allowItemEditing (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall allowColumnSorting (
       [out retval] WINBOOL *pVal
     );
     [id(5619), propput]
     HRESULT __stdcall allowColumnSorting (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall dropDownList (
       [out retval] BSTR *pbstrList
     );
     [id(5620), propput]
     HRESULT __stdcall dropDownList (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall dropDownToolTip (
       [out retval] BSTR *pbstrToolTip
     );
     [id(5621), propput]
     HRESULT __stdcall dropDownToolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall copying (
       [out retval] WINBOOL *pVal
     );
     [id(5622), propput]
     HRESULT __stdcall copying (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall copy (void);
     HRESULT __stdcall abortCopy (void);
     HRESULT __stdcall deleteSelected (void);
     HRESULT __stdcall deleteSelectedFromLibrary (void);
     [id(5628)]
     HRESULT __stdcall moveSelectedUp (void);
     HRESULT __stdcall moveSelectedDown (void);
     HRESULT __stdcall addSelectedToPlaylist (
       [in] dispinterface IWMPPlaylist *pdispPlaylist
     );
     HRESULT __stdcall getNextSelectedItem (
       [in] long nStartIndex,
       [out retval] long *pnSelected
     );
     HRESULT __stdcall getNextCheckedItem (
       [in] long nStartIndex,
       [out retval] long *pnChecked
     );
     HRESULT __stdcall setSelectedState (
       [in] long nIndex,
       [in] WINBOOL vbSelected
     );
     HRESULT __stdcall setCheckedState (
       [in] long nIndex,
       [in] WINBOOL vbChecked
     );
     HRESULT __stdcall sortColumn (
       [in] long nIndex
     );
     HRESULT __stdcall setColumnResizeMode (
       [in] long nIndex,
       [in] BSTR newMode
     );
     HRESULT __stdcall setColumnWidth (
       [in] long nIndex,
       [in] long nWidth
     );
     [id(5642), propget]
     HRESULT __stdcall itemErrorColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5642), propput]
     HRESULT __stdcall itemErrorColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall itemCount (
       [out retval] long *pnItemCount
     );
     [propget]
     HRESULT __stdcall itemMedia (
       [in] long nIndex,
       [out retval] dispinterface IWMPMedia **ppMedia
     );
     [propget]
     HRESULT __stdcall itemPlaylist (
       [in] long nIndex,
       [out retval] dispinterface IWMPPlaylist **ppPlaylist
     );
     HRESULT __stdcall getNextSelectedItem2 (
       [in] long nStartIndex,
       [out retval] long *pnSelected
     );
     HRESULT __stdcall getNextCheckedItem2 (
       [in] long nStartIndex,
       [out retval] long *pnChecked
     );
     HRESULT __stdcall setSelectedState2 (
       [in] long nIndex,
       [in] WINBOOL vbSelected
     );
     HRESULT __stdcall setCheckedState2 (
       [in] long nIndex,
       [in] WINBOOL vbChecked
     );
     [propget]
     HRESULT __stdcall leftStatus (
       [out retval] BSTR *pbstrStatus
     );
     [id(5650), propput]
     HRESULT __stdcall leftStatus (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall rightStatus (
       [out retval] BSTR *pbstrStatus
     );
     [id(5651), propput]
     HRESULT __stdcall rightStatus (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall editButtonVisible (
       [out retval] WINBOOL *pVal
     );
     [id(5652), propput]
     HRESULT __stdcall editButtonVisible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall dropDownImage (
       [out retval] BSTR *pbstrImage
     );
     [id(5653), propput]
     HRESULT __stdcall dropDownImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall dropDownBackgroundImage (
       [out retval] BSTR *pbstrImage
     );
     [id(5654), propput]
     HRESULT __stdcall dropDownBackgroundImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hueShift (
       [out retval] float *pVal
     );
     [id(5655), propput]
     HRESULT __stdcall hueShift (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall saturation (
       [out retval] float *pVal
     );
     [id(5656), propput]
     HRESULT __stdcall saturation (
       [in] float argNo1
     );
     [id(5658), propget]
     HRESULT __stdcall statusColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5658), propput]
     HRESULT __stdcall statusColor (
       [in] BSTR argNo1
     );
     [id(5660), propget]
     HRESULT __stdcall toolbarVisible (
       [out retval] WINBOOL *pVal
     );
     [id(5660), propput]
     HRESULT __stdcall toolbarVisible (
       [in] WINBOOL argNo1
     );
     [id(5662), propget]
     HRESULT __stdcall itemSelectedColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5662), propput]
     HRESULT __stdcall itemSelectedColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall itemSelectedFocusLostColor (
       [out retval] BSTR *pbstrFocusLostColor
     );
     [id(5663), propput]
     HRESULT __stdcall itemSelectedFocusLostColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall itemSelectedBackgroundColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5664), propput]
     HRESULT __stdcall itemSelectedBackgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall itemSelectedBackgroundFocusLostColor (
       [out retval] BSTR *pbstrFocusLostColor
     );
     [id(5665), propput]
     HRESULT __stdcall itemSelectedBackgroundFocusLostColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundSplitColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5666), propput]
     HRESULT __stdcall backgroundSplitColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall statusTextColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5667), propput]
     HRESULT __stdcall statusTextColor (
       [in] BSTR argNo1
     );
   };
   [
     uuid(E41C88DD-2364-4FF7-A0F5-CA9859AF783F),
     helpstring("IAppDispatch: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IAppDispatch : IDispatch
   {
     [id(100), propget]
     HRESULT __stdcall titlebarVisible (
       [out retval] WINBOOL *pVal
     );
     [id(100), propput]
     HRESULT __stdcall titlebarVisible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall titlebarAutoHide (
       [out retval] WINBOOL *pVal
     );
     [id(101), propput]
     HRESULT __stdcall titlebarAutoHide (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall currentTask (
       [out retval] BSTR *pVal
     );
     [id(102), propput]
     HRESULT __stdcall currentTask (
       [in] BSTR argNo1
     );
     [id(145), propget]
     HRESULT __stdcall libraryBasketMode (
       [out retval] long *pVal
     );
     [id(145), propput]
     HRESULT __stdcall libraryBasketMode (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall libraryBasketWidth (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall breadcrumbItemCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall breadcrumbItemName (
       [in] long lIndex,
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall breadcrumbItemHasMenu (
       [in] long lIndex,
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall breadcrumbItemClick (
       [in] long lIndex
     );
     [id(103), propget]
     HRESULT __stdcall settingsVisible (
       [out retval] WINBOOL *pVal
     );
     [id(103), propput]
     HRESULT __stdcall settingsVisible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall playlistVisible (
       [out retval] WINBOOL *pVal
     );
     [id(104), propput]
     HRESULT __stdcall playlistVisible (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall gotoSkinMode (void);
     [id(143)]
     HRESULT __stdcall gotoPlayerMode (void);
     HRESULT __stdcall gotoLibraryMode (
       [in] long lButton
     );
     [id(125)]
     HRESULT __stdcall navigatePrevious (void);
     HRESULT __stdcall navigateNext (void);
     [id(142)]
     HRESULT __stdcall goFullScreen (void);
     [id(141), propget]
     HRESULT __stdcall fullScreenEnabled (
       [out retval] WINBOOL *pVal
     );
     [id(132), propget]
     HRESULT __stdcall serviceLoginVisible (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall serviceLoginSignedIn (
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall serviceLogin (void);
     HRESULT __stdcall serviceLogout (void);
     [id(140), propget]
     HRESULT __stdcall serviceGetInfo (
       [in] BSTR bstrItem,
       [out retval] VARIANT *pValue
     );
     [id(123), propget]
     HRESULT __stdcall navigatePreviousEnabled (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall navigateNextEnabled (
       [out retval] WINBOOL *pVal
     );
     [id(130)]
     HRESULT __stdcall navigateToAddress (
       [in] BSTR address
     );
     [propget]
     HRESULT __stdcall glassEnabled (
       [out retval] WINBOOL *pVal
     );
     [id(136), propget]
     HRESULT __stdcall inVistaPlus (
       [out retval] WINBOOL *pVal
     );
     [id(106)]
     HRESULT __stdcall adjustLeft (
       [in] long nDistance
     );
     [propget]
     HRESULT __stdcall taskbarVisible (
       [out retval] WINBOOL *pVal
     );
     [id(107), propput]
     HRESULT __stdcall taskbarVisible (
       [in] WINBOOL argNo1
     );
     [id(116), propget]
     HRESULT __stdcall DPI (
       [out retval] long *pVal
     );
     [id(114), propget]
     HRESULT __stdcall previousEnabled (
       [out retval] WINBOOL *pVal
     );
     [id(139), propget]
     HRESULT __stdcall playLibraryItemEnabled (
       [out retval] WINBOOL *pVal
     );
     [id(115)]
     HRESULT __stdcall previous (void);
     [id(108), propget]
     HRESULT __stdcall titlebarCurrentlyVisible (
       [out retval] WINBOOL *pVal
     );
     [id(137), propget]
     HRESULT __stdcall menubarCurrentlyVisible (
       [out retval] WINBOOL *pVal
     );
     [id(109), propget]
     HRESULT __stdcall bgPluginRunning (
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall configurePlugins (
       [in] long nType
     );
     HRESULT __stdcall getTimeString (
       [in] double dTime,
       [out retval] BSTR *pVal
     );
     [id(113), propget]
     HRESULT __stdcall maximized (
       [out retval] WINBOOL *pVal
     );
     [id(117), propget]
     HRESULT __stdcall top (
       [out retval] long *pVal
     );
     [id(117), propput]
     HRESULT __stdcall top (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall left (
       [out retval] long *pVal
     );
     [id(118), propput]
     HRESULT __stdcall left (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall width (
       [out retval] long *pVal
     );
     [id(119), propput]
     HRESULT __stdcall width (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall height (
       [out retval] long *pVal
     );
     [id(120), propput]
     HRESULT __stdcall height (
       [in] long argNo1
     );
     HRESULT __stdcall setWindowPos (
       [in] long lTop,
       [in] long lLeft,
       [in] long lWidth,
       [in] long lHeight
     );
     HRESULT __stdcall logData (
       [in] BSTR ID,
       [in] BSTR data
     );
     [id(127), propget]
     HRESULT __stdcall powerPersonality (
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall navigateNamespace (
       [in] BSTR address
     );
     [propget]
     HRESULT __stdcall exclusiveService (
       [out retval] BSTR *pVal
     );
     [id(138), propput]
     HRESULT __stdcall windowText (
       [in] BSTR argNo1
     );
   };
   [
     uuid(EF870383-83AB-4EA9-BE48-56FA4251AF10),
     helpstring("IWMPSafeBrowser: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSafeBrowser : IDispatch
   {
     [id(8400), propget]
     HRESULT __stdcall URL (
       [out retval] BSTR *pVal
     );
     [id(8400), propput]
     HRESULT __stdcall URL (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall status (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall pendingDownloads (
       [out retval] long *pVal
     );
     HRESULT __stdcall showSAMIText (
       [in] BSTR samiText
     );
     HRESULT __stdcall showLyrics (
       [in] BSTR lyrics
     );
     HRESULT __stdcall loadSpecialPage (
       [in] BSTR pageName
     );
     HRESULT __stdcall goBack (void);
     HRESULT __stdcall goForward (void);
     HRESULT __stdcall stop (void);
     HRESULT __stdcall refresh (void);
     [propget]
     HRESULT __stdcall baseURL (
       [out retval] BSTR *pVal
     );
     [id(8414), propget]
     HRESULT __stdcall fullURL (
       [out retval] BSTR *pVal
     );
     [id(8411), propget]
     HRESULT __stdcall secureLock (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall busy (
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall showCert (void);
   };
   [
     uuid(21D077C1-4BAA-11D3-BD45-00C04F6EA5AE),
     helpstring("IWMPObjectExtendedProps: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPObjectExtendedProps : IDispatch
   {
     [id(2000), propget]
     HRESULT __stdcall ID (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall elementType (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall left (
       [out retval] long *pVal
     );
     [id(2002), propput]
     HRESULT __stdcall left (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall top (
       [out retval] long *pVal
     );
     [id(2003), propput]
     HRESULT __stdcall top (
       [in] long argNo1
     );
     [id(2022), propget]
     HRESULT __stdcall right (
       [out retval] long *pVal
     );
     [id(2022), propput]
     HRESULT __stdcall right (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall bottom (
       [out retval] long *pVal
     );
     [id(2023), propput]
     HRESULT __stdcall bottom (
       [in] long argNo1
     );
     [id(2004), propget]
     HRESULT __stdcall width (
       [out retval] long *pVal
     );
     [id(2004), propput]
     HRESULT __stdcall width (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall height (
       [out retval] long *pVal
     );
     [id(2005), propput]
     HRESULT __stdcall height (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall zIndex (
       [out retval] long *pVal
     );
     [id(2006), propput]
     HRESULT __stdcall zIndex (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall clippingImage (
       [out retval] BSTR *pVal
     );
     [id(2007), propput]
     HRESULT __stdcall clippingImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall clippingColor (
       [out retval] BSTR *pVal
     );
     [id(2008), propput]
     HRESULT __stdcall clippingColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall visible (
       [out retval] WINBOOL *pVal
     );
     [id(2009), propput]
     HRESULT __stdcall visible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall enabled (
       [out retval] WINBOOL *pVal
     );
     [id(2010), propput]
     HRESULT __stdcall enabled (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall tabStop (
       [out retval] WINBOOL *pVal
     );
     [id(2011), propput]
     HRESULT __stdcall tabStop (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall passThrough (
       [out retval] WINBOOL *pVal
     );
     [id(2012), propput]
     HRESULT __stdcall passThrough (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall horizontalAlignment (
       [out retval] BSTR *pVal
     );
     [id(2013), propput]
     HRESULT __stdcall horizontalAlignment (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall verticalAlignment (
       [out retval] BSTR *pVal
     );
     [id(2014), propput]
     HRESULT __stdcall verticalAlignment (
       [in] BSTR argNo1
     );
     HRESULT __stdcall moveTo (
       [in] long newX,
       [in] long newY,
       [in] long moveTime
     );
     [id(2021)]
     HRESULT __stdcall slideTo (
       [in] long newX,
       [in] long newY,
       [in] long moveTime
     );
     [id(2026)]
     HRESULT __stdcall moveSizeTo (
       [in] long newX,
       [in] long newY,
       [in] long newWidth,
       [in] long newHeight,
       [in] long moveTime,
       [in] WINBOOL fSlide
     );
     [id(2016), propget]
     HRESULT __stdcall alphaBlend (
       [out retval] long *pVal
     );
     [id(2016), propput]
     HRESULT __stdcall alphaBlend (
       [in] long argNo1
     );
     HRESULT __stdcall alphaBlendTo (
       [in] long newVal,
       [in] long alphaTime
     );
     [propget]
     HRESULT __stdcall accName (
       [out retval] BSTR *pszName
     );
     [id(2018), propput]
     HRESULT __stdcall accName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall accDescription (
       [out retval] BSTR *pszDesc
     );
     [id(2019), propput]
     HRESULT __stdcall accDescription (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall accKeyboardShortcut (
       [out retval] BSTR *pszShortcut
     );
     [id(2020), propput]
     HRESULT __stdcall accKeyboardShortcut (
       [in] BSTR argNo1
     );
     [id(2024), propget]
     HRESULT __stdcall resizeImages (
       [out retval] WINBOOL *pVal
     );
     [id(2024), propput]
     HRESULT __stdcall resizeImages (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall nineGridMargins (
       [out retval] BSTR *pszMargins
     );
     [id(2025), propput]
     HRESULT __stdcall nineGridMargins (
       [in] BSTR argNo1
     );
     [id(2027), propget]
     HRESULT __stdcall resizeOptimize (
       [out retval] BSTR *ppszResizeOptimize
     );
     [id(2027), propput]
     HRESULT __stdcall resizeOptimize (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall rotation (
       [out retval] float *pfVal
     );
     [id(2028), propput]
     HRESULT __stdcall rotation (
       [in] float argNo1
     );
   };
   [
     uuid(72F486B1-0D43-11D3-BD3F-00C04F6EA5AE),
     helpstring("IWMPLayoutSubView: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPLayoutSubView : IWMPObjectExtendedProps
   {
     [id(2300), propget]
     HRESULT __stdcall transparencyColor (
       [out retval] BSTR *pVal
     );
     [id(2300), propput]
     HRESULT __stdcall transparencyColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(2301), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundImage (
       [out retval] BSTR *pVal
     );
     [id(2302), propput]
     HRESULT __stdcall backgroundImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundTiled (
       [out retval] WINBOOL *pVal
     );
     [id(2303), propput]
     HRESULT __stdcall backgroundTiled (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall backgroundImageHueShift (
       [out retval] float *pVal
     );
     [id(2304), propput]
     HRESULT __stdcall backgroundImageHueShift (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall backgroundImageSaturation (
       [out retval] float *pVal
     );
     [id(2305), propput]
     HRESULT __stdcall backgroundImageSaturation (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall resizeBackgroundImage (
       [out retval] WINBOOL *pVal
     );
     [id(2306), propput]
     HRESULT __stdcall resizeBackgroundImage (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(172E905D-80D9-4C2F-B7CE-2CCB771787A2),
     helpstring("IWMPLayoutView: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPLayoutView : IWMPLayoutSubView
   {
     [id(2307), propget]
     HRESULT __stdcall title (
       [out retval] BSTR *pVal
     );
     [id(2307), propput]
     HRESULT __stdcall title (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall category (
       [out retval] BSTR *pVal
     );
     [id(2308), propput]
     HRESULT __stdcall category (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall focusObjectID (
       [out retval] BSTR *pVal
     );
     [id(2309), propput]
     HRESULT __stdcall focusObjectID (
       [in] BSTR argNo1
     );
     [id(2311), propget]
     HRESULT __stdcall titleBar (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall resizable (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall timerInterval (
       [out retval] long *pVal
     );
     [id(2313), propput]
     HRESULT __stdcall timerInterval (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall minWidth (
       [out retval] long *pVal
     );
     [id(2314), propput]
     HRESULT __stdcall minWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall maxWidth (
       [out retval] long *pVal
     );
     [id(2315), propput]
     HRESULT __stdcall maxWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall minHeight (
       [out retval] long *pVal
     );
     [id(2316), propput]
     HRESULT __stdcall minHeight (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall maxHeight (
       [out retval] long *pVal
     );
     [id(2317), propput]
     HRESULT __stdcall maxHeight (
       [in] long argNo1
     );
     HRESULT __stdcall close (void);
     HRESULT __stdcall minimize (void);
     HRESULT __stdcall maximize (void);
     HRESULT __stdcall restore (void);
     HRESULT __stdcall size (
       [in] BSTR bstrDirection
     );
     HRESULT __stdcall returnToMediaCenter (void);
     HRESULT __stdcall updateWindow (void);
     [id(2326), propget]
     HRESULT __stdcall maximized (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall minimized (
       [out retval] WINBOOL *pVal
     );
   };
   [
     uuid(5AF0BEC1-46AA-11D3-BD45-00C04F6EA5AE),
     helpstring("IWMPEventObject: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPEventObject : IDispatch
   {
     [id(2200), propget]
     HRESULT __stdcall srcElement (
       [out retval] IDispatch **p
     );
     [propget]
     HRESULT __stdcall altKey (
       [out retval] WINBOOL *p
     );
     [propget]
     HRESULT __stdcall ctrlKey (
       [out retval] WINBOOL *p
     );
     [propget]
     HRESULT __stdcall shiftKey (
       [out retval] WINBOOL *p
     );
     [propget]
     HRESULT __stdcall fromElement (
       [out retval] IDispatch **p
     );
     [propget]
     HRESULT __stdcall toElement (
       [out retval] IDispatch **p
     );
     [propput]
     HRESULT __stdcall keyCode (
       [in] long argNo1
     );
     [id(2206), propget]
     HRESULT __stdcall keyCode (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall button (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall x (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall y (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall clientX (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall clientY (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall offsetX (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall offsetY (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall screenX (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall screenY (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall screenWidth (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall screenHeight (
       [out retval] long *p
     );
     [propget]
     HRESULT __stdcall penOrTouch (
       [out retval] WINBOOL *p
     );
   };
   [
     uuid(6FCAE13D-E492-4584-9C21-D2C052A2A33A),
     helpstring("IWMPTheme: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPTheme : IDispatch
   {
     [id(2500), propget]
     HRESULT __stdcall title (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall version (
       [out retval] float *pfVersion
     );
     [propget]
     HRESULT __stdcall authorVersion (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall author (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall copyright (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall currentViewID (
       [out retval] BSTR *pVal
     );
     [id(2505), propput]
     HRESULT __stdcall currentViewID (
       [in] BSTR argNo1
     );
     HRESULT __stdcall showErrorDialog (void);
     HRESULT __stdcall logString (
       [in] BSTR stringVal
     );
     HRESULT __stdcall openView (
       [in] BSTR viewID
     );
     [id(2515)]
     HRESULT __stdcall openViewRelative (
       [in] BSTR viewID,
       [in] long x,
       [in] long y,
       [out retval] IDispatch **ppView
     );
     [id(2509)]
     HRESULT __stdcall closeView (
       [in] BSTR viewID
     );
     HRESULT __stdcall openDialog (
       [in] BSTR dialogType,
       [in] BSTR parameters,
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall loadString (
       [in] BSTR bstrString,
       [out retval] BSTR *pbstrReturn
     );
     HRESULT __stdcall loadPreference (
       [in] BSTR bstrName,
       [out retval] BSTR *pbstrValue
     );
     HRESULT __stdcall savePreference (
       [in] BSTR bstrName,
       [in] BSTR bstrValue
     );
     HRESULT __stdcall playSound (
       BSTR bstrFilename
     );
     [id(2516)]
     HRESULT __stdcall openViewRelativeInternal (
       [in] BSTR viewID,
       [in] long nIndex,
       [in] long x,
       [in] long y,
       [in] long nWidth,
       [in] long nHeight,
       [in] BSTR bstrHorizontalAlignment,
       [in] BSTR bstrVerticalAlignment,
       [out retval] IDispatch **ppView
     );
     [id(2518)]
     HRESULT __stdcall setViewPosition (
       [in] BSTR viewID,
       [in] long nIndex,
       [in] long x,
       [in] long y,
       [in] long nWidth,
       [in] long nHeight,
       [in] BSTR bstrHorizontalAlignment,
       [in] BSTR bstrVerticalAlignment
     );
   };
   [
     uuid(B2C2D18E-97AF-4B6A-A56B-2FFFF470FB81),
     helpstring("IWMPLayoutSettingsDispatch: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPLayoutSettingsDispatch : IDispatch
   {
     [id(2800), propget]
     HRESULT __stdcall effectType (
       [out retval] BSTR *pVal
     );
     [id(2800), propput]
     HRESULT __stdcall effectType (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall effectPreset (
       [out retval] long *pVal
     );
     [id(2801), propput]
     HRESULT __stdcall effectPreset (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall settingsView (
       [out retval] BSTR *pVal
     );
     [id(2802), propput]
     HRESULT __stdcall settingsView (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall videoZoom (
       [out retval] long *pVal
     );
     [id(2803), propput]
     HRESULT __stdcall videoZoom (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall videoShrinkToFit (
       [out retval] WINBOOL *pVal
     );
     [id(2804), propput]
     HRESULT __stdcall videoShrinkToFit (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall videoStretchToFit (
       [out retval] WINBOOL *pVal
     );
     [id(2805), propput]
     HRESULT __stdcall videoStretchToFit (
       [in] WINBOOL argNo1
     );
     [id(2868), propget]
     HRESULT __stdcall userVideoStretchToFit (
       [out retval] WINBOOL *pVal
     );
     [id(2868), propput]
     HRESULT __stdcall userVideoStretchToFit (
       [in] WINBOOL argNo1
     );
     [id(2807), propget]
     HRESULT __stdcall showCaptions (
       [out retval] WINBOOL *pVal
     );
     [id(2807), propput]
     HRESULT __stdcall showCaptions (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall showTitles (
       [out retval] WINBOOL *pVal
     );
     [id(2808), propput]
     HRESULT __stdcall showTitles (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall showEffects (
       [out retval] WINBOOL *pVal
     );
     [id(2809), propput]
     HRESULT __stdcall showEffects (
       [in] WINBOOL argNo1
     );
     [id(2811), propget]
     HRESULT __stdcall showFullScreenPlaylist (
       [out retval] WINBOOL *pVal
     );
     [id(2811), propput]
     HRESULT __stdcall showFullScreenPlaylist (
       [in] WINBOOL argNo1
     );
     [id(2813), propget]
     HRESULT __stdcall contrastMode (
       [out retval] BSTR *pVal
     );
     [id(2810)]
     HRESULT __stdcall getNamedString (
       [in] BSTR bstrName,
       [out retval] BSTR *pbstrVal
     );
     [id(2815)]
     HRESULT __stdcall getDurationStringFromSeconds (
       [in] long lDurationVal,
       [out retval] BSTR *pbstrVal
     );
     [propget]
     HRESULT __stdcall displayView (
       [out retval] BSTR *pVal
     );
     [id(2816), propput]
     HRESULT __stdcall displayView (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall metadataView (
       [out retval] BSTR *pVal
     );
     [id(2817), propput]
     HRESULT __stdcall metadataView (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall showSettings (
       [out retval] WINBOOL *pVal
     );
     [id(2818), propput]
     HRESULT __stdcall showSettings (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall showResizeBars (
       [out retval] WINBOOL *pVal
     );
     [id(2819), propput]
     HRESULT __stdcall showResizeBars (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall showPlaylist (
       [out retval] WINBOOL *pVal
     );
     [id(2820), propput]
     HRESULT __stdcall showPlaylist (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall showMetadata (
       [out retval] WINBOOL *pVal
     );
     [id(2821), propput]
     HRESULT __stdcall showMetadata (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall settingsWidth (
       [out retval] long *pVal
     );
     [id(2822), propput]
     HRESULT __stdcall settingsWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall settingsHeight (
       [out retval] long *pVal
     );
     [id(2823), propput]
     HRESULT __stdcall settingsHeight (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall playlistWidth (
       [out retval] long *pVal
     );
     [id(2824), propput]
     HRESULT __stdcall playlistWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall playlistHeight (
       [out retval] long *pVal
     );
     [id(2825), propput]
     HRESULT __stdcall playlistHeight (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall metadataWidth (
       [out retval] long *pVal
     );
     [id(2826), propput]
     HRESULT __stdcall metadataWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall metadataHeight (
       [out retval] long *pVal
     );
     [id(2827), propput]
     HRESULT __stdcall metadataHeight (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall fullScreenAvailable (
       [out retval] WINBOOL *pVal
     );
     [id(2828), propput]
     HRESULT __stdcall fullScreenAvailable (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall fullScreenRequest (
       [out retval] WINBOOL *pVal
     );
     [id(2829), propput]
     HRESULT __stdcall fullScreenRequest (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall quickHide (
       [out retval] WINBOOL *pVal
     );
     [id(2830), propput]
     HRESULT __stdcall quickHide (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall displayPreset (
       [out retval] long *pVal
     );
     [id(2831), propput]
     HRESULT __stdcall displayPreset (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall settingsPreset (
       [out retval] long *pVal
     );
     [id(2832), propput]
     HRESULT __stdcall settingsPreset (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall metadataPreset (
       [out retval] long *pVal
     );
     [id(2833), propput]
     HRESULT __stdcall metadataPreset (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall userDisplayView (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall userWMPDisplayView (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall userDisplayPreset (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall userWMPDisplayPreset (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall dynamicRangeControl (
       [out retval] long *pVal
     );
     [id(2838), propput]
     HRESULT __stdcall dynamicRangeControl (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall slowRate (
       [out retval] float *pVal
     );
     [id(2839), propput]
     HRESULT __stdcall slowRate (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall fastRate (
       [out retval] float *pVal
     );
     [id(2840), propput]
     HRESULT __stdcall fastRate (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall buttonHueShift (
       [out retval] float *pVal
     );
     [id(2841), propput]
     HRESULT __stdcall buttonHueShift (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall buttonSaturation (
       [out retval] float *pVal
     );
     [id(2842), propput]
     HRESULT __stdcall buttonSaturation (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall backHueShift (
       [out retval] float *pVal
     );
     [id(2843), propput]
     HRESULT __stdcall backHueShift (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall backSaturation (
       [out retval] float *pVal
     );
     [id(2844), propput]
     HRESULT __stdcall backSaturation (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall vizRequest (
       [out retval] long *pVal
     );
     [id(2845), propput]
     HRESULT __stdcall vizRequest (
       [in] long argNo1
     );
     [id(2847), propget]
     HRESULT __stdcall appColorLight (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorMedium (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorDark (
       [out retval] BSTR *pVal
     );
     [id(2856), propget]
     HRESULT __stdcall toolbarButtonHighlight (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall toolbarButtonShadow (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall toolbarButtonFace (
       [out retval] BSTR *pVal
     );
     [id(2850), propget]
     HRESULT __stdcall itemPlayingColor (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall itemPlayingBackgroundColor (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall itemErrorColor (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorLimited (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall appColorBlackBackground (
       [out retval] WINBOOL *pVal
     );
     [id(2854), propput]
     HRESULT __stdcall appColorBlackBackground (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall appColorVideoBorder (
       [out retval] BSTR *pVal
     );
     [id(2855), propput]
     HRESULT __stdcall appColorVideoBorder (
       [in] BSTR argNo1
     );
     [id(2869), propget]
     HRESULT __stdcall appColorAux1 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux2 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux3 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux4 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux5 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux6 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux7 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux8 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux9 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux10 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux11 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux12 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux13 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux14 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall appColorAux15 (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall status (
       [out retval] BSTR *pVal
     );
     [id(2884), propput]
     HRESULT __stdcall status (
       [in] BSTR argNo1
     );
     [id(2859), propget]
     HRESULT __stdcall userWMPSettingsView (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall userWMPSettingsPreset (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall userWMPShowSettings (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall userWMPMetadataView (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall userWMPMetadataPreset (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall userWMPShowMetadata (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall captionsHeight (
       [out retval] long *pVal
     );
     [id(2865), propput]
     HRESULT __stdcall captionsHeight (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall snapToVideo (
       [out retval] WINBOOL *pVal
     );
     [id(2866), propput]
     HRESULT __stdcall snapToVideo (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall pinFullScreenControls (
       [out retval] WINBOOL *pVal
     );
     [id(2867), propput]
     HRESULT __stdcall pinFullScreenControls (
       [in] WINBOOL argNo1
     );
     [id(2887), propget]
     HRESULT __stdcall isMultiMon (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall exclusiveHueShift (
       [out retval] float *pVal
     );
     [id(2888), propput]
     HRESULT __stdcall exclusiveHueShift (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall exclusiveSaturation (
       [out retval] float *pVal
     );
     [id(2889), propput]
     HRESULT __stdcall exclusiveSaturation (
       [in] float argNo1
     );
     [id(2892), propget]
     HRESULT __stdcall themeBkgColorIsActive (
       [out retval] WINBOOL *pVal
     );
     [id(2892), propput]
     HRESULT __stdcall themeBkgColorIsActive (
       [in] WINBOOL argNo1
     );
     [id(2890), propget]
     HRESULT __stdcall themeBkgColorActive (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall themeBkgColorInactive (
       [out retval] BSTR *pVal
     );
   };
   [
     uuid(43D5AE92-4332-477C-8883-E0B3B063C5D2),
     helpstring("IWMPWindow: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPWindow : IDispatch
   {
     [id(3300)]
     HRESULT __stdcall setWindowPos (
       [in] long x,
       [in] long y,
       [in] long height,
       [in] long width
     );
     [propget]
     HRESULT __stdcall frameRate (
       [out retval] long *pVal
     );
     [id(3301), propput]
     HRESULT __stdcall frameRate (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall mouseX (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall mouseY (
       [out retval] long *pVal
     );
     [propput]
     HRESULT __stdcall onsizing (
       [in] IDispatch * argNo1
     );
     HRESULT __stdcall openViewAlwaysOnTop (
       BSTR bstrViewID
     );
   };
   [
     uuid(98BB02D4-ED74-43CC-AD6A-45888F2E0DCC),
     helpstring("IWMPBrandDispatch: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPBrandDispatch : IDispatch
   {
     [id(3040), propget]
     HRESULT __stdcall fullServiceName (
       [out retval] BSTR *pVal
     );
     [id(3000), propget]
     HRESULT __stdcall friendlyName (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall guideButtonText (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall guideButtonTip (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall guideMenuText (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall guideAccText (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall task1ButtonText (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall task1ButtonTip (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall task1MenuText (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall task1AccText (
       [out retval] BSTR *pVal
     );
     [id(3017), propget]
     HRESULT __stdcall guideUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall task1Url (
       [out retval] BSTR *pVal
     );
     [id(3021), propget]
     HRESULT __stdcall imageLargeUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall imageSmallUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall imageMenuUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall infoCenterUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall albumInfoUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall buyCDUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall htmlViewUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall navigateUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall cookieUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall downloadStatusUrl (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall colorPlayer (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall colorPlayerText (
       [out retval] BSTR *pVal
     );
     [id(3035), propget]
     HRESULT __stdcall navigateDispid (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall navigateParams (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall navigatePane (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall selectedPane (
       [out retval] BSTR *pVal
     );
     [id(3038), propput]
     HRESULT __stdcall selectedPane (
       [in] BSTR argNo1
     );
     [id(3041)]
     HRESULT __stdcall setNavigateProps (
       [in] BSTR bstrPane,
       [in] long lDispid,
       [in] BSTR bstrParams
     );
     HRESULT __stdcall getMediaParams (
       [in] IUnknown * pObject,
       [in] BSTR bstrURL,
       [out retval] BSTR *pbstrResult
     );
     [id(3039), propput]
     HRESULT __stdcall selectedTask (
       [in] long argNo1
     );
     [id(3043), propget]
     HRESULT __stdcall contentPartnerSelected (
       [out retval] WINBOOL *pVal
     );
   };
   [
     uuid(504F112E-77CC-4E3C-A073-5371B31D9B36),
     helpstring("IWMPNowPlayingHelperDispatch: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPNowPlayingHelperDispatch : IDispatch
   {
     [id(2901), propget]
     HRESULT __stdcall viewFriendlyName (
       [in] BSTR bstrView,
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall viewPresetCount (
       [in] BSTR bstrView,
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall viewPresetName (
       [in] BSTR bstrView,
       [in] long nPresetIndex,
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall effectFriendlyName (
       [in] BSTR bstrEffect,
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall effectPresetName (
       [in] BSTR bstrEffect,
       [in] long nPresetIndex,
       [out retval] BSTR *pVal
     );
     [id(2909)]
     HRESULT __stdcall resolveDisplayView (
       [in] WINBOOL fSafe,
       [out retval] BSTR *pbstrVal
     );
     HRESULT __stdcall isValidDisplayView (
       [in] BSTR bstrView,
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall getSkinFile (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall captionsAvailable (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall linkAvailable (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall linkRequest (
       [out retval] long *pVal
     );
     [id(2914), propput]
     HRESULT __stdcall linkRequest (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall linkRequestParams (
       [out retval] BSTR *pVal
     );
     [id(2915), propput]
     HRESULT __stdcall linkRequestParams (
       [in] BSTR argNo1
     );
     [id(2917)]
     HRESULT __stdcall getCurrentArtID (
       [in] WINBOOL fLargeArt,
       [out retval] long *pVal
     );
     HRESULT __stdcall getTimeString (
       [in] double dTime,
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall getCurrentScriptCommand (
       [in] BSTR bstrType,
       [out retval] BSTR *pbstrCommand
     );
     HRESULT __stdcall calcLayout (
       [in] long lWidth,
       [in] long lHeight,
       [in] WINBOOL vbCaptions,
       [in] WINBOOL vbBanner
     );
     HRESULT __stdcall getLayoutSize (
       [in] long nProp,
       [out retval] long *plValue
     );
     HRESULT __stdcall getRootPlaylist (
       [in] IDispatch * pPlaylist,
       [out retval] IDispatch **ppRootPlaylist
     );
     HRESULT __stdcall getHTMLViewURL (
       [out retval] BSTR *pVal
     );
     [id(2926), propget]
     HRESULT __stdcall editObj (
       [out retval] IUnknown **ppVal
     );
     [id(2926), propput]
     HRESULT __stdcall editObj (
       [in] IUnknown * argNo1
     );
     HRESULT __stdcall getStatusString (
       [in] BSTR bstrStatusId,
       [out retval] BSTR *pbstrStatus
     );
     [id(2939)]
     HRESULT __stdcall getStatusPct (
       [in] BSTR bstrStatusId,
       [out retval] long *pvResult
     );
     HRESULT __stdcall getStatusResult (
       [in] BSTR bstrStatusId,
       [out retval] long *pvResult
     );
     HRESULT __stdcall getStatusIcon (
       [in] BSTR bstrStatusId,
       [out retval] long *pvResult
     );
     HRESULT __stdcall getStatusIdList (
       [out retval] BSTR *pbstrStatus
     );
     [id(2928), propget]
     HRESULT __stdcall notificationString (
       [out retval] BSTR *pbstrNotificationString
     );
     [id(2930), propget]
     HRESULT __stdcall htmlViewBaseURL (
       [out retval] BSTR *pVal
     );
     [id(2930), propput]
     HRESULT __stdcall htmlViewBaseURL (
       [in] BSTR argNo1
     );
     [id(2933), propget]
     HRESULT __stdcall htmlViewFullURL (
       [out retval] BSTR *pVal
     );
     [id(2933), propput]
     HRESULT __stdcall htmlViewFullURL (
       [in] BSTR argNo1
     );
     [id(2929), propget]
     HRESULT __stdcall htmlViewSecureLock (
       [out retval] long *pVal
     );
     [id(2929), propput]
     HRESULT __stdcall htmlViewSecureLock (
       [in] long argNo1
     );
     [id(2931), propget]
     HRESULT __stdcall htmlViewBusy (
       [out retval] WINBOOL *pVal
     );
     [id(2931), propput]
     HRESULT __stdcall htmlViewBusy (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall htmlViewShowCert (
       [out retval] WINBOOL *pVal
     );
     [id(2932), propput]
     HRESULT __stdcall htmlViewShowCert (
       [in] WINBOOL argNo1
     );
     [id(2934), propget]
     HRESULT __stdcall previousEnabled (
       [out retval] WINBOOL *pVal
     );
     [id(2934), propput]
     HRESULT __stdcall previousEnabled (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall doPreviousNow (
       [out retval] WINBOOL *pVal
     );
     [id(2935), propput]
     HRESULT __stdcall doPreviousNow (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall DPI (
       [out retval] long *pVal
     );
     HRESULT __stdcall clearColors (void);
     [propget]
     HRESULT __stdcall lastMessage (
       [out retval] BSTR *pVal
     );
     [id(2938), propput]
     HRESULT __stdcall lastMessage (
       [in] BSTR argNo1
     );
     [id(2943), propget]
     HRESULT __stdcall inVistaPlus (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall isBidi (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall isOCX (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall hoverTransportsEnabled (
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall initRipHelper (void);
     [propget]
     HRESULT __stdcall isAudioCD (
       [out retval] WINBOOL *pVal
     );
     [id(2948), propput]
     HRESULT __stdcall isAudioCD (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall canRip (
       [out retval] WINBOOL *pVal
     );
     [id(2949), propput]
     HRESULT __stdcall canRip (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall isRipping (
       [out retval] WINBOOL *pVal
     );
     [id(2950), propput]
     HRESULT __stdcall isRipping (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall currentDrive (
       [out retval] BSTR *pVal
     );
     [id(2951), propput]
     HRESULT __stdcall currentDrive (
       [in] BSTR argNo1
     );
     HRESULT __stdcall startRip (void);
     HRESULT __stdcall stopRip (void);
     [propget]
     HRESULT __stdcall showMMO (
       [out retval] WINBOOL *pVal
     );
     [id(2954), propput]
     HRESULT __stdcall showMMO (
       [in] WINBOOL argNo1
     );
     [id(2971), propget]
     HRESULT __stdcall MMOVisible (
       [out retval] WINBOOL *pVal
     );
     [id(2955), propget]
     HRESULT __stdcall suggestionsVisible (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall suggestionsTextColor (
       [out retval] BSTR *pVal
     );
     [id(2964), propget]
     HRESULT __stdcall fontFace (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall fontSize (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(2957), propget]
     HRESULT __stdcall doubleClickTime (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall playAgain (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall previousPlaylistAvailable (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall nextPlaylistAvailable (
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall nextPlaylist (void);
     HRESULT __stdcall previousPlaylist (void);
     [id(2972)]
     HRESULT __stdcall playOffsetMedia (
       [in] long iOffset
     );
     [id(2963), propget]
     HRESULT __stdcall basketVisible (
       [out retval] WINBOOL *pVal
     );
     [id(2963), propput]
     HRESULT __stdcall basketVisible (
       [in] WINBOOL argNo1
     );
     [id(2967), propget]
     HRESULT __stdcall mmoTextColor (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall backgroundVisible (
       [out retval] WINBOOL *pVal
     );
     [propput]
     HRESULT __stdcall backgroundEnabled (
       [in] WINBOOL argNo1
     );
     [id(2969), propget]
     HRESULT __stdcall backgroundEnabled (
       [out retval] WINBOOL *pVal
     );
     [propput]
     HRESULT __stdcall backgroundIndex (
       [in] long argNo1
     );
     [id(2970), propget]
     HRESULT __stdcall backgroundIndex (
       [out retval] long *pVal
     );
     [id(2973), propget]
     HRESULT __stdcall upNext (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall playbackOverlayVisible (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall remoted (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall glassEnabled (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall highContrast (
       [out retval] WINBOOL *pVal
     );
     [propput]
     HRESULT __stdcall testHighContrast (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall sessionPlaylistCount (
       [out] long *pVal
     );
     HRESULT __stdcall setGestureStatus (
       [in] IDispatch * pObject,
       [in] long newVal
     );
     [propget]
     HRESULT __stdcall metadataString (
       [out retval] BSTR *pVal
     );
     [id(2981), propput]
     HRESULT __stdcall metadataString (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall albumArtAlpha (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall playerModeAlbumArtSelected (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall inFullScreen (
       [out retval] WINBOOL *pVal
     );
     HRESULT __stdcall syncToAlbumArt (
       [in] IDispatch * pObject,
       [in] long iOffsetFromCurrentMedia,
       [in] BSTR bstrFallbackImage
     );
   };
   [
     uuid(2A2E0DA3-19FA-4F82-BE18-CD7D7A3B977F),
     helpstring("IWMPNowDoingDispatch: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPNowDoingDispatch : IDispatch
   {
     [id(3221)]
     HRESULT __stdcall buyContent (void);
     HRESULT __stdcall hideBasket (void);
     [id(3211)]
     HRESULT __stdcall burnNavigateToStatus (void);
     [id(3220)]
     HRESULT __stdcall syncNavigateToStatus (void);
     [id(3223), propget]
     HRESULT __stdcall DPI (
       [out retval] long *pVal
     );
     [id(3200), propget]
     HRESULT __stdcall mode (
       [out retval] BSTR *pVal
     );
     [id(3206), propput]
     HRESULT __stdcall burn_selectedDrive (
       [in] long argNo1
     );
     [id(3206), propget]
     HRESULT __stdcall burn_selectedDrive (
       [out retval] long *pVal
     );
     [id(3216), propget]
     HRESULT __stdcall sync_selectedDevice (
       [out retval] long *pVal
     );
     [id(3216), propput]
     HRESULT __stdcall sync_selectedDevice (
       [in] long argNo1
     );
     [id(3208), propget]
     HRESULT __stdcall burn_numDiscsSpanned (
       [out retval] long *pVal
     );
     [id(3225), propget]
     HRESULT __stdcall editPlaylist (
       [out retval] IDispatch **ppEditPlaylist
     );
     [id(3227), propget]
     HRESULT __stdcall basketPlaylistName (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall isHighContrastMode (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall allowRating (
       [out retval] WINBOOL *pVal
     );
     [propget]
     HRESULT __stdcall allowShop (
       [out retval] WINBOOL *pVal
     );
     [id(3201), propget]
     HRESULT __stdcall burn_mediaType (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall burn_contentType (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall burn_freeSpace (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall burn_totalSpace (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall burn_driveName (
       [out retval] BSTR *pVal
     );
     [id(3207), propget]
     HRESULT __stdcall burn_numDevices (
       [out retval] long *pVal
     );
     [id(3209), propget]
     HRESULT __stdcall burn_spaceToUse (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall burn_percentComplete (
       [out retval] long *pVal
     );
     [id(3212), propget]
     HRESULT __stdcall sync_spaceToUse (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall sync_spaceUsed (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall sync_totalSpace (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall sync_deviceName (
       [out retval] BSTR *pVal
     );
     [id(3217), propget]
     HRESULT __stdcall sync_numDevices (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall sync_oemName (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall sync_percentComplete (
       [out retval] long *pVal
     );
     [id(3224)]
     HRESULT __stdcall logData (
       [in] BSTR ID,
       [in] BSTR data
     );
     [id(3226)]
     HRESULT __stdcall formatTime (
       [in] long value,
       [out retval] BSTR *pbstrReturn
     );
   };
   [
     uuid(946B023E-044C-4473-8018-74954F09DC7E),
     helpstring("IWMPHoverPreviewDispatch: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPHoverPreviewDispatch : IDispatch
   {
     [id(3150), propget]
     HRESULT __stdcall title (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall album (
       [out retval] BSTR *pVal
     );
     [id(3153), propget]
     HRESULT __stdcall URL (
       [out retval] BSTR *pVal
     );
     [id(3152), propput]
     HRESULT __stdcall image (
       [in] IDispatch * argNo1
     );
     [id(3155), propput]
     HRESULT __stdcall autoClick (
       [in] WINBOOL argNo1
     );
     [id(3154), propput]
     HRESULT __stdcall previewClick (
       [in] WINBOOL argNo1
     );
     [id(3156)]
     HRESULT __stdcall dismiss (void);
   };
   [
     uuid(BB17FFF7-1692-4555-918A-6AF7BFACEDD2),
     helpstring("IWMPButtonCtrlEvents: Public interface for skin object model."),
     dispatchable
   ]
   dispinterface IWMPButtonCtrlEvents
   {
     [id(5120)]
     HRESULT __stdcall onclick (void);
   };
   [
     uuid(87291B50-0C8E-11D3-BB2A-00A0C93CA73A),
     helpstring("IWMPButtonCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPButtonCtrl : IDispatch
   {
     [id(5102), propget]
     HRESULT __stdcall image (
       [out retval] BSTR *pVal
     );
     [id(5102), propput]
     HRESULT __stdcall image (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverImage (
       [out retval] BSTR *pVal
     );
     [id(5103), propput]
     HRESULT __stdcall hoverImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall downImage (
       [out retval] BSTR *pVal
     );
     [id(5104), propput]
     HRESULT __stdcall downImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledImage (
       [out retval] BSTR *pVal
     );
     [id(5105), propput]
     HRESULT __stdcall disabledImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverDownImage (
       [out retval] BSTR *pVal
     );
     [id(5106), propput]
     HRESULT __stdcall hoverDownImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall tiled (
       [out retval] WINBOOL *pVal
     );
     [id(5107), propput]
     HRESULT __stdcall tiled (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall transparencyColor (
       [out retval] BSTR *pVal
     );
     [id(5108), propput]
     HRESULT __stdcall transparencyColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall down (
       [out retval] WINBOOL *pVal
     );
     [id(5109), propput]
     HRESULT __stdcall down (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall sticky (
       [out retval] WINBOOL *pVal
     );
     [id(5110), propput]
     HRESULT __stdcall sticky (
       [in] WINBOOL argNo1
     );
     [id(5112), propget]
     HRESULT __stdcall upToolTip (
       [out retval] BSTR *pVal
     );
     [id(5112), propput]
     HRESULT __stdcall upToolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall downToolTip (
       [out retval] BSTR *pVal
     );
     [id(5113), propput]
     HRESULT __stdcall downToolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pVal
     );
     [id(5114), propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
   };
   [
     uuid(FC1880CE-83B9-43A7-A066-C44CE8C82583),
     helpstring("IWMPListBoxCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPListBoxCtrl : IDispatch
   {
     [id(6108), propget]
     HRESULT __stdcall selectedItem (
       [out retval] long *pnPos
     );
     [id(6108), propput]
     HRESULT __stdcall selectedItem (
       [in] long argNo1
     );
     [id(6100), propget]
     HRESULT __stdcall sorted (
       [out retval] WINBOOL *pVal
     );
     [id(6100), propput]
     HRESULT __stdcall sorted (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall multiselect (
       [out retval] WINBOOL *pVal
     );
     [id(6101), propput]
     HRESULT __stdcall multiselect (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall readOnly (
       [out retval] WINBOOL *pVal
     );
     [id(6102), propput]
     HRESULT __stdcall readOnly (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall foregroundColor (
       [out retval] BSTR *pVal
     );
     [id(6103), propput]
     HRESULT __stdcall foregroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(6104), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontSize (
       [out retval] long *pVal
     );
     [id(6105), propput]
     HRESULT __stdcall fontSize (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall fontStyle (
       [out retval] BSTR *pVal
     );
     [id(6106), propput]
     HRESULT __stdcall fontStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontFace (
       [out retval] BSTR *pVal
     );
     [id(6107), propput]
     HRESULT __stdcall fontFace (
       [in] BSTR argNo1
     );
     [id(6109), propget]
     HRESULT __stdcall itemCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall firstVisibleItem (
       [out retval] long *pVal
     );
     [id(6110), propput]
     HRESULT __stdcall firstVisibleItem (
       [in] long argNo1
     );
     [id(6120), propput]
     HRESULT __stdcall popUp (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall focusItem (
       [out retval] long *pVal
     );
     [id(6121), propput]
     HRESULT __stdcall focusItem (
       [in] long argNo1
     );
     [id(6125), propget]
     HRESULT __stdcall border (
       [out retval] WINBOOL *pVal
     );
     [id(6125), propput]
     HRESULT __stdcall border (
       [in] WINBOOL argNo1
     );
     [id(6111)]
     HRESULT __stdcall getItem (
       [in] long nPos,
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall insertItem (
       [in] long nPos,
       [in] BSTR newVal
     );
     HRESULT __stdcall appendItem (
       [in] BSTR newVal
     );
     HRESULT __stdcall replaceItem (
       [in] long nPos,
       [in] BSTR newVal
     );
     HRESULT __stdcall deleteItem (
       [in] long nPos
     );
     HRESULT __stdcall deleteAll (void);
     HRESULT __stdcall findItem (
       [in] long nStartIndex,
       [in] BSTR newVal,
       [out retval] long *pnPos
     );
     HRESULT __stdcall getNextSelectedItem (
       [in] long nStartIndex,
       [out retval] long *pnSelected
     );
     [id(6122)]
     HRESULT __stdcall setSelectedState (
       [in] long nPos,
       [in] WINBOOL vbSelected
     );
     HRESULT __stdcall show (void);
     HRESULT __stdcall dismiss (void);
   };
   [
     uuid(D255DFB8-C22A-42CF-B8B7-F15D7BCF65D6),
     helpstring("IWMPListBoxItem: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPListBoxItem : IDispatch
   {
     [id(6119), propput]
     HRESULT __stdcall value (
       [in] BSTR argNo1
     );
   };
   [
     uuid(63D9D30F-AE4C-4678-8CA8-5720F4FE4419),
     helpstring("IWMPPlaylistCtrlColumn: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPlaylistCtrlColumn : IDispatch
   {
     [id(5670), propget]
     HRESULT __stdcall columnName (
       [out retval] BSTR *pVal
     );
     [id(5670), propput]
     HRESULT __stdcall columnName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall columnID (
       [out retval] BSTR *pVal
     );
     [id(5671), propput]
     HRESULT __stdcall columnID (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall columnResizeMode (
       [out retval] BSTR *pVal
     );
     [id(5672), propput]
     HRESULT __stdcall columnResizeMode (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall columnWidth (
       [out retval] long *pVal
     );
     [id(5673), propput]
     HRESULT __stdcall columnWidth (
       [in] long argNo1
     );
   };
   [
     uuid(CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A),
     helpstring("IWMPSliderCtrlEvents: Public interface for skin object model."),
     dispatchable
   ]
   dispinterface IWMPSliderCtrlEvents
   {
     [id(5430)]
     HRESULT __stdcall ondragbegin (void);
     HRESULT __stdcall ondragend (void);
     HRESULT __stdcall onpositionchange (void);
   };
   [
     uuid(F2BF2C8F-405F-11D3-BB39-00A0C93CA73A),
     helpstring("IWMPSliderCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSliderCtrl : IDispatch
   {
     [id(5400), propget]
     HRESULT __stdcall direction (
       [out retval] BSTR *pVal
     );
     [id(5400), propput]
     HRESULT __stdcall direction (
       [in] BSTR argNo1
     );
     [id(5402), propget]
     HRESULT __stdcall slide (
       [out retval] WINBOOL *pVal
     );
     [id(5402), propput]
     HRESULT __stdcall slide (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall tiled (
       [out retval] WINBOOL *pVal
     );
     [id(5403), propput]
     HRESULT __stdcall tiled (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall foregroundColor (
       [out retval] BSTR *pVal
     );
     [id(5404), propput]
     HRESULT __stdcall foregroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall foregroundEndColor (
       [out retval] BSTR *pVal
     );
     [id(5405), propput]
     HRESULT __stdcall foregroundEndColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(5406), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundEndColor (
       [out retval] BSTR *pVal
     );
     [id(5407), propput]
     HRESULT __stdcall backgroundEndColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledColor (
       [out retval] BSTR *pVal
     );
     [id(5408), propput]
     HRESULT __stdcall disabledColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall transparencyColor (
       [out retval] BSTR *pVal
     );
     [id(5409), propput]
     HRESULT __stdcall transparencyColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall foregroundImage (
       [out retval] BSTR *pVal
     );
     [id(5410), propput]
     HRESULT __stdcall foregroundImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundImage (
       [out retval] BSTR *pVal
     );
     [id(5411), propput]
     HRESULT __stdcall backgroundImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundHoverImage (
       [out retval] BSTR *pVal
     );
     [id(5412), propput]
     HRESULT __stdcall backgroundHoverImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledImage (
       [out retval] BSTR *pVal
     );
     [id(5413), propput]
     HRESULT __stdcall disabledImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall thumbImage (
       [out retval] BSTR *pVal
     );
     [id(5414), propput]
     HRESULT __stdcall thumbImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall thumbHoverImage (
       [out retval] BSTR *pVal
     );
     [id(5415), propput]
     HRESULT __stdcall thumbHoverImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall thumbDownImage (
       [out retval] BSTR *pVal
     );
     [id(5416), propput]
     HRESULT __stdcall thumbDownImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall thumbDisabledImage (
       [out retval] BSTR *pVal
     );
     [id(5417), propput]
     HRESULT __stdcall thumbDisabledImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall min (
       [out retval] float *pVal
     );
     [id(5418), propput]
     HRESULT __stdcall min (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall max (
       [out retval] float *pVal
     );
     [id(5419), propput]
     HRESULT __stdcall max (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall value (
       [out retval] float *pVal
     );
     [id(5420), propput]
     HRESULT __stdcall value (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall toolTip (
       [out retval] BSTR *pVal
     );
     [id(5421), propput]
     HRESULT __stdcall toolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pVal
     );
     [id(5422), propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall borderSize (
       [out retval] int *pVal
     );
     [id(5423), propput]
     HRESULT __stdcall borderSize (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall foregroundHoverImage (
       [out retval] BSTR *pVal
     );
     [id(5424), propput]
     HRESULT __stdcall foregroundHoverImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall foregroundProgress (
       [out retval] float *pVal
     );
     [id(5425), propput]
     HRESULT __stdcall foregroundProgress (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall useForegroundProgress (
       [out retval] WINBOOL *pVal
     );
     [id(5426), propput]
     HRESULT __stdcall useForegroundProgress (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(A85C0477-714C-4A06-B9F6-7C8CA38B45DC),
     helpstring("IWMPVideoCtrlEvents: Public interface for skin object model."),
     dispatchable
   ]
   dispinterface IWMPVideoCtrlEvents
   {
     [id(5720)]
     HRESULT __stdcall onvideostart (void);
     HRESULT __stdcall onvideoend (void);
   };
   [
     uuid(61CECF10-FC3A-11D2-A1CD-005004602752),
     helpstring("IWMPVideoCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPVideoCtrl : IDispatch
   {
     [id(5700), propput]
     HRESULT __stdcall windowless (
       [in] WINBOOL argNo1
     );
     [id(5700), propget]
     HRESULT __stdcall windowless (
       [out retval] WINBOOL *pbClipped
     );
     [propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
     [id(5701), propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pbstrCursor
     );
     [propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [id(5702), propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pbstrColor
     );
     [id(5704), propput]
     HRESULT __stdcall maintainAspectRatio (
       [in] WINBOOL argNo1
     );
     [id(5704), propget]
     HRESULT __stdcall maintainAspectRatio (
       [out retval] WINBOOL *pbMaintainAspectRatio
     );
     [id(5706), propput]
     HRESULT __stdcall toolTip (
       [in] BSTR argNo1
     );
     [id(5706), propget]
     HRESULT __stdcall toolTip (
       [out retval] BSTR *bstrToolTip
     );
     [propget]
     HRESULT __stdcall fullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [id(5707), propput]
     HRESULT __stdcall fullScreen (
       [in] WINBOOL argNo1
     );
     [id(5703), propput]
     HRESULT __stdcall shrinkToFit (
       [in] WINBOOL argNo1
     );
     [id(5703), propget]
     HRESULT __stdcall shrinkToFit (
       [out retval] WINBOOL *pbShrinkToFit
     );
     [id(5708), propput]
     HRESULT __stdcall stretchToFit (
       [in] WINBOOL argNo1
     );
     [id(5708), propget]
     HRESULT __stdcall stretchToFit (
       [out retval] WINBOOL *pbStretchToFit
     );
     [propput]
     HRESULT __stdcall zoom (
       [in] long argNo1
     );
     [id(5709), propget]
     HRESULT __stdcall zoom (
       [out retval] long *pzoom
     );
   };
   [
     uuid(A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769),
     helpstring("IWMPEffectsCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPEffectsCtrl : IDispatch
   {
     [id(5500), propget]
     HRESULT __stdcall windowed (
       [out retval] WINBOOL *pVal
     );
     [id(5500), propput]
     HRESULT __stdcall windowed (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall allowAll (
       [out retval] WINBOOL *pVal
     );
     [id(5501), propput]
     HRESULT __stdcall allowAll (
       [in] WINBOOL argNo1
     );
     [id(5507), propput]
     HRESULT __stdcall currentEffectType (
       [in] BSTR argNo1
     );
     [id(5507), propget]
     HRESULT __stdcall currentEffectType (
       [out retval] BSTR *pVal
     );
     [id(5506), propget]
     HRESULT __stdcall currentEffectTitle (
       [out retval] BSTR *pVal
     );
     [id(5502)]
     HRESULT __stdcall next (void);
     HRESULT __stdcall previous (void);
     HRESULT __stdcall settings (void);
     [propget]
     HRESULT __stdcall currentEffect (
       [out retval] IDispatch **p
     );
     [id(5505), propput]
     HRESULT __stdcall currentEffect (
       [in] IDispatch * argNo1
     );
     [id(5509)]
     HRESULT __stdcall nextEffect (void);
     HRESULT __stdcall previousEffect (void);
     HRESULT __stdcall nextPreset (void);
     HRESULT __stdcall previousPreset (void);
     [propget]
     HRESULT __stdcall currentPreset (
       [out retval] long *pVal
     );
     [id(5513), propput]
     HRESULT __stdcall currentPreset (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall currentPresetTitle (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall currentEffectPresetCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall fullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [id(5516), propput]
     HRESULT __stdcall fullScreen (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall effectCanGoFullScreen (
       [out retval] WINBOOL *pbFullScreen
     );
     [propget]
     HRESULT __stdcall effectHasPropertyPage (
       [out retval] WINBOOL *pbPropertyPage
     );
     [id(5520), propget]
     HRESULT __stdcall effectCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall effectTitle (
       [in] long index,
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall effectType (
       [in] long index,
       [out retval] BSTR *pVal
     );
   };
   [
     uuid(2BD3716F-A914-49FB-8655-996D5F495498),
     helpstring("IWMPEqualizerSettingsCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPEqualizerSettingsCtrl : IDispatch
   {
     [id(5800), propget]
     HRESULT __stdcall bypass (
       [out retval] WINBOOL *pVal
     );
     [id(5800), propput]
     HRESULT __stdcall bypass (
       [in] WINBOOL argNo1
     );
     [id(5804), propget]
     HRESULT __stdcall gainLevel1 (
       [out retval] float *pflLevel
     );
     [id(5804), propput]
     HRESULT __stdcall gainLevel1 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel2 (
       [out retval] float *pflLevel
     );
     [id(5805), propput]
     HRESULT __stdcall gainLevel2 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel3 (
       [out retval] float *pflLevel
     );
     [id(5806), propput]
     HRESULT __stdcall gainLevel3 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel4 (
       [out retval] float *pflLevel
     );
     [id(5807), propput]
     HRESULT __stdcall gainLevel4 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel5 (
       [out retval] float *pflLevel
     );
     [id(5808), propput]
     HRESULT __stdcall gainLevel5 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel6 (
       [out retval] float *pflLevel
     );
     [id(5809), propput]
     HRESULT __stdcall gainLevel6 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel7 (
       [out retval] float *pflLevel
     );
     [id(5810), propput]
     HRESULT __stdcall gainLevel7 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel8 (
       [out retval] float *pflLevel
     );
     [id(5811), propput]
     HRESULT __stdcall gainLevel8 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel9 (
       [out retval] float *pflLevel
     );
     [id(5812), propput]
     HRESULT __stdcall gainLevel9 (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall gainLevel10 (
       [out retval] float *pflLevel
     );
     [id(5813), propput]
     HRESULT __stdcall gainLevel10 (
       [in] float argNo1
     );
     [id(5815), propget]
     HRESULT __stdcall gainLevels (
       [in] long iIndex,
       [out retval] float *pflLevel
     );
     [id(5815), propput]
     HRESULT __stdcall gainLevels (
       [in] long iIndex,
       [in] float argNo2
     );
     [id(5814)]
     HRESULT __stdcall reset (void);
     [id(5801), propget]
     HRESULT __stdcall bands (
       [out retval] long *pbands
     );
     [id(5816)]
     HRESULT __stdcall nextPreset (void);
     HRESULT __stdcall previousPreset (void);
     [propget]
     HRESULT __stdcall currentPreset (
       [out retval] long *pVal
     );
     [id(5818), propput]
     HRESULT __stdcall currentPreset (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall currentPresetTitle (
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall presetCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall enhancedAudio (
       [out retval] WINBOOL *pfVal
     );
     [id(5821), propput]
     HRESULT __stdcall enhancedAudio (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall speakerSize (
       [out retval] long *plVal
     );
     [id(5822), propput]
     HRESULT __stdcall speakerSize (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall currentSpeakerName (
       [out retval] BSTR *pbstrName
     );
     [propget]
     HRESULT __stdcall truBassLevel (
       [out retval] long *plTruBassLevel
     );
     [id(5824), propput]
     HRESULT __stdcall truBassLevel (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall wowLevel (
       [out retval] long *plWowLevel
     );
     [id(5825), propput]
     HRESULT __stdcall wowLevel (
       [in] long argNo1
     );
     [id(5827), propget]
     HRESULT __stdcall splineTension (
       [out retval] float *pflSplineTension
     );
     [id(5827), propput]
     HRESULT __stdcall splineTension (
       [in] float argNo1
     );
     [id(5826), propget]
     HRESULT __stdcall enableSplineTension (
       [out retval] WINBOOL *pfEnableSplineTension
     );
     [id(5826), propput]
     HRESULT __stdcall enableSplineTension (
       [in] WINBOOL argNo1
     );
     [id(5828), propget]
     HRESULT __stdcall presetTitle (
       [in] long iIndex,
       [out retval] BSTR *pVal
     );
     [propget]
     HRESULT __stdcall normalization (
       [out retval] WINBOOL *pfVal
     );
     [id(5829), propput]
     HRESULT __stdcall normalization (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall normalizationAverage (
       [out retval] float *pflAverage
     );
     [propget]
     HRESULT __stdcall normalizationPeak (
       [out retval] float *pflPeak
     );
     [propget]
     HRESULT __stdcall crossFade (
       [out retval] WINBOOL *pfVal
     );
     [id(5832), propput]
     HRESULT __stdcall crossFade (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall crossFadeWindow (
       [out retval] long *plWindow
     );
     [id(5833), propput]
     HRESULT __stdcall crossFadeWindow (
       [in] long argNo1
     );
   };
   [
     uuid(07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6),
     helpstring("IWMPVideoSettingsCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPVideoSettingsCtrl : IDispatch
   {
     [id(5900), propget]
     HRESULT __stdcall brightness (
       [out retval] long *pVal
     );
     [id(5900), propput]
     HRESULT __stdcall brightness (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall contrast (
       [out retval] long *pVal
     );
     [id(5901), propput]
     HRESULT __stdcall contrast (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall hue (
       [out retval] long *pVal
     );
     [id(5902), propput]
     HRESULT __stdcall hue (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall saturation (
       [out retval] long *pVal
     );
     [id(5903), propput]
     HRESULT __stdcall saturation (
       [in] long argNo1
     );
     HRESULT __stdcall reset (void);
   };
   [
     uuid(BBD6801A-A1D4-4D05-9F2D-29E0024C3FD9),
     helpstring("IWMPDolbyDigitalSettingsCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDolbyDigitalSettingsCtrl : IDispatch
   {
     [id(5950)]
     HRESULT __stdcall reset (void);
     [propget]
     HRESULT __stdcall currentPreset (
       [out retval] long *plCurrentPreset
     );
     [id(5951), propput]
     HRESULT __stdcall currentPreset (
       [in] long argNo1
     );
   };
   [
     uuid(B738FCAE-F089-45DF-AED6-034B9E7DB632),
     helpstring("IWMPLibraryTreeCtrl: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPLibraryTreeCtrl : IDispatch
   {
     [id(6401), propget]
     HRESULT __stdcall dropDownVisible (
       [out retval] WINBOOL *pVal
     );
     [id(6401), propput]
     HRESULT __stdcall dropDownVisible (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall foregroundColor (
       [out retval] BSTR *pVal
     );
     [id(6402), propput]
     HRESULT __stdcall foregroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(6403), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontSize (
       [out retval] long *pVal
     );
     [id(6404), propput]
     HRESULT __stdcall fontSize (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall fontStyle (
       [out retval] BSTR *pVal
     );
     [id(6405), propput]
     HRESULT __stdcall fontStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontFace (
       [out retval] BSTR *pVal
     );
     [id(6406), propput]
     HRESULT __stdcall fontFace (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall filter (
       [out retval] BSTR *pVal
     );
     [id(6407), propput]
     HRESULT __stdcall filter (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall expandState (
       [out retval] BSTR *pVal
     );
     [id(6408), propput]
     HRESULT __stdcall expandState (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Playlist (
       [out retval] dispinterface IWMPPlaylist **ppPlaylist
     );
     [id(6409), propput]
     HRESULT __stdcall Playlist (
       [in] dispinterface IWMPPlaylist *argNo1
     );
     [propget]
     HRESULT __stdcall selectedPlaylist (
       [out retval] dispinterface IWMPPlaylist **ppPlaylist
     );
     [propget]
     HRESULT __stdcall selectedMedia (
       [out retval] dispinterface IWMPMedia **ppMedia
     );
   };
   [
     uuid(70E1217C-C617-4CFD-BD8A-69CA2043E70B),
     helpstring("IWMPEditCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPEditCtrl : IDispatch
   {
     [id(0), propget]
     HRESULT __stdcall value (
       [out retval] BSTR *pVal
     );
     [id(0), propput]
     HRESULT __stdcall value (
       [in] BSTR argNo1
     );
     [id(6000), propget]
     HRESULT __stdcall border (
       [out retval] WINBOOL *pVal
     );
     [id(6000), propput]
     HRESULT __stdcall border (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall justification (
       [out retval] BSTR *pVal
     );
     [id(6001), propput]
     HRESULT __stdcall justification (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall editStyle (
       [out retval] BSTR *pVal
     );
     [id(6002), propput]
     HRESULT __stdcall editStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall wordWrap (
       [out retval] WINBOOL *pVal
     );
     [id(6003), propput]
     HRESULT __stdcall wordWrap (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall readOnly (
       [out retval] WINBOOL *pVal
     );
     [id(6004), propput]
     HRESULT __stdcall readOnly (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall foregroundColor (
       [out retval] BSTR *pVal
     );
     [id(6005), propput]
     HRESULT __stdcall foregroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(6006), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontSize (
       [out retval] long *pVal
     );
     [id(6007), propput]
     HRESULT __stdcall fontSize (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall fontStyle (
       [out retval] BSTR *pVal
     );
     [id(6008), propput]
     HRESULT __stdcall fontStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontFace (
       [out retval] BSTR *pVal
     );
     [id(6009), propput]
     HRESULT __stdcall fontFace (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall textLimit (
       [out retval] long *pVal
     );
     [id(6010), propput]
     HRESULT __stdcall textLimit (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall lineCount (
       [out retval] long *pVal
     );
     HRESULT __stdcall getLine (
       [in] long nIndex,
       [out retval] BSTR *pVal
     );
     HRESULT __stdcall getSelectionStart (
       [out retval] long *pnStart
     );
     HRESULT __stdcall getSelectionEnd (
       [out retval] long *pnEnd
     );
     HRESULT __stdcall setSelection (
       [in] long nStart,
       [in] long nEnd
     );
     HRESULT __stdcall replaceSelection (
       [in] BSTR newVal
     );
     HRESULT __stdcall getLineIndex (
       [in] long nIndex,
       [out retval] long *pnPosition
     );
     HRESULT __stdcall getLineFromChar (
       [in] long nPosition,
       [out retval] long *pnLine
     );
   };
   [
     uuid(8CEA03A2-D0C5-4E97-9C38-A676A639A51D),
     helpstring("IWMPSkinlist: interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSkinList : IDispatch
   {
     [id(6050)]
     HRESULT __stdcall updateBasketColumns (void);
     HRESULT __stdcall highContrastChange (void);
   };
   [
     uuid(5D0AD945-289E-45C5-A9C6-F301F0152108),
     helpstring("IWMPPluginUIHost: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPPluginUIHost : IDispatch
   {
     [id(6201), propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(6201), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall objectID (
       [out retval] BSTR *pVal
     );
     [id(6202), propput]
     HRESULT __stdcall objectID (
       [in] BSTR argNo1
     );
     HRESULT __stdcall getProperty (
       [in] BSTR bstrName,
       [out retval] VARIANT *pVal
     );
     HRESULT __stdcall setProperty (
       [in] BSTR bstrName,
       [in] VARIANT newVal
     );
   };
   [
     uuid(158A7ADC-33DA-4039-A553-BDDBBE389F5C),
     helpstring("IWMPMenuCtrl: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPMenuCtrl : IDispatch
   {
     [id(6301)]
     HRESULT __stdcall deleteAllItems (void);
     HRESULT __stdcall appendItem (
       [in] long nID,
       [in] BSTR bstrItem
     );
     HRESULT __stdcall appendSeparator (void);
     HRESULT __stdcall enableItem (
       [in] long nID,
       [in] WINBOOL newVal
     );
     HRESULT __stdcall checkItem (
       [in] long nID,
       [in] WINBOOL newVal
     );
     HRESULT __stdcall checkRadioItem (
       [in] long nID,
       [in] WINBOOL newVal
     );
     [propget]
     HRESULT __stdcall showFlags (
       [out retval] long *pVal
     );
     [id(6307), propput]
     HRESULT __stdcall showFlags (
       [in] long argNo1
     );
     HRESULT __stdcall show (
       [out retval] long *pnID
     );
     HRESULT __stdcall showEx (
       [in] long nID
     );
   };
   [
     uuid(1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875),
     helpstring("IWMPAutoMenuCtrl: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPAutoMenuCtrl : IDispatch
   {
     [id(6501)]
     HRESULT __stdcall show (
       [in] BSTR newVal
     );
   };
   [
     uuid(58D507B1-2354-11D3-BD41-00C04F6EA5AE),
     helpstring("IWMPRegionalButtonCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPRegionalButtonCtrl : IDispatch
   {
     [id(5300), propget]
     HRESULT __stdcall image (
       [out retval] BSTR *pVal
     );
     [id(5300), propput]
     HRESULT __stdcall image (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverImage (
       [out retval] BSTR *pVal
     );
     [id(5301), propput]
     HRESULT __stdcall hoverImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall downImage (
       [out retval] BSTR *pVal
     );
     [id(5302), propput]
     HRESULT __stdcall downImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverDownImage (
       [out retval] BSTR *pVal
     );
     [id(5303), propput]
     HRESULT __stdcall hoverDownImage (
       [in] BSTR argNo1
     );
     [id(5317), propget]
     HRESULT __stdcall hoverHoverImage (
       [out retval] BSTR *pVal
     );
     [id(5317), propput]
     HRESULT __stdcall hoverHoverImage (
       [in] BSTR argNo1
     );
     [id(5304), propget]
     HRESULT __stdcall disabledImage (
       [out retval] BSTR *pVal
     );
     [id(5304), propput]
     HRESULT __stdcall disabledImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall mappingImage (
       [out retval] BSTR *pVal
     );
     [id(5305), propput]
     HRESULT __stdcall mappingImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall transparencyColor (
       [out retval] BSTR *pVal
     );
     [id(5306), propput]
     HRESULT __stdcall transparencyColor (
       [in] BSTR argNo1
     );
     [id(5308), propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pVal
     );
     [id(5308), propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall showBackground (
       [out retval] WINBOOL *pVal
     );
     [id(5309), propput]
     HRESULT __stdcall showBackground (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall radio (
       [out retval] WINBOOL *pVal
     );
     [id(5310), propput]
     HRESULT __stdcall radio (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall buttonCount (
       [out retval] long *nButtons
     );
     HRESULT __stdcall createButton (
       [out retval] IDispatch **pButton
     );
     HRESULT __stdcall getButton (
       [in] long nButton,
       [out retval] IDispatch **pButton
     );
     HRESULT __stdcall Click (
       [in] long nButton
     );
     [propget]
     HRESULT __stdcall hueShift (
       [out retval] float *pVal
     );
     [id(5315), propput]
     HRESULT __stdcall hueShift (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall saturation (
       [out retval] float *pVal
     );
     [id(5316), propput]
     HRESULT __stdcall saturation (
       [in] float argNo1
     );
   };
   [
     uuid(50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE),
     helpstring("IWMPRegionalButtonEvents: Public interface for skin object model."),
     dispatchable
   ]
   dispinterface IWMPRegionalButtonEvents
   {
     [id(5360)]
     HRESULT __stdcall onblur (void);
     HRESULT __stdcall onfocus (void);
     HRESULT __stdcall onclick (void);
     HRESULT __stdcall ondblclick (void);
     HRESULT __stdcall onmousedown (void);
     HRESULT __stdcall onmouseup (void);
     HRESULT __stdcall onmousemove (void);
     HRESULT __stdcall onmouseover (void);
     HRESULT __stdcall onmouseout (void);
     HRESULT __stdcall onkeypress (void);
     HRESULT __stdcall onkeydown (void);
     HRESULT __stdcall onkeyup (void);
   };
   [
     uuid(58D507B2-2354-11D3-BD41-00C04F6EA5AE),
     helpstring("IWMPRegionalButton: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPRegionalButton : IDispatch
   {
     [id(5330), propget]
     HRESULT __stdcall upToolTip (
       [out retval] BSTR *pVal
     );
     [id(5330), propput]
     HRESULT __stdcall upToolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall downToolTip (
       [out retval] BSTR *pVal
     );
     [id(5331), propput]
     HRESULT __stdcall downToolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall mappingColor (
       [out retval] BSTR *pVal
     );
     [id(5332), propput]
     HRESULT __stdcall mappingColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall enabled (
       [out retval] WINBOOL *pVal
     );
     [id(5333), propput]
     HRESULT __stdcall enabled (
       [in] WINBOOL argNo1
     );
     [id(5339), propget]
     HRESULT __stdcall sticky (
       [out retval] WINBOOL *pVal
     );
     [id(5339), propput]
     HRESULT __stdcall sticky (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall down (
       [out retval] WINBOOL *pVal
     );
     [id(5340), propput]
     HRESULT __stdcall down (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall index (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall tabStop (
       [out retval] WINBOOL *pVal
     );
     [id(5342), propput]
     HRESULT __stdcall tabStop (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pVal
     );
     [id(5343), propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
     HRESULT __stdcall Click (void);
     [propget]
     HRESULT __stdcall accName (
       [out retval] BSTR *pszName
     );
     [id(5345), propput]
     HRESULT __stdcall accName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall accDescription (
       [out retval] BSTR *pszDescription
     );
     [id(5346), propput]
     HRESULT __stdcall accDescription (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall accKeyboardShortcut (
       [out retval] BSTR *pszShortcut
     );
     [id(5347), propput]
     HRESULT __stdcall accKeyboardShortcut (
       [in] BSTR argNo1
     );
   };
   [
     uuid(95F45AA4-ED0A-11D2-BA67-0000F80855E6),
     helpstring("IWMPCustomSliderCtrlEvents: Public interface for skin object model."),
     dispatchable
   ]
   dispinterface IWMPCustomSliderCtrlEvents
   {
     [id(5020)]
     HRESULT __stdcall ondragbegin (void);
     HRESULT __stdcall ondragend (void);
     HRESULT __stdcall onpositionchange (void);
   };
   [
     uuid(95F45AA2-ED0A-11D2-BA67-0000F80855E6),
     helpstring("IWMPCustomSlider: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCustomSlider : IDispatch
   {
     [id(5009), propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pVal
     );
     [id(5009), propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
     [id(5005), propget]
     HRESULT __stdcall min (
       [out retval] float *pVal
     );
     [id(5005), propput]
     HRESULT __stdcall min (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall max (
       [out retval] float *pVal
     );
     [id(5006), propput]
     HRESULT __stdcall max (
       [in] float argNo1
     );
     [id(5010), propget]
     HRESULT __stdcall value (
       [out retval] float *pVal
     );
     [id(5010), propput]
     HRESULT __stdcall value (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall toolTip (
       [out retval] BSTR *pVal
     );
     [id(5011), propput]
     HRESULT __stdcall toolTip (
       [in] BSTR argNo1
     );
     [id(5002), propget]
     HRESULT __stdcall positionImage (
       [out retval] BSTR *pVal
     );
     [id(5002), propput]
     HRESULT __stdcall positionImage (
       [in] BSTR argNo1
     );
     [id(5001), propget]
     HRESULT __stdcall image (
       [out retval] BSTR *pVal
     );
     [id(5001), propput]
     HRESULT __stdcall image (
       [in] BSTR argNo1
     );
     [id(5003), propget]
     HRESULT __stdcall hoverImage (
       [out retval] BSTR *pVal
     );
     [id(5003), propput]
     HRESULT __stdcall hoverImage (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledImage (
       [out retval] BSTR *pVal
     );
     [id(5004), propput]
     HRESULT __stdcall disabledImage (
       [in] BSTR argNo1
     );
     [id(5012), propget]
     HRESULT __stdcall downImage (
       [out retval] BSTR *pVal
     );
     [id(5012), propput]
     HRESULT __stdcall downImage (
       [in] BSTR argNo1
     );
     [id(5008), propget]
     HRESULT __stdcall transparencyColor (
       [out retval] BSTR *pVal
     );
     [id(5008), propput]
     HRESULT __stdcall transparencyColor (
       [in] BSTR argNo1
     );
   };
   [
     uuid(237DAC8E-0E32-11D3-A2E2-00C04F79F88E),
     helpstring("IWMPTextCtrl: Public interface for skin object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPTextCtrl : IDispatch
   {
     [id(5201), propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(5201), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [id(5206), propget]
     HRESULT __stdcall fontFace (
       [out retval] BSTR *pVal
     );
     [id(5206), propput]
     HRESULT __stdcall fontFace (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontStyle (
       [out retval] BSTR *pVal
     );
     [id(5207), propput]
     HRESULT __stdcall fontStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall fontSize (
       [out retval] long *pVal
     );
     [id(5208), propput]
     HRESULT __stdcall fontSize (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall foregroundColor (
       [out retval] BSTR *pVal
     );
     [id(5209), propput]
     HRESULT __stdcall foregroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverBackgroundColor (
       [out retval] BSTR *pVal
     );
     [id(5210), propput]
     HRESULT __stdcall hoverBackgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverForegroundColor (
       [out retval] BSTR *pVal
     );
     [id(5211), propput]
     HRESULT __stdcall hoverForegroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall hoverFontStyle (
       [out retval] BSTR *pVal
     );
     [id(5212), propput]
     HRESULT __stdcall hoverFontStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall value (
       [out retval] BSTR *pVal
     );
     [id(5213), propput]
     HRESULT __stdcall value (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall toolTip (
       [out retval] BSTR *pVal
     );
     [id(5214), propput]
     HRESULT __stdcall toolTip (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledFontStyle (
       [out retval] BSTR *pVal
     );
     [id(5215), propput]
     HRESULT __stdcall disabledFontStyle (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledForegroundColor (
       [out retval] BSTR *pVal
     );
     [id(5216), propput]
     HRESULT __stdcall disabledForegroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall disabledBackgroundColor (
       [out retval] BSTR *pVal
     );
     [id(5217), propput]
     HRESULT __stdcall disabledBackgroundColor (
       [in] BSTR argNo1
     );
     [id(5221), propget]
     HRESULT __stdcall fontSmoothing (
       [out retval] WINBOOL *pVal
     );
     [id(5221), propput]
     HRESULT __stdcall fontSmoothing (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall justification (
       [out retval] BSTR *pVal
     );
     [id(5222), propput]
     HRESULT __stdcall justification (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall wordWrap (
       [out retval] WINBOOL *pVal
     );
     [id(5223), propput]
     HRESULT __stdcall wordWrap (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall cursor (
       [out retval] BSTR *pVal
     );
     [id(5224), propput]
     HRESULT __stdcall cursor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall scrolling (
       [out retval] WINBOOL *pVal
     );
     [id(5225), propput]
     HRESULT __stdcall scrolling (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall scrollingDirection (
       [out retval] BSTR *pVal
     );
     [id(5226), propput]
     HRESULT __stdcall scrollingDirection (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall scrollingDelay (
       [out retval] int *pVal
     );
     [id(5227), propput]
     HRESULT __stdcall scrollingDelay (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall scrollingAmount (
       [out retval] int *pVal
     );
     [id(5228), propput]
     HRESULT __stdcall scrollingAmount (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall textWidth (
       [out retval] int *pVal
     );
     [propget]
     HRESULT __stdcall onGlass (
       [out retval] WINBOOL *pVal
     );
     [id(5230), propput]
     HRESULT __stdcall onGlass (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall disableGlassBlurBackground (
       [out retval] WINBOOL *pVal
     );
     [id(5231), propput]
     HRESULT __stdcall disableGlassBlurBackground (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(891EADB1-1C45-48B0-B704-49A888DA98C4),
     helpstring("ITaskCntrCtrl: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface ITaskCntrCtrl : IDispatch
   {
     [id(1610743808), propget]
     HRESULT __stdcall CurrentContainer (
       [out retval] IUnknown **ppUnk
     );
     [id(1610743808), propput]
     HRESULT __stdcall CurrentContainer (
       [in] IUnknown * argNo1
     );
     [id(1610743810)]
     HRESULT __stdcall Activate (void);
   };
   [
     uuid(D84CCA96-CCE2-11D2-9ECC-0000F8085981),
     helpstring("_WMPCoreEvents: Public interface."),
     hidden,
     dispatchable
   ]
   dispinterface _WMPCoreEvents
   {
     [id(5001)]
     void __stdcall OpenStateChange (
       [in] long NewState
     );
     [id(5101)]
     void __stdcall PlayStateChange (
       [in] long NewState
     );
     void __stdcall AudioLanguageChange (
       [in] long LangID
     );
     [id(5002)]
     void __stdcall StatusChange (void);
     [id(5301)]
     void __stdcall ScriptCommand (
       [in] BSTR scType,
       [in] BSTR Param
     );
     [id(5403)]
     void __stdcall NewStream (void);
     [id(5401)]
     void __stdcall Disconnect (
       [in] long Result
     );
     void __stdcall Buffering (
       [in] WINBOOL Start
     );
     [id(5501)]
     void __stdcall Error (void);
     [id(5601)]
     void __stdcall Warning (
       [in] long WarningType,
       [in] long Param,
       [in] BSTR Description
     );
     [id(5201)]
     void __stdcall EndOfStream (
       [in] long Result
     );
     void __stdcall PositionChange (
       [in] double oldPosition,
       [in] double newPosition
     );
     void __stdcall MarkerHit (
       [in] long MarkerNum
     );
     void __stdcall DurationUnitChange (
       [in] long NewDurationUnit
     );
     [id(5701)]
     void __stdcall CdromMediaChange (
       [in] long CdromNum
     );
     [id(5801)]
     void __stdcall PlaylistChange (
       [in] IDispatch * Playlist,
       [in] enum WMPPlaylistChangeEventType change
     );
     [id(5804)]
     void __stdcall CurrentPlaylistChange (
       [in] enum WMPPlaylistChangeEventType change
     );
     void __stdcall CurrentPlaylistItemAvailable (
       [in] BSTR bstrItemName
     );
     [id(5802)]
     void __stdcall MediaChange (
       [in] IDispatch * Item
     );
     void __stdcall CurrentMediaItemAvailable (
       [in] BSTR bstrItemName
     );
     [id(5806)]
     void __stdcall CurrentItemChange (
       [in] IDispatch * pdispMedia
     );
     void __stdcall MediaCollectionChange (void);
     void __stdcall MediaCollectionAttributeStringAdded (
       [in] BSTR bstrAttribName,
       [in] BSTR bstrAttribVal
     );
     void __stdcall MediaCollectionAttributeStringRemoved (
       [in] BSTR bstrAttribName,
       [in] BSTR bstrAttribVal
     );
     [id(5820)]
     void __stdcall MediaCollectionAttributeStringChanged (
       [in] BSTR bstrAttribName,
       [in] BSTR bstrOldAttribVal,
       [in] BSTR bstrNewAttribVal
     );
     [id(5810)]
     void __stdcall PlaylistCollectionChange (void);
     void __stdcall PlaylistCollectionPlaylistAdded (
       [in] BSTR bstrPlaylistName
     );
     void __stdcall PlaylistCollectionPlaylistRemoved (
       [in] BSTR bstrPlaylistName
     );
     [id(5818)]
     void __stdcall PlaylistCollectionPlaylistSetAsDeleted (
       [in] BSTR bstrPlaylistName,
       [in] WINBOOL varfIsDeleted
     );
     void __stdcall ModeChange (
       [in] BSTR ModeName,
       [in] WINBOOL NewValue
     );
     [id(5821)]
     void __stdcall MediaError (
       [in] IDispatch * pMediaObject
     );
     [id(5823)]
     void __stdcall OpenPlaylistSwitch (
       [in] IDispatch * pItem
     );
     [id(5822)]
     void __stdcall DomainChange (
       [in] BSTR strDomain
     );
     [id(5824)]
     void __stdcall StringCollectionChange (
       [in] IDispatch * pdispStringCollection,
       [in] enum WMPStringCollectionChangeEventType change,
       [in] long lCollectionIndex
     );
     void __stdcall MediaCollectionMediaAdded (
       [in] IDispatch * pdispMedia
     );
     void __stdcall MediaCollectionMediaRemoved (
       [in] IDispatch * pdispMedia
     );
   };
   [
     uuid(6B550945-018F-11D3-B14A-00C04F79FAA6),
     helpstring("IWMPGraphEventHandler: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPGraphEventHandler : IDispatch
   {
     [id(8151)]
     HRESULT __stdcall NotifyGraphStateChange (
       [in] ULONG_PTR punkGraph,
       [in] long lGraphState
     );
     [id(8173)]
     HRESULT __stdcall AsyncNotifyGraphStateChange (
       [in] ULONG_PTR punkGraph,
       [in] long lGraphState
     );
     [id(8153)]
     HRESULT __stdcall NotifyRateChange (
       [in] ULONG_PTR punkGraph,
       [in] double dRate
     );
     [id(8157)]
     HRESULT __stdcall NotifyPlaybackEnd (
       [in] ULONG_PTR punkGraph,
       BSTR bstrQueuedUrl,
       ULONG_PTR dwCurrentContext
     );
     [id(8156)]
     HRESULT __stdcall NotifyStreamEnd (
       [in] ULONG_PTR punkGraph
     );
     [id(8158)]
     HRESULT __stdcall NotifyScriptCommand (
       [in] ULONG_PTR punkGraph,
       [in] BSTR bstrCommand,
       [in] BSTR bstrParam
     );
     [id(8172)]
     HRESULT __stdcall NotifyEarlyScriptCommand (
       [in] ULONG_PTR punkGraph,
       [in] BSTR bstrCommand,
       [in] BSTR bstrParam,
       [in] double dTime
     );
     [id(8159)]
     HRESULT __stdcall NotifyMarkerHit (
       [in] ULONG_PTR punkGraph,
       [in] long lMarker
     );
     HRESULT __stdcall NotifyGraphError (
       [in] ULONG_PTR punkGraph,
       [in] long lErrMajor,
       [in] long lErrMinor,
       [in] long lCondition,
       [in] BSTR bstrInfo,
       [in] IUnknown * punkGraphData
     );
     HRESULT __stdcall NotifyAcquireCredentials (
       [in] ULONG_PTR punkGraph,
       [in] BSTR bstrRealm,
       [in] BSTR bstrSite,
       [in out] BSTR bstrUser,
       [in out] BSTR bstrPassword,
       [in out] UINT *pdwFlags,
       [out] WINBOOL *pfCancel
     );
     [id(8178)]
     HRESULT __stdcall NotifyUntrustedLicense (
       [in] ULONG_PTR punkGraph,
       [in] BSTR bstrURL,
       [out] WINBOOL *pfCancel
     );
     [id(8162)]
     HRESULT __stdcall NotifyLicenseDialog (
       [in] ULONG_PTR punkGraph,
       [in] BSTR bstrURL,
       [in] BSTR bstrContent,
       [in] UCHAR *pPostData,
       [in] UINT dwPostDataSize,
       [in] long lResult
     );
     HRESULT __stdcall NotifyNeedsIndividualization (
       [in] ULONG_PTR punkGraph,
       [out] WINBOOL *pfResult
     );
     [id(8165)]
     HRESULT __stdcall NotifyNewMetadata (
       [in] ULONG_PTR punkGraph
     );
     HRESULT __stdcall NotifyNewMediaCaps (
       [in] ULONG_PTR punkGraph
     );
     HRESULT __stdcall NotifyDisconnect (
       [in] ULONG_PTR punkGraph,
       [in] long lResult
     );
     HRESULT __stdcall NotifySave (
       [in] ULONG_PTR punkGraph,
       [in] long fStarted,
       [in] long lResult
     );
     HRESULT __stdcall NotifyDelayClose (
       [in] ULONG_PTR punkGraph,
       [in] WINBOOL fDelay
     );
     HRESULT __stdcall NotifyDVD (
       [in] ULONG_PTR punkGraph,
       [in] long lEventCode,
       [in] long lParam1,
       [in] long lParam2
     );
     HRESULT __stdcall NotifyRequestAppThreadAction (
       [in] ULONG_PTR punkGraph,
       [in] UINT dwAction
     );
     [id(8174)]
     HRESULT __stdcall NotifyPrerollReady (
       [in] ULONG_PTR punkGraph
     );
     [id(8177)]
     HRESULT __stdcall NotifyNewIcons (
       [in] ULONG_PTR punkGraph
     );
     [id(8179)]
     HRESULT __stdcall NotifyStepComplete (
       [in] ULONG_PTR punkGraph
     );
     HRESULT __stdcall NotifyNewBitrate (
       [in] ULONG_PTR punkGraph,
       [in] UINT dwBitrate
     );
     HRESULT __stdcall NotifyGraphCreationPreRender (
       [in] ULONG_PTR punkGraph,
       [in] ULONG_PTR punkFilterGraph,
       [in] ULONG_PTR punkCardeaEncConfig,
       [in] ULONG_PTR phrContinue,
       [in] ULONG_PTR hEventToSet
     );
     HRESULT __stdcall NotifyGraphCreationPostRender (
       [in] ULONG_PTR punkGraph,
       [in] ULONG_PTR punkFilterGraph,
       [in] ULONG_PTR phrContinue,
       [in] ULONG_PTR hEventToSet
     );
     [id(8186)]
     HRESULT __stdcall NotifyGraphUserEvent (
       [in] ULONG_PTR punkGraph,
       [in] long EventCode
     );
     [id(8183)]
     HRESULT __stdcall NotifyRevocation (
       [in] ULONG_PTR punkGraph,
       [out] WINBOOL *pfResult
     );
     HRESULT __stdcall NotifyNeedsWMGraphIndividualization (
       [in] ULONG_PTR punkGraph,
       [in] ULONG_PTR phWnd,
       [in] ULONG_PTR hIndivEvent,
       [out] WINBOOL *pfCancel,
       [out] WINBOOL *pfResult
     );
     HRESULT __stdcall NotifyNeedsFullscreen (
       [in] ULONG_PTR punkGraph
     );
   };
   [
     uuid(F8578BFA-CD8F-4CE1-A684-5B7E85FCA7DC),
     helpstring("IBattery: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IBattery : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall presetCount (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall preset (
       [in] long nIndex,
       [out retval] IDispatch **ppDispatch
     );
   };
   [
     uuid(40C6BDE7-9C90-49D4-AD20-BEF81A6C5F22),
     helpstring("IBatteryPreset: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IBatteryPreset : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall title (
       [out retval] BSTR *pVal
     );
     [id(1), propput]
     HRESULT __stdcall title (
       [in] BSTR argNo1
     );
   };
   [
     uuid(F85E2D65-207D-48DB-84B1-915E1735DB17),
     helpstring("IBatteryRandomPreset: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IBatteryRandomPreset : IBatteryPreset
   {
   };
   [
     uuid(876E7208-0172-4EBB-B08B-2E1D30DFE44C),
     helpstring("IBatterySavedPreset: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IBatterySavedPreset : IBatteryPreset
   {
   };
   [
     uuid(33E9291A-F6A9-11D2-9435-00A0C92A2F2D),
     helpstring("IBarsEffect: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IBarsEffect : IDispatch
   {
     [id(8000), propget]
     HRESULT __stdcall displayMode (
       [out retval] long *pVal
     );
     [id(8000), propput]
     HRESULT __stdcall displayMode (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall showPeaks (
       [out retval] WINBOOL *pVal
     );
     [id(8001), propput]
     HRESULT __stdcall showPeaks (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall peakHangTime (
       [out retval] long *pVal
     );
     [id(8002), propput]
     HRESULT __stdcall peakHangTime (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall peakFallbackAcceleration (
       [out retval] float *pVal
     );
     [id(8003), propput]
     HRESULT __stdcall peakFallbackAcceleration (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall peakFallbackSpeed (
       [out retval] float *pVal
     );
     [id(8004), propput]
     HRESULT __stdcall peakFallbackSpeed (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall levelFallbackAcceleration (
       [out retval] float *pVal
     );
     [id(8005), propput]
     HRESULT __stdcall levelFallbackAcceleration (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall levelFallbackSpeed (
       [out retval] float *pVal
     );
     [id(8006), propput]
     HRESULT __stdcall levelFallbackSpeed (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall backgroundColor (
       [out retval] BSTR *pVal
     );
     [id(8007), propput]
     HRESULT __stdcall backgroundColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall levelColor (
       [out retval] BSTR *pVal
     );
     [id(8008), propput]
     HRESULT __stdcall levelColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall peakColor (
       [out retval] BSTR *pVal
     );
     [id(8009), propput]
     HRESULT __stdcall peakColor (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall horizontalSpacing (
       [out retval] long *pVal
     );
     [id(8010), propput]
     HRESULT __stdcall horizontalSpacing (
       [in] long argNo1
     );
     [id(8012), propget]
     HRESULT __stdcall levelWidth (
       [out retval] long *pVal
     );
     [id(8012), propput]
     HRESULT __stdcall levelWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall levelScale (
       [out retval] float *pVal
     );
     [id(8013), propput]
     HRESULT __stdcall levelScale (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall fadeRate (
       [out retval] long *pVal
     );
     [id(8014), propput]
     HRESULT __stdcall fadeRate (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall fadeMode (
       [out retval] long *pVal
     );
     [id(8015), propput]
     HRESULT __stdcall fadeMode (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall transparent (
       [out retval] WINBOOL *pVal
     );
     [id(8016), propput]
     HRESULT __stdcall transparent (
       [in] WINBOOL argNo1
     );
   };
   [
     uuid(E2CC638C-FD2C-409B-A1EA-5DDB72DC8E84),
     helpstring("IWMPExternal: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPExternal : IDispatch
   {
     [id(10005), propget]
     HRESULT __stdcall version (
       [out retval] BSTR *pBSTR
     );
     [id(10012), propget]
     HRESULT __stdcall appColorLight (
       [out retval] BSTR *pbstrColor
     );
     [id(10018), propput]
     HRESULT __stdcall OnColorChange (
       [in] IDispatch * argNo1
     );
   };
   [
     uuid(D10CCDFF-472D-498C-B5FE-3630E5405E0A),
     helpstring("IWMPExternalColors: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPExternalColors : IWMPExternal
   {
     [id(10013), propget]
     HRESULT __stdcall appColorMedium (
       [out retval] BSTR *pbstrColor
     );
     [propget]
     HRESULT __stdcall appColorDark (
       [out retval] BSTR *pbstrColor
     );
     [propget]
     HRESULT __stdcall appColorButtonHighlight (
       [out retval] BSTR *pbstrColor
     );
     [propget]
     HRESULT __stdcall appColorButtonShadow (
       [out retval] BSTR *pbstrColor
     );
     [propget]
     HRESULT __stdcall appColorButtonHoverFace (
       [out retval] BSTR *pbstrColor
     );
   };
   [
     uuid(54DF358E-CF38-4010-99F1-F44B0E9000E5),
     helpstring("IWMPSubscriptionServiceLimited: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSubscriptionServiceLimited : IWMPExternalColors
   {
     [id(10026)]
     HRESULT __stdcall NavigateTaskPaneURL (
       [in] BSTR bstrKeyName,
       [in] BSTR bstrTaskPane,
       [in] BSTR bstrParams
     );
     [propput]
     HRESULT __stdcall SelectedTaskPane (
       [in] BSTR argNo1
     );
     [id(10027), propget]
     HRESULT __stdcall SelectedTaskPane (
       [out retval] BSTR *bstrTaskPane
     );
   };
   [
     uuid(2E922378-EE70-4CEB-BBAB-CE7CE4A04816),
     helpstring("IWMPSubscriptionServiceExternal: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSubscriptionServiceExternal : IWMPSubscriptionServiceLimited
   {
     [id(10009), propget]
     HRESULT __stdcall DownloadManager (
       [out retval] dispinterface IWMPDownloadManager **ppDownloadMgr
     );
   };
   [
     uuid(E15E9AD1-8F20-4CC4-9EC7-1A328CA86A0D),
     helpstring("IWMPDownloadManager: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDownloadManager : IDispatch
   {
     [id(1151)]
     HRESULT __stdcall getDownloadCollection (
       [in] long lCollectionId,
       [out retval] dispinterface IWMPDownloadCollection **ppCollection
     );
     HRESULT __stdcall createDownloadCollection (
       [out retval] dispinterface IWMPDownloadCollection **ppCollection
     );
   };
   [
     uuid(0A319C7F-85F9-436C-B88E-82FD88000E1C),
     helpstring("IWMPDownloadCollection: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDownloadCollection : IDispatch
   {
     [id(1201), propget]
     HRESULT __stdcall ID (
       [out retval] long *plId
     );
     [propget]
     HRESULT __stdcall count (
       [out retval] long *plCount
     );
     HRESULT __stdcall Item (
       [in] long lItem,
       [out retval] dispinterface IWMPDownloadItem2 **ppDownload
     );
     HRESULT __stdcall startDownload (
       [in] BSTR bstrSourceURL,
       [in] BSTR bstrType,
       [out retval] dispinterface IWMPDownloadItem2 **ppDownload
     );
     HRESULT __stdcall removeItem (
       [in] long lItem
     );
     HRESULT __stdcall clear (void);
   };
   [
     uuid(9FBB3336-6DA3-479D-B8FF-67D46E20A987),
     helpstring("IWMPDownloadItem2: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDownloadItem2 : IWMPDownloadItem
   {
     [id(1301)]
     HRESULT __stdcall getItemInfo (
       [in] BSTR bstrItemName,
       [out retval] BSTR *pbstrVal
     );
   };
   [
     uuid(C9470E8E-3F6B-46A9-A0A9-452815C34297),
     helpstring("IWMPDownloadItem: Public interface."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDownloadItem : IDispatch
   {
     [id(1251), propget]
     HRESULT __stdcall sourceURL (
       [out retval] BSTR *pbstrURL
     );
     [propget]
     HRESULT __stdcall size (
       [out retval] long *plSize
     );
     [propget]
     HRESULT __stdcall type (
       [out retval] BSTR *pbstrType
     );
     [propget]
     HRESULT __stdcall progress (
       [out retval] long *plProgress
     );
     [propget]
     HRESULT __stdcall downloadState (
       [out retval] enum WMPSubscriptionDownloadState *pwmpsdls
     );
     HRESULT __stdcall pause (void);
     HRESULT __stdcall resume (void);
     HRESULT __stdcall cancel (void);
   };
   [
     uuid(5F0248C1-62B3-42D7-B927-029119E6AD14),
     helpstring("IWMPSubscriptionServicePlayMedia: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPSubscriptionServicePlayMedia : IWMPSubscriptionServiceLimited
   {
     [id(10004)]
     HRESULT __stdcall playMedia (
       [in] BSTR bstrURL
     );
   };
   [
     uuid(A915CEA2-72DF-41E1-A576-EF0BAE5E5169),
     helpstring("IWMPDiscoExternal: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDiscoExternal : IWMPSubscriptionServiceExternal
   {
     [id(10028), propput]
     HRESULT __stdcall OnLoginChange (
       [in] IDispatch * argNo1
     );
     [propget]
     HRESULT __stdcall userLoggedIn (
       [out retval] WINBOOL *pvbLoggedIn
     );
     HRESULT __stdcall attemptLogin (void);
     [propget]
     HRESULT __stdcall accountType (
       [out retval] BSTR *pbstrAcctType
     );
     [propput]
     HRESULT __stdcall OnViewChange (
       [in] IDispatch * argNo1
     );
     HRESULT __stdcall changeView (
       [in] BSTR bstrLibraryLocationType,
       [in] BSTR bstrLibraryLocationID,
       [in] BSTR bstrFilter,
       [in] BSTR bstrViewParams
     );
     HRESULT __stdcall changeViewOnlineList (
       [in] BSTR bstrLibraryLocationType,
       [in] BSTR bstrLibraryLocationID,
       [in] BSTR bstrParams,
       [in] BSTR bstrFriendlyName,
       [in] BSTR bstrListType,
       [in] BSTR bstrViewMode
     );
     [propget]
     HRESULT __stdcall libraryLocationType (
       [out retval] BSTR *pbstrLibraryLocationType
     );
     [propget]
     HRESULT __stdcall libraryLocationID (
       [out retval] BSTR *pbstrLibraryLocationID
     );
     [propget]
     HRESULT __stdcall selectedItemType (
       [out retval] BSTR *pbstrSelectedItemType
     );
     [propget]
     HRESULT __stdcall selectedItemID (
       [out retval] BSTR *pbstrLibraryLocationID
     );
     [propget]
     HRESULT __stdcall filter (
       [out retval] BSTR *pbstrFilter
     );
     [propget]
     HRESULT __stdcall task (
       [out retval] BSTR *pbstrTask
     );
     [propget]
     HRESULT __stdcall viewParameters (
       [out retval] BSTR *pbstrViewParameters
     );
     HRESULT __stdcall cancelNavigate (void);
     HRESULT __stdcall showPopup (
       [in] long lPopupIndex,
       [in] BSTR bstrParameters
     );
     HRESULT __stdcall addToBasket (
       [in] BSTR bstrViewType,
       [in] BSTR bstrViewIDs
     );
     [propget]
     HRESULT __stdcall basketTitle (
       [out retval] BSTR *bstrParams
     );
     HRESULT __stdcall play (
       [in] BSTR bstrLibraryLocationType,
       [in] BSTR bstrLibraryLocationIDs
     );
     HRESULT __stdcall download (
       [in] BSTR bstrViewType,
       [in] BSTR bstrViewIDs
     );
     HRESULT __stdcall buy (
       [in] BSTR bstrViewType,
       [in] BSTR bstrViewIDs
     );
     HRESULT __stdcall saveCurrentViewToLibrary (
       [in] BSTR bstrFriendlyListType,
       [in] WINBOOL fDynamic
     );
     HRESULT __stdcall authenticate (
       [in] long lAuthenticationIndex
     );
     HRESULT __stdcall sendMessage (
       [in] BSTR bstrMsg,
       [in] BSTR bstrParam
     );
     [propput]
     HRESULT __stdcall OnSendMessageComplete (
       [in] IDispatch * argNo1
     );
     [propput]
     HRESULT __stdcall ignoreIEHistory (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall pluginRunning (
       [out retval] WINBOOL *pfPluginRunning
     );
     [propget]
     HRESULT __stdcall templateBeingDisplayedInLocalLibrary (
       [out retval] WINBOOL *pfTemplateDisplayed
     );
     [propput]
     HRESULT __stdcall OnChangeViewError (
       [in] IDispatch * argNo1
     );
     [propput]
     HRESULT __stdcall OnChangeViewOnlineListError (
       [in] IDispatch * argNo1
     );
   };
   [
     uuid(2D7EF888-1D3C-484A-A906-9F49D99BB344),
     helpstring("IWMPCDDVDWizardExternal: Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPCDDVDWizardExternal : IWMPExternalColors
   {
     [id(10001)]
     HRESULT __stdcall WriteNames (
       [in] BSTR bstrTOC,
       [in] BSTR bstrMetadata
     );
     HRESULT __stdcall ReturnToMainTask (void);
     [id(10007)]
     HRESULT __stdcall WriteNamesEx (
       [in] enum WMP_WRITENAMESEX_TYPE type,
       [in] BSTR bstrTypeId,
       [in] BSTR bstrMetadata,
       [in] WINBOOL fRenameRegroupFiles
     );
     HRESULT __stdcall GetMDQByRequestID (
       [in] BSTR bstrRequestID,
       [out retval] BSTR *pbstrMDQ
     );
     [id(10011)]
     HRESULT __stdcall EditMetadata (void);
     [id(10010)]
     HRESULT __stdcall IsMetadataAvailableForEdit (
       [out retval] WINBOOL *pbIsAvailable
     );
     [id(10023)]
     HRESULT __stdcall BuyCD (
       [in] BSTR bstrTitle,
       [in] BSTR bstrArtist,
       [in] BSTR bstrAlbum,
       [in] BSTR bstrUFID,
       [in] BSTR bstrWMID
     );
   };
   [
     uuid(F81B2A59-02BC-4003-8B2F-C124AF66FC66),
     helpstring("IWMPBaseExternal: Public interface for scripting object model."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPBaseExternal : IWMPExternal
   {
   };
   [
     uuid(3148E685-B243-423D-8341-8480D6EFF674),
     helpstring("IWMPOfflineExternal: Not Public.  Internal interface used by Windows Media Player.."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPOfflineExternal : IWMPExternal
   {
     [id(10025)]
     HRESULT __stdcall forceOnline (void);
   };
   [
     uuid(4E195DB1-9E29-47FC-9CE1-DE9937D32925),
     helpstring("IWMPDMRAVTransportService Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDMRAVTransportService : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall TransportState (
       [out retval] BSTR *pbstrTransportState
     );
     [propget]
     HRESULT __stdcall TransportStatus (
       [out retval] BSTR *pbstrTransportStatus
     );
     [propget]
     HRESULT __stdcall PlaybackStorageMedium (
       [out retval] BSTR *pbstrPlaybackStorageMedium
     );
     [propget]
     HRESULT __stdcall RecordStorageMedium (
       [out retval] BSTR *pbstrRecordStorageMedium
     );
     [propget]
     HRESULT __stdcall PossiblePlaybackStorageMedia (
       [out retval] BSTR *pbstrPossiblePlaybackStorageMedia
     );
     [propget]
     HRESULT __stdcall PossibleRecordStorageMedia (
       [out retval] BSTR *pbstrPossibleRecordStorageMedia
     );
     [propget]
     HRESULT __stdcall CurrentPlayMode (
       [out retval] BSTR *pbstrCurrentPlayMode
     );
     [propget]
     HRESULT __stdcall TransportPlaySpeed (
       [out retval] BSTR *pbstrTransportPlaySpeed
     );
     [propget]
     HRESULT __stdcall RecordMediumWriteStatus (
       [out retval] BSTR *pbstrRecordMediumWriteStatus
     );
     [propget]
     HRESULT __stdcall CurrentRecordQualityMode (
       [out retval] BSTR *pbstrCurrentRecordQualityMode
     );
     [propget]
     HRESULT __stdcall PossibleRecordQualityModes (
       [out retval] BSTR *pbstrPossibleRecordQualityModes
     );
     [propget]
     HRESULT __stdcall NumberOfTracks (
       [out retval] UINT *pulNumberOfTracks
     );
     [propget]
     HRESULT __stdcall CurrentTrack (
       [out retval] UINT *pulCurrentTrack
     );
     [propget]
     HRESULT __stdcall CurrentTrackDuration (
       [out retval] BSTR *pbstrCurrentTrackDuration
     );
     [propget]
     HRESULT __stdcall CurrentMediaDuration (
       [out retval] BSTR *pbstrCurrentMediaDuration
     );
     [propget]
     HRESULT __stdcall CurrentTrackMetaData (
       [out retval] BSTR *pbstrCurrentTrackMetaData
     );
     [propget]
     HRESULT __stdcall CurrentTrackURI (
       [out retval] BSTR *pbstrCurrentTrackURI
     );
     [propget]
     HRESULT __stdcall AVTransportURI (
       [out retval] BSTR *pbstrAVTransportURI
     );
     [propget]
     HRESULT __stdcall AVTransportURIMetaData (
       [out retval] BSTR *pbstrAVTransportURIMetaData
     );
     [propget]
     HRESULT __stdcall NextAVTransportURI (
       [out retval] BSTR *pbstrNextAVTransportURI
     );
     [propget]
     HRESULT __stdcall NextAVTransportURIMetaData (
       [out retval] BSTR *pbstrNextAVTransportURIMetaData
     );
     [propget]
     HRESULT __stdcall RelativeTimePosition (
       [out retval] BSTR *pRelativeTimePosition
     );
     [propget]
     HRESULT __stdcall AbsoluteTimePosition (
       [out retval] BSTR *pbstrAbsoluteTimePosition
     );
     [propget]
     HRESULT __stdcall RelativeCounterPosition (
       [out retval] long *plRelativeCounterPosition
     );
     [propget]
     HRESULT __stdcall AbsoluteCounterPosition (
       [out retval] long *plAbsoluteCounterPosition
     );
     [propget]
     HRESULT __stdcall CurrentTransportActions (
       [out retval] BSTR *pbstrCurrentTransportActions
     );
     [propget]
     HRESULT __stdcall LastChange (
       [out retval] BSTR *pbstrLastChange
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_SeekMode (
       [out retval] BSTR *pbstrSeekMode
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_SeekTarget (
       [out retval] BSTR *pbstrSeekTarget
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_InstanceID (
       [out retval] UINT *pulInstanceID
     );
     [id(45), propget]
     HRESULT __stdcall CurrentProtocolInfo (
       [out retval] BSTR *pstrProtocolInfo
     );
     [id(31)]
     HRESULT __stdcall SetAVTransportURI (
       [in] IUnknown * punkRemoteEndpointInfo,
       [in] UINT ulInstanceID,
       [in] BSTR bstrCurrentURI,
       [in] BSTR bstrCurrentURIMetaData
     );
     [id(33)]
     HRESULT __stdcall GetMediaInfo (
       [in] UINT ulInstanceID,
       [out] UINT *pulNumTracks,
       [out] BSTR *pbstrMediaDuration,
       [out] BSTR *pbstrCurrentURI,
       [out] BSTR *pbstrCurrentURIMetaData,
       [out] BSTR *pbstrNextURI,
       [out] BSTR *pNextURIMetaData,
       [out] BSTR *pbstrPlayMedium,
       [out] BSTR *pbstrRecordMedium,
       [out] BSTR *pbstrWriteStatus
     );
     HRESULT __stdcall GetTransportInfo (
       [in] UINT ulInstanceID,
       [out] BSTR *pbstrCurrentTransportState,
       [out] BSTR *pbstrCurrentTransportStatus,
       [out] BSTR *pbstrCurrentSpeed
     );
     HRESULT __stdcall GetPositionInfo (
       [in] UINT ulInstanceID,
       [out] UINT *pTrack,
       [out] BSTR *pbstrTrackDuration,
       [out] BSTR *pbstrTrackMetaData,
       [out] BSTR *pbstrTrackURI,
       [out] BSTR *pbstrRelTime,
       [out] BSTR *pbstrAbsTime,
       [out] long *plRelCount,
       [out] long *plAbsCount
     );
     HRESULT __stdcall GetDeviceCapabilities (
       [in] UINT ulInstanceID,
       [out] BSTR *pbstrPlayMedia,
       [out] BSTR *pbstrRecMedia,
       [out] BSTR *pbstrRecQualityModes
     );
     HRESULT __stdcall GetTransportSettings (
       [in] UINT ulInstanceID,
       [out] BSTR *pbstrPlayMode,
       [out] BSTR *pbstrRecQualityMode
     );
     HRESULT __stdcall stop (
       [in] UINT ulInstanceID
     );
     HRESULT __stdcall play (
       [in] UINT ulInstanceID,
       [in] BSTR bstrSpeed
     );
     HRESULT __stdcall pause (
       [in] UINT ulInstanceID
     );
     HRESULT __stdcall Seek (
       [in] UINT ulInstanceID,
       [in] BSTR bstrUnit,
       [in] BSTR bstrTarget
     );
     HRESULT __stdcall next (
       [in] UINT ulInstanceID
     );
     HRESULT __stdcall previous (
       [in] UINT ulInstanceID
     );
     HRESULT __stdcall GetCurrentTransportActions (
       [in] UINT ulInstanceID,
       [in out] BSTR *pbstrActions
     );
   };
   [
     uuid(FB61CD38-8DE7-4479-8B76-A8D097C20C70),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDMRConnectionManagerService : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall SourceProtocolInfo (
       [out retval] BSTR *pbstrSourceProtocolInfo
     );
     [propget]
     HRESULT __stdcall SinkProtocolInfo (
       [out retval] BSTR *pbstrSinkProtocolInfo
     );
     [propget]
     HRESULT __stdcall CurrentConnectionIDs (
       [out retval] BSTR *pbstrCurrentConnectionIDs
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_ConnectionStatus (
       [out retval] BSTR *pbstrA_ARG_TYPE_ConnectionStatus
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_ConnectionManager (
       [out retval] BSTR *pbstrA_ARG_TYPE_ConnectionManager
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_Direction (
       [out retval] BSTR *pbstrA_ARG_TYPE_Direction
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_ProtocolInfo (
       [out retval] BSTR *pbstrA_ARG_TYPE_ProtocolInfo
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_ConnectionID (
       [out retval] long *plA_ARG_TYPE_ConnectionID
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_AVTransportID (
       [out retval] long *plA_ARG_TYPE_AVTransportID
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_RcsID (
       [out retval] long *plA_ARG_TYPE_RcsID
     );
     HRESULT __stdcall GetProtocolInfo (
       [in out] BSTR *pbstrSource,
       [in out] BSTR *pbstrSink
     );
     HRESULT __stdcall GetCurrentConnectionIDs (
       [in out] BSTR *pbstrConnectionIDs
     );
     HRESULT __stdcall GetCurrentConnectionInfo (
       [in] long lConnectionID,
       [in out] long *plResID,
       [in out] long *plAVTransportID,
       [in out] BSTR *pbstrProtocolInfo,
       [in out] BSTR *pbstrPeerConnectionManager,
       [in out] long *plPeerConnectionID,
       [in out] BSTR *pbstrDirection,
       [in out] BSTR *pbstrStatus
     );
   };
   [
     uuid(FF4B1BDA-19F0-42CF-8DDA-19162950C543),
     helpstring("IWMPDMRRenderingControlService Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMPDMRRenderingControlService : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall LastChange (
       [out retval] BSTR *pbstrLastChange
     );
     [propget]
     HRESULT __stdcall PresetNameList (
       [out retval] BSTR *pbstrPresetNameList
     );
     [propget]
     HRESULT __stdcall mute (
       [out retval] WINBOOL *pbMute
     );
     [propget]
     HRESULT __stdcall volume (
       [out retval] USHORT *puiVolume
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_Channel (
       [out retval] BSTR *pbstrA_ARG_TYPE_Channel
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_InstanceID (
       [out retval] UINT *pulA_ARG_TYPE_InstanceID
     );
     [propget]
     HRESULT __stdcall A_ARG_TYPE_PresetName (
       [out retval] BSTR *pbstrA_ARG_TYPE_PresetName
     );
     HRESULT __stdcall ListPresets (
       [in] UINT ulInstanceID,
       [in out] BSTR *pbstrCurrentPresetList
     );
     HRESULT __stdcall SelectPreset (
       [in] UINT ulInstanceID,
       [in] BSTR bstrPresetName
     );
     HRESULT __stdcall GetMute (
       [in] UINT ulInstanceID,
       [in] BSTR bstrChannel,
       [in out] WINBOOL *pbCurrentMute
     );
     HRESULT __stdcall SetMute (
       [in] UINT ulInstanceID,
       [in] BSTR bstrChannel,
       [in] WINBOOL bDesiredMute
     );
     HRESULT __stdcall GetVolume (
       [in] UINT ulInstanceID,
       [in] BSTR bstrChannel,
       [in out] USHORT *puiCurrentVolume
     );
     HRESULT __stdcall SetVolume (
       [in] UINT ulInstanceID,
       [in] BSTR bstrChannel,
       [in] USHORT uiDesiredVolume
     );
   };

};

/* Interface declarations.  */
[
  uuid(19A6627B-DA9E-47C1-BB23-00B5E668236A),
  helpstring("IWMPEvents: Public interface.")
]
interface IWMPEvents : IUnknown
{
  [id(5001)]
  void __stdcall OpenStateChange (
    [in] long NewState
  );
  [id(5101)]
  void __stdcall PlayStateChange (
    [in] long NewState
  );
  void __stdcall AudioLanguageChange (
    [in] long LangID
  );
  [id(5002)]
  void __stdcall StatusChange (void);
  [id(5301)]
  void __stdcall ScriptCommand (
    [in] BSTR scType,
    [in] BSTR Param
  );
  [id(5403)]
  void __stdcall NewStream (void);
  [id(5401)]
  void __stdcall Disconnect (
    [in] long Result
  );
  void __stdcall Buffering (
    [in] WINBOOL Start
  );
  [id(5501)]
  void __stdcall Error (void);
  [id(5601)]
  void __stdcall Warning (
    [in] long WarningType,
    [in] long Param,
    [in] BSTR Description
  );
  [id(5201)]
  void __stdcall EndOfStream (
    [in] long Result
  );
  void __stdcall PositionChange (
    [in] double oldPosition,
    [in] double newPosition
  );
  void __stdcall MarkerHit (
    [in] long MarkerNum
  );
  void __stdcall DurationUnitChange (
    [in] long NewDurationUnit
  );
  [id(5701)]
  void __stdcall CdromMediaChange (
    [in] long CdromNum
  );
  [id(5801)]
  void __stdcall PlaylistChange (
    [in] IDispatch * Playlist,
    [in] enum WMPPlaylistChangeEventType change
  );
  [id(5804)]
  void __stdcall CurrentPlaylistChange (
    [in] enum WMPPlaylistChangeEventType change
  );
  void __stdcall CurrentPlaylistItemAvailable (
    [in] BSTR bstrItemName
  );
  [id(5802)]
  void __stdcall MediaChange (
    [in] IDispatch * Item
  );
  void __stdcall CurrentMediaItemAvailable (
    [in] BSTR bstrItemName
  );
  [id(5806)]
  void __stdcall CurrentItemChange (
    [in] IDispatch * pdispMedia
  );
  void __stdcall MediaCollectionChange (void);
  void __stdcall MediaCollectionAttributeStringAdded (
    [in] BSTR bstrAttribName,
    [in] BSTR bstrAttribVal
  );
  void __stdcall MediaCollectionAttributeStringRemoved (
    [in] BSTR bstrAttribName,
    [in] BSTR bstrAttribVal
  );
  [id(5820)]
  void __stdcall MediaCollectionAttributeStringChanged (
    [in] BSTR bstrAttribName,
    [in] BSTR bstrOldAttribVal,
    [in] BSTR bstrNewAttribVal
  );
  [id(5810)]
  void __stdcall PlaylistCollectionChange (void);
  void __stdcall PlaylistCollectionPlaylistAdded (
    [in] BSTR bstrPlaylistName
  );
  void __stdcall PlaylistCollectionPlaylistRemoved (
    [in] BSTR bstrPlaylistName
  );
  [id(5818)]
  void __stdcall PlaylistCollectionPlaylistSetAsDeleted (
    [in] BSTR bstrPlaylistName,
    [in] WINBOOL varfIsDeleted
  );
  void __stdcall ModeChange (
    [in] BSTR ModeName,
    [in] WINBOOL NewValue
  );
  [id(5821)]
  void __stdcall MediaError (
    [in] IDispatch * pMediaObject
  );
  [id(5823)]
  void __stdcall OpenPlaylistSwitch (
    [in] IDispatch * pItem
  );
  [id(5822)]
  void __stdcall DomainChange (
    [in] BSTR strDomain
  );
  [id(6501)]
  void __stdcall SwitchedToPlayerApplication (void);
  void __stdcall SwitchedToControl (void);
  void __stdcall PlayerDockedStateChange (void);
  void __stdcall PlayerReconnect (void);
  void __stdcall Click (
    [in] short nButton,
    [in] short nShiftState,
    [in] long fX,
    [in] long fY
  );
  void __stdcall DoubleClick (
    [in] short nButton,
    [in] short nShiftState,
    [in] long fX,
    [in] long fY
  );
  void __stdcall KeyDown (
    [in] short nKeyCode,
    [in] short nShiftState
  );
  void __stdcall KeyPress (
    [in] short nKeyAscii
  );
  void __stdcall KeyUp (
    [in] short nKeyCode,
    [in] short nShiftState
  );
  void __stdcall MouseDown (
    [in] short nButton,
    [in] short nShiftState,
    [in] long fX,
    [in] long fY
  );
  void __stdcall MouseMove (
    [in] short nButton,
    [in] short nShiftState,
    [in] long fX,
    [in] long fY
  );
  void __stdcall MouseUp (
    [in] short nButton,
    [in] short nShiftState,
    [in] long fX,
    [in] long fY
  );
};
[
  uuid(1E7601FA-47EA-4107-9EA9-9004ED9684FF),
  helpstring("IWMPEvents2: Public interface.")
]
interface IWMPEvents2 : IWMPEvents
{
  [id(6513)]
  void __stdcall DeviceConnect (
    [in] interface IWMPSyncDevice *pDevice
  );
  void __stdcall DeviceDisconnect (
    [in] interface IWMPSyncDevice *pDevice
  );
  void __stdcall DeviceStatusChange (
    [in] interface IWMPSyncDevice *pDevice,
    [in] enum WMPDeviceStatus NewStatus
  );
  void __stdcall DeviceSyncStateChange (
    [in] interface IWMPSyncDevice *pDevice,
    [in] enum WMPSyncState NewState
  );
  void __stdcall DeviceSyncError (
    [in] interface IWMPSyncDevice *pDevice,
    [in] IDispatch * pMedia
  );
  void __stdcall CreatePartnershipComplete (
    [in] interface IWMPSyncDevice *pDevice,
    [in] HRESULT hrResult
  );
};
[
  uuid(82A2986C-0293-4FD0-B279-B21B86C058BE),
  helpstring("IWMPSyncDevice: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPSyncDevice : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall friendlyName (
    [out retval] BSTR *pbstrName
  );
  [id(1610678272), propput]
  HRESULT __stdcall friendlyName (
    [in] BSTR argNo1
  );
  [id(1610678274), propget]
  HRESULT __stdcall deviceName (
    [out retval] BSTR *pbstrName
  );
  [propget]
  HRESULT __stdcall deviceId (
    [out retval] BSTR *pbstrDeviceId
  );
  [propget]
  HRESULT __stdcall partnershipIndex (
    [out retval] long *plIndex
  );
  [propget]
  HRESULT __stdcall connected (
    [out retval] WINBOOL *pvbConnected
  );
  [propget]
  HRESULT __stdcall status (
    [out retval] enum WMPDeviceStatus *pwmpds
  );
  [propget]
  HRESULT __stdcall syncState (
    [out retval] enum WMPSyncState *pwmpss
  );
  [propget]
  HRESULT __stdcall progress (
    [out retval] long *plProgress
  );
  HRESULT __stdcall getItemInfo (
    [in] BSTR bstrItemName,
    [out retval] BSTR *pbstrVal
  );
  HRESULT __stdcall createPartnership (
    [in] WINBOOL vbShowUI
  );
  HRESULT __stdcall deletePartnership (void);
  HRESULT __stdcall Start (void);
  HRESULT __stdcall stop (void);
  HRESULT __stdcall showSettings (void);
  HRESULT __stdcall isIdentical (
    [in] interface IWMPSyncDevice *pDevice,
    [out retval] WINBOOL *pvbool
  );
};
[
  uuid(1F504270-A66B-4223-8E96-26A06C63D69F),
  helpstring("IWMPEvents3: Public interface.")
]
interface IWMPEvents3 : IWMPEvents2
{
  [id(6519)]
  void __stdcall CdromRipStateChange (
    [in] interface IWMPCdromRip *pCdromRip,
    [in] enum WMPRipState wmprs
  );
  void __stdcall CdromRipMediaError (
    [in] interface IWMPCdromRip *pCdromRip,
    [in] IDispatch * pMedia
  );
  void __stdcall CdromBurnStateChange (
    [in] interface IWMPCdromBurn *pCdromBurn,
    [in] enum WMPBurnState wmpbs
  );
  void __stdcall CdromBurnMediaError (
    [in] interface IWMPCdromBurn *pCdromBurn,
    [in] IDispatch * pMedia
  );
  void __stdcall CdromBurnError (
    [in] interface IWMPCdromBurn *pCdromBurn,
    [in] HRESULT hrError
  );
  void __stdcall LibraryConnect (
    [in] interface IWMPLibrary *pLibrary
  );
  void __stdcall LibraryDisconnect (
    [in] interface IWMPLibrary *pLibrary
  );
  void __stdcall FolderScanStateChange (
    [in] enum WMPFolderScanState wmpfss
  );
  [id(5824)]
  void __stdcall StringCollectionChange (
    [in] IDispatch * pdispStringCollection,
    [in] enum WMPStringCollectionChangeEventType change,
    [in] long lCollectionIndex
  );
  void __stdcall MediaCollectionMediaAdded (
    [in] IDispatch * pdispMedia
  );
  void __stdcall MediaCollectionMediaRemoved (
    [in] IDispatch * pdispMedia
  );
};
[
  uuid(56E2294F-69ED-4629-A869-AEA72C0DCC2C),
  helpstring("IWMPCdromRip: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPCdromRip : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall ripState (
    [out retval] enum WMPRipState *pwmprs
  );
  [propget]
  HRESULT __stdcall ripProgress (
    [out retval] long *plProgress
  );
  HRESULT __stdcall startRip (void);
  HRESULT __stdcall stopRip (void);
};
[
  uuid(BD94DBEB-417F-4928-AA06-087D56ED9B59),
  helpstring("IWMPCdromBurn: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPCdromBurn : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall isAvailable (
    [in] BSTR bstrItem,
    [out retval] WINBOOL *pIsAvailable
  );
  HRESULT __stdcall getItemInfo (
    [in] BSTR bstrItem,
    [out retval] BSTR *pbstrVal
  );
  [propget]
  HRESULT __stdcall label (
    [out retval] BSTR *pbstrLabel
  );
  [id(1610678274), propput]
  HRESULT __stdcall label (
    [in] BSTR argNo1
  );
  [id(1610678276), propget]
  HRESULT __stdcall burnFormat (
    [out retval] enum WMPBurnFormat *pwmpbf
  );
  [id(1610678276), propput]
  HRESULT __stdcall burnFormat (
    [in] enum WMPBurnFormat argNo1
  );
  [id(1610678278), propget]
  HRESULT __stdcall burnPlaylist (
    [out retval] dispinterface IWMPPlaylist **ppPlaylist
  );
  [id(1610678278), propput]
  HRESULT __stdcall burnPlaylist (
    [in] dispinterface IWMPPlaylist *argNo1
  );
  [id(1610678280)]
  HRESULT __stdcall refreshStatus (void);
  [propget]
  HRESULT __stdcall burnState (
    [out retval] enum WMPBurnState *pwmpbs
  );
  [propget]
  HRESULT __stdcall burnProgress (
    [out retval] long *plProgress
  );
  HRESULT __stdcall startBurn (void);
  HRESULT __stdcall stopBurn (void);
  HRESULT __stdcall erase (void);
};
[
  uuid(3DF47861-7DF1-4C1F-A81B-4C26F0F7A7C6),
  helpstring("IWMPLibrary: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPLibrary : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall name (
    [out retval] BSTR *pbstrName
  );
  [propget]
  HRESULT __stdcall type (
    [out retval] enum WMPLibraryType *pwmplt
  );
  [propget]
  HRESULT __stdcall mediaCollection (
    [out retval] dispinterface IWMPMediaCollection **ppIWMPMediaCollection
  );
  HRESULT __stdcall isIdentical (
    [in] interface IWMPLibrary *pIWMPLibrary,
    [out retval] WINBOOL *pvbool
  );
};
[
  uuid(26DABCFA-306B-404D-9A6F-630A8405048D),
  helpstring("IWMPEvents4: Public interface.")
]
interface IWMPEvents4 : IWMPEvents3
{
  [id(6527)]
  void __stdcall DeviceEstimation (
    [in] interface IWMPSyncDevice *pDevice,
    [in] HRESULT hrResult,
    [in] LONGLONG qwEstimatedUsedSpace,
    [in] LONGLONG qwEstimatedSpace
  );
};
[
  uuid(1D01FBDB-ADE2-4C8D-9842-C190B95C3306),
  helpstring("IWMPPlayerServices: Public interface for Windows Media Player SDK.")
]
interface IWMPPlayerServices : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall activateUIPlugin (
    [in] BSTR bstrPlugin
  );
  HRESULT __stdcall setTaskPane (
    [in] BSTR bstrTaskPane
  );
  HRESULT __stdcall setTaskPaneURL (
    [in] BSTR bstrTaskPane,
    [in] BSTR bstrURL,
    [in] BSTR bstrFriendlyName
  );
};
[
  uuid(1BB1592F-F040-418A-9F71-17C7512B4D70),
  helpstring("IWMPPlayerServices2: Public interface for Windows Media Player SDK.")
]
interface IWMPPlayerServices2 : IWMPPlayerServices
{
  [id(1610743808)]
  HRESULT __stdcall setBackgroundProcessingPriority (
    [in] BSTR bstrPriority
  );
};
[
  uuid(CBB92747-741F-44FE-AB5B-F1A48F3B2A59),
  helpstring("IWMPRemoteMediaServices: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPRemoteMediaServices : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetServiceType (
    [out] BSTR *pbstrType
  );
  HRESULT __stdcall GetApplicationName (
    [out] BSTR *pbstrName
  );
  HRESULT __stdcall GetScriptableObject (
    [out] BSTR *pbstrName,
    [out] IDispatch **ppDispatch
  );
  HRESULT __stdcall GetCustomUIMode (
    [out] BSTR *pbstrFile
  );
};
[
  uuid(8B5050FF-E0A4-4808-B3A8-893A9E1ED894),
  helpstring("IWMPSyncServices: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPSyncServices : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall deviceCount (
    [out retval] long *plCount
  );
  HRESULT __stdcall getDevice (
    [in] long lIndex,
    [out retval] interface IWMPSyncDevice **ppDevice
  );
};
[
  uuid(39C2F8D5-1CF2-4D5E-AE09-D73492CF9EAA),
  helpstring("IWMPLibraryServices: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPLibraryServices : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall getCountByType (
    [in] enum WMPLibraryType wmplt,
    [out retval] long *plCount
  );
  HRESULT __stdcall getLibraryByType (
    [in] enum WMPLibraryType wmplt,
    [in] long lIndex,
    [out retval] interface IWMPLibrary **ppIWMPLibrary
  );
};
[
  uuid(82CBA86B-9F04-474B-A365-D6DD1466E541),
  helpstring("IWMPLibrarySharingServices: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPLibrarySharingServices : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall isLibraryShared (
    [out retval] WINBOOL *pvbShared
  );
  HRESULT __stdcall isLibrarySharingEnabled (
    [out retval] WINBOOL *pvbEnabled
  );
  HRESULT __stdcall showLibrarySharing (void);
};
[
  uuid(DD578A4E-79B1-426C-BF8F-3ADD9072500B),
  helpstring("IWMPLibrary2: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPLibrary2 : IWMPLibrary
{
  [id(1610743808)]
  HRESULT __stdcall getItemInfo (
    [in] BSTR bstrItemName,
    [out retval] BSTR *pbstrVal
  );
};
[
  uuid(788C8743-E57F-439D-A468-5BC77F2E59C6),
  helpstring("IWMPFolderMonitorServices: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPFolderMonitorServices : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall count (
    [out retval] long *plCount
  );
  HRESULT __stdcall Item (
    [in] long lIndex,
    [out retval] BSTR *pbstrFolder
  );
  HRESULT __stdcall add (
    [in] BSTR bstrFolder
  );
  HRESULT __stdcall remove (
    [in] long lIndex
  );
  [propget]
  HRESULT __stdcall scanState (
    [out retval] enum WMPFolderScanState *pwmpfss
  );
  [propget]
  HRESULT __stdcall currentFolder (
    [out retval] BSTR *pbstrFolder
  );
  [propget]
  HRESULT __stdcall scannedFilesCount (
    [out retval] long *plCount
  );
  [propget]
  HRESULT __stdcall addedFilesCount (
    [out retval] long *plCount
  );
  [propget]
  HRESULT __stdcall updateProgress (
    [out retval] long *plProgress
  );
  HRESULT __stdcall startScan (void);
  HRESULT __stdcall stopScan (void);
};
[
  uuid(88AFB4B2-140A-44D2-91E6-4543DA467CD1),
  helpstring("IWMPSyncDevice2: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPSyncDevice2 : IWMPSyncDevice
{
  [id(1610743808)]
  HRESULT __stdcall setItemInfo (
    [in] BSTR bstrItemName,
    [in] BSTR bstrVal
  );
};
[
  uuid(B22C85F9-263C-4372-A0DA-B518DB9B4098),
  helpstring("IWMPSyncDevice3: Public interface for Windows Media Player SDK."),
  oleautomation
]
interface IWMPSyncDevice3 : IWMPSyncDevice2
{
  [id(1610809344)]
  HRESULT __stdcall estimateSyncSize (
    [in] dispinterface IWMPPlaylist *pNonRulePlaylist,
    [in] dispinterface IWMPPlaylist *pRulesPlaylist
  );
  HRESULT __stdcall cancelEstimation (void);
};

