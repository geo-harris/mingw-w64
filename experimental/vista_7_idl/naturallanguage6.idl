/* Automated generated idl file <naturallanguage6>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IKeyValuePair;
interface ITextContext;
interface ILexicon;
interface ILexiconEntryEnumerator;
interface ILexiconEntry;
interface ILoadResources;
interface IStream;
interface ISequentialStream;
interface IProcessingOptions;
interface ITextChunk;
interface ISentence;
interface ITextSegment;
interface IRangedTextSource;
interface IRangedTextSink;

/* Structure forward declarations.  */
struct STextRange;
struct SRangeData;
struct _LARGE_INTEGER;
struct _ULARGE_INTEGER;
struct tagSTATSTG;
struct _FILETIME;

/* Union record forward declarations.  */
coclass KeyValuePair;
coclass TextContext;
coclass TextChunk;
coclass ProofResourceLoader;
coclass LexiconEntry;
coclass Lexicon;

/* Enumeration declarations.  */
enum MeasureUnit
{
  ecmuNone = (int) 201326592,
  ecmuOther = (int) 201326593,
  ecmuNanoseconds = (int) 201326594,
  ecmuMicroseconds = (int) 201326595,
  ecmuMilliseconds = (int) 201326596,
  ecmuSeconds = (int) 201326597,
  ecmuMinutes = (int) 201326598,
  ecmuHours = (int) 201326599,
  ecmuDays = (int) 201326600,
  ecmuWeeks = (int) 201326601,
  ecmuMonths = (int) 201326602,
  ecmuQuarters = (int) 201326603,
  ecmuSeasons = (int) 201326604,
  ecmuYears = (int) 201326605,
  ecmuDecades = (int) 201326606,
  ecmuCenturies = (int) 201326607,
  ecmuMillennia = (int) 201326608,
  ecmuNanometers = (int) 201326609,
  ecmuMicrons = (int) 201326610,
  ecmuMillimeters = (int) 201326611,
  ecmuCentimeters = (int) 201326612,
  ecmuMeters = (int) 201326613,
  ecmuKilometers = (int) 201326614,
  ecmuInches = (int) 201326615,
  ecmuFeet = (int) 201326616,
  ecmuYards = (int) 201326617,
  ecmuMiles = (int) 201326618,
  ecmuAED = (int) 201326619,
  ecmuARP = (int) 201326620,
  ecmuATS = (int) 201326621,
  ecmuAUD = (int) 201326622,
  ecmuBBD = (int) 201326623,
  ecmuBRL = (int) 201326624,
  ecmuBEF = (int) 201326625,
  ecmuBGL = (int) 201326626,
  ecmuBHD = (int) 201326627,
  ecmuBMD = (int) 201326628,
  ecmuBRR = (int) 201326629,
  ecmuBSD = (int) 201326630,
  ecmuCAD = (int) 201326631,
  ecmuCHF = (int) 201326632,
  ecmuCLP = (int) 201326633,
  ecmuCNY = (int) 201326634,
  ecmuCSK = (int) 201326635,
  ecmuCYP = (int) 201326636,
  ecmuDEM = (int) 201326637,
  ecmuDJF = (int) 201326638,
  ecmuDKK = (int) 201326639,
  ecmuDZD = (int) 201326640,
  ecmuEGP = (int) 201326641,
  ecmuESP = (int) 201326642,
  ecmuEUR = (int) 201326643,
  ecmuFIM = (int) 201326644,
  ecmuFJD = (int) 201326645,
  ecmuFRF = (int) 201326646,
  ecmuGBP = (int) 201326647,
  ecmuGRD = (int) 201326648,
  ecmuHKD = (int) 201326649,
  ecmuHUF = (int) 201326650,
  ecmuIDR = (int) 201326651,
  ecmuIEP = (int) 201326652,
  ecmuILS = (int) 201326653,
  ecmuINR = (int) 201326654,
  ecmuIQD = (int) 201326655,
  ecmuISK = (int) 201326656,
  ecmuITL = (int) 201326657,
  ecmuJMD = (int) 201326658,
  ecmuJOD = (int) 201326659,
  ecmuJPY = (int) 201326660,
  ecmuKRW = (int) 201326661,
  ecmuKWD = (int) 201326662,
  ecmuLBP = (int) 201326663,
  ecmuLUF = (int) 201326664,
  ecmuLYD = (int) 201326665,
  ecmuMAD = (int) 201326666,
  ecmuMRO = (int) 201326667,
  ecmuMXP = (int) 201326668,
  ecmuMYR = (int) 201326669,
  ecmuNLG = (int) 201326670,
  ecmuNOK = (int) 201326671,
  ecmuNZD = (int) 201326672,
  ecmuOMR = (int) 201326673,
  ecmuPHP = (int) 201326674,
  ecmuPKR = (int) 201326675,
  ecmuPLZ = (int) 201326676,
  ecmuPTE = (int) 201326677,
  ecmuQAR = (int) 201326678,
  ecmuROL = (int) 201326679,
  ecmuRUR = (int) 201326680,
  ecmuSAR = (int) 201326681,
  ecmuSDD = (int) 201326682,
  ecmuSEK = (int) 201326683,
  ecmuSGD = (int) 201326684,
  ecmuSKK = (int) 201326685,
  ecmuSOS = (int) 201326686,
  ecmuSUR = (int) 201326687,
  ecmuSYP = (int) 201326688,
  ecmuTHB = (int) 201326689,
  ecmuTND = (int) 201326690,
  ecmuTRL = (int) 201326691,
  ecmuTTD = (int) 201326692,
  ecmuTWD = (int) 201326693,
  ecmuUSD = (int) 201326694,
  ecmuVEB = (int) 201326695,
  ecmuXEC = (int) 201326696,
  ecmuYER = (int) 201326697,
  ecmuZAR = (int) 201326698,
  ecmuZMK = (int) 201326699,
  ecmuDM = (int) 201326700,
  ecmuFF = (int) 201326701,
  ecmuEuros = (int) 201326702,
  ecmuCents = (int) 201326703
};
enum Weekday
{
  ecwNone = (int) 201326592,
  ecwMonday = (int) 201326593,
  ecwTuesday = (int) 201326594,
  ecwWednesday = (int) 201326595,
  ecwThursday = (int) 201326596,
  ecwFriday = (int) 201326597,
  ecwSaturday = (int) 201326598,
  ecwSunday = (int) 201326599
};
enum Month
{
  ecmNone = (int) 201326592,
  ecmJanuary = (int) 201326593,
  ecmFebruary = (int) 201326594,
  ecmMarch = (int) 201326595,
  ecmApril = (int) 201326596,
  ecmMay = (int) 201326597,
  ecmJune = (int) 201326598,
  ecmJuly = (int) 201326599,
  ecmAugust = (int) 201326600,
  ecmSeptember = (int) 201326601,
  ecmOctober = (int) 201326602,
  ecmNovember = (int) 201326603,
  ecmDecember = (int) 201326604
};
enum Era
{
  eceNone = (int) 201326592,
  eceBCE = (int) 201326593,
  eceCE = (int) 201326594,
  eceHeisei = (int) 201326595,
  eceShowa = (int) 201326596,
  eceTaisho = (int) 201326597,
  eceMeiji = (int) 201326598
};
enum HourQualifier
{
  echqNone = (int) 201326592,
  echqAM = (int) 201326593,
  echqPM = (int) 201326594,
  echqTwentyFourHour = (int) 201326595
};
enum TimeUnit
{
  ectuOther = (int) 201326592,
  ectuInstants = (int) 201326593,
  ectuSeconds = (int) 201326594,
  ectuMinutes = (int) 201326595,
  ectuHours = (int) 201326596,
  ectuDays = (int) 201326597,
  ectuWeekends = (int) 201326598,
  ectuWeeks = (int) 201326599,
  ectuMonths = (int) 201326600,
  ectuQuarters = (int) 201326601,
  ectuSeasons = (int) 201326602,
  ectuYears = (int) 201326603,
  ectuDecades = (int) 201326604,
  ectuCenturies = (int) 201326605,
  ectuMillennia = (int) 201326606,
  ectuMondays = (int) 201326607,
  ectuTuesdays = (int) 201326608,
  ectuWednesdays = (int) 201326609,
  ectuThursdays = (int) 201326610,
  ectuFridays = (int) 201326611,
  ectuSaturdays = (int) 201326612,
  ectuSundays = (int) 201326613,
  ectuJanuaries = (int) 201326614,
  ectuFebruaries = (int) 201326615,
  ectuMarches = (int) 201326616,
  ectuAprils = (int) 201326617,
  ectuMays = (int) 201326618,
  ectuJunes = (int) 201326619,
  ectuJulys = (int) 201326620,
  ectuAugusts = (int) 201326621,
  ectuSeptembers = (int) 201326622,
  ectuOctobers = (int) 201326623,
  ectuNovembers = (int) 201326624,
  ectuDecembers = (int) 201326625,
  ectuSprings = (int) 201326626,
  ectuSummers = (int) 201326627,
  ectuAutumns = (int) 201326628,
  ectuWinters = (int) 201326629,
  ectuMornings = (int) 201326630,
  ectuAfternoons = (int) 201326631,
  ectuEvenings = (int) 201326632,
  ectuNights = (int) 201326633
};
enum Direction
{
  ecdUnspecified = (int) 201326592,
  ecdForwards = (int) 201326593,
  ecdBackwards = (int) 201326594
};
enum TimeLengthQualifier
{
  ectlqNone = (int) 201326592,
  ectlqMoreThan = (int) 201326593,
  ectlqLessThan = (int) 201326594,
  ectlqAtLeast = (int) 201326595,
  ectlqAtMost = (int) 201326596,
  ectlqPrecisely = (int) 201326597
};
enum PrimaryRangeType
{
  ecprtNone = (int) 201326592,
  ecprtNumber = (int) 201326593,
  ecprtPersonName = (int) 201326594,
  ecprtLocationName = (int) 201326595,
  ecprtOrganizationName = (int) 201326596,
  ecprtTime = (int) 201326597,
  ecprtDate = (int) 201326598,
  ecprtMeasure = (int) 201326599,
  ecprtForeignScript = (int) 201326600,
  ecprtPartNumber = (int) 201326601,
  ecprtNounPhrase = (int) 201326602,
  ecprtPrepositionalPhrase = (int) 201326603,
  ecprtVerbPhrase = (int) 201326604,
  ecprtHead = (int) 201326605,
  ecprtModifier = (int) 201326606,
  ecprtOperator = (int) 201326607,
  ecprtTerm = (int) 201326608,
  ecprtExplanation = (int) 201326609,
  ecprtChangeAlways = (int) 201326610,
  ecprtTypologicalTranspose = (int) 201326611,
  ecprtTypologicalInsertion = (int) 201326612,
  ecprtTypologicalRemoval = (int) 201326613,
  ecprtTypologicalReplacement = (int) 201326614,
  ecprtHomophone = (int) 201326615,
  ecprtIncorrectApostrophe = (int) 201326616,
  ecprtIncorrectSpace = (int) 201326617,
  ecprtForms = (int) 201326618,
  ecprtIncorrectCase = (int) 201326619,
  ecprtIncorrectDiacritic = (int) 201326620
};
enum SecondaryRangeType
{
  ecsrtNone = (int) 201326592,
  ecsrtAcronym = (int) 201326593,
  ecsrtCardinal = (int) 201326594,
  ecsrtOrdinal = (int) 201326595,
  ecsrtFractional = (int) 201326596,
  ecsrtCurrency = (int) 201326597,
  ecsrtPercentage = (int) 201326598,
  ecsrtAcceleration = (int) 201326599,
  ecsrtAcidity = (int) 201326600,
  ecsrtAngle = (int) 201326601,
  ecsrtArea = (int) 201326602,
  ecsrtCapacitance = (int) 201326603,
  ecsrtCharge = (int) 201326604,
  ecsrtConcentration = (int) 201326605,
  ecsrtConductance = (int) 201326606,
  ecsrtConsumption = (int) 201326607,
  ecsrtCurrent = (int) 201326608,
  ecsrtDensity = (int) 201326609,
  ecsrtDistance = (int) 201326610,
  ecsrtDuration = (int) 201326611,
  ecsrtEnergy = (int) 201326612,
  ecsrtFlow = (int) 201326613,
  ecsrtFluxDensity = (int) 201326614,
  ecsrtFlux = (int) 201326615,
  ecsrtFocalLength = (int) 201326616,
  ecsrtForce = (int) 201326617,
  ecsrtFrequency = (int) 201326618,
  ecsrtIllumination = (int) 201326619,
  ecsrtInductance = (int) 201326620,
  ecsrtInformationFlow = (int) 201326621,
  ecsrtInformation = (int) 201326622,
  ecsrtLiquidVolume = (int) 201326623,
  ecsrtMass = (int) 201326624,
  ecsrtPotential = (int) 201326625,
  ecsrtPower = (int) 201326626,
  ecsrtPressure = (int) 201326627,
  ecsrtRadiation = (int) 201326628,
  ecsrtResistance = (int) 201326629,
  ecsrtSound = (int) 201326630,
  ecsrtTemperature = (int) 201326631,
  ecsrtVelocity = (int) 201326632,
  ecsrtViscosity = (int) 201326633,
  ecsrtVolume = (int) 201326634,
  ecsrtZone = (int) 201326635,
  ecsrtDay = (int) 201326752,
  ecsrtMonth = (int) 201326753,
  ecsrtYear = (int) 201326754,
  ecsrtCentury = (int) 201326755,
  ecsrtEra = (int) 201326756,
  ecsrtUrl = (int) 201326757,
  ecsrtEmail = (int) 201326758,
  ecsrtFilePath = (int) 201326759,
  ecsrtFileName = (int) 201326760,
  ecsrtCity = (int) 201326761,
  ecsrtState = (int) 201326762,
  ecsrtRegion = (int) 201326763,
  ecsrtAddress = (int) 201326764,
  ecsrtPronoun = (int) 201327104,
  ecsrtProper = (int) 201327105,
  ecsrtDefinite = (int) 201327106,
  ecsrtIndefinite = (int) 201327107,
  ecsrtDuplicatedCharacter = (int) 201327108,
  ecsrtKeyboardDistance1 = (int) 201327109,
  ecsrtKeyboardDistance2 = (int) 201327110,
  ecsrtAtTheBeginningOfTheWord = (int) 201327111,
  ecsrtAtTheEndOfTheWord = (int) 201327112
};
enum RangeRole
{
  ecrrSimpleSegment = (int) 201326592,
  ecrrAlternativeForm = (int) 201326593,
  ecrrIncorrect = (int) 201326594,
  ecrrAutoReplaceForm = (int) 201326595,
  ecrrCorrectForm = (int) 201326596,
  ecrrPreferredForm = (int) 201326597,
  ecrrNormalizedForm = (int) 201326598,
  ecrrCompoundSegment = (int) 201326599,
  ecrrPhraseSegment = (int) 201326600,
  ecrrNamedEntity = (int) 201326601,
  ecrrCompoundWord = (int) 201326602,
  ecrrPhrase = (int) 201326603,
  ecrrUnknownWord = (int) 201326604,
  ecrrContraction = (int) 201326605,
  ecrrHyphenatedWord = (int) 201326606,
  ecrrContractionSegment = (int) 201326607,
  ecrrHyphenatedSegment = (int) 201326608,
  ecrrCapitalization = (int) 201326609,
  ecrrAccent = (int) 201326610,
  ecrrRepeated = (int) 201326611,
  ecrrDefinition = (int) 201326612,
  ecrrDerivSegment = (int) 201326613,
  ecrrOutOfContext = (int) 201326614
};
enum ModuleType
{
  ecmtWordBreaker = (int) 201326592,
  ecmtStemmer = (int) 201326593,
  ecmtLanguageData = (int) 201326848,
  ecmtLanguageGrammars = (int) 201326849,
  ecmtLanguageModels = (int) 201326850,
  ecmtLanguageLexicons = (int) 201326851,
  ecmtEnginePlugin = (int) 201326852,
  ecmtSpeller = (int) 201327104,
  ecmtGrammarChecker = (int) 201327105,
  ecmtHyphenator = (int) 201327106,
  ecmtThesaurus = (int) 201327107,
  ecmtBilingualThesaurus = (int) 201327108
};

/* Structure/union declarations.  */
struct STextRange
{
  long Start;
  long Length;
};
struct SRangeData
{
  enum RangeRole Role;
  enum PrimaryRangeType PrimaryType;
  enum SecondaryRangeType SecondaryType;
  LPWSTR OriginalForm;
  LPWSTR AlternateForm;
  long AlternateFormLength;
  VARIANT Representation;
};
struct _LARGE_INTEGER
{
  LONGLONG QuadPart;
};
struct _ULARGE_INTEGER
{
  ULONGLONG QuadPart;
};
struct tagSTATSTG
{
  LPWSTR pwcsName;
  UINT type;
  struct _ULARGE_INTEGER cbSize;
  struct _FILETIME mtime;
  struct _FILETIME ctime;
  struct _FILETIME atime;
  UINT grfMode;
  UINT grfLocksSupported;
  struct GUID clsid;
  UINT grfStateBits;
  UINT reserved;
};
struct _FILETIME
{
  UINT dwLowDateTime;
  UINT dwHighDateTime;
};

[
  uuid(3FCAA0FC-33FB-434B-AC35-B5B5E523FBCE)
]
library naturallanguage6
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(8AC22B8C-48E3-4B5C-A22C-3F9B5C2BC8C4),
     cancreate
   ]
   coclass KeyValuePair
   {
     interface IKeyValuePair;
   };
   [
     uuid(333E6924-4353-4934-A7BE-5FB5BDDDB2D6),
     cancreate
   ]
   coclass TextContext
   {
     interface ITextContext;
   };
   [
     uuid(89EA5B5A-D01C-4560-A874-9FC92AFB0EFA),
     cancreate
   ]
   coclass TextChunk
   {
     interface ITextChunk;
   };
   [
     uuid(0E1EEFB2-E336-481C-B178-36261EC5A843),
     cancreate
   ]
   coclass ProofResourceLoader
   {
     interface ILoadResources;
   };
   [
     uuid(913A5A8B-49BE-43A1-B4F5-6E8D96EBD3C6),
     cancreate
   ]
   coclass LexiconEntry
   {
     interface ILexiconEntry;
   };
   [
     uuid(D385FDAD-D394-4812-9CEC-C6575C0B2B38),
     cancreate
   ]
   coclass Lexicon
   {
     interface ILexicon;
   };

};

/* Interface declarations.  */
[
  uuid(810B23BD-1199-46D1-8D67-B8C3B89EC008)
]
interface IKeyValuePair : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall Key (
    [out retval] BSTR *pval
  );
  [id(1610678272), propput]
  HRESULT __stdcall Key (
    [in] BSTR argNo1
  );
  [id(1610678274), propget]
  HRESULT __stdcall Value (
    [out retval] VARIANT *pval
  );
  [id(1610678274), propput]
  HRESULT __stdcall Value (
    [in] VARIANT argNo1
  );
};
[
  uuid(B6797CC0-11AE-4047-A438-26C0C916EB8D),
  helpstring("The context object represents client supplied information that affects the analysis.")
]
interface ITextContext : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall PropertyCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678273), propput]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678275), propget]
  HRESULT __stdcall DefaultDialectCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall DefaultDialect (
    [in] long index,
    [out retval] UINT *pval
  );
  HRESULT __stdcall AddDefaultDialect (
    [in] UINT dicalect
  );
  HRESULT __stdcall RemoveDefaultDialect (
    [in] UINT dicalect
  );
  [propget]
  HRESULT __stdcall LexiconCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Lexicon (
    [in] long index,
    [out retval] interface ILexicon **pval
  );
  HRESULT __stdcall AddLexicon (
    [in] interface ILexicon *pLexicon
  );
  HRESULT __stdcall RemoveLexicon (
    [in] interface ILexicon *pLexicon
  );
  [propget]
  HRESULT __stdcall Version (
    [out retval] BSTR *pval
  );
  [propget]
  HRESULT __stdcall ResourceLoader (
    [out retval] interface ILoadResources **pval
  );
  [id(1610678284), propput]
  HRESULT __stdcall ResourceLoader (
    [in] interface ILoadResources *argNo1
  );
  [id(1610678286), propget]
  HRESULT __stdcall Options (
    [out retval] interface IProcessingOptions **pval
  );
  [propget]
  HRESULT __stdcall Capabilities (
    [in] UINT Locale,
    [out retval] interface IProcessingOptions **pval
  );
  [propget]
  HRESULT __stdcall Lexicons (
    [out retval] interface IEnumVARIANT **pval
  );
  [id(1610678288), propput]
  HRESULT __stdcall Lexicons (
    [in] interface IEnumVARIANT *argNo1
  );
  [id(1610678290), propget]
  HRESULT __stdcall MaxSentences (
    [out retval] long *pval
  );
  [id(1610678290), propput]
  HRESULT __stdcall MaxSentences (
    [in] long argNo1
  );
  [id(1610678292), propget]
  HRESULT __stdcall IsSingleLanguage (
    [out retval] WINBOOL *pval
  );
  [id(1610678292), propput]
  HRESULT __stdcall IsSingleLanguage (
    [in] WINBOOL argNo1
  );
  [id(1610678294), propget]
  HRESULT __stdcall IsSimpleWordBreaking (
    [out retval] WINBOOL *pval
  );
  [id(1610678294), propput]
  HRESULT __stdcall IsSimpleWordBreaking (
    [in] WINBOOL argNo1
  );
  [id(1610678296), propget]
  HRESULT __stdcall UseRelativeTimes (
    [out retval] WINBOOL *pval
  );
  [id(1610678296), propput]
  HRESULT __stdcall UseRelativeTimes (
    [in] WINBOOL argNo1
  );
  [id(1610678298), propget]
  HRESULT __stdcall IgnorePunctuation (
    [out retval] WINBOOL *pval
  );
  [id(1610678298), propput]
  HRESULT __stdcall IgnorePunctuation (
    [in] WINBOOL argNo1
  );
  [id(1610678300), propget]
  HRESULT __stdcall IsCaching (
    [out retval] WINBOOL *pval
  );
  [id(1610678300), propput]
  HRESULT __stdcall IsCaching (
    [in] WINBOOL argNo1
  );
  [id(1610678302), propget]
  HRESULT __stdcall IsShowingGaps (
    [out retval] WINBOOL *pval
  );
  [id(1610678302), propput]
  HRESULT __stdcall IsShowingGaps (
    [in] WINBOOL argNo1
  );
  [id(1610678304), propget]
  HRESULT __stdcall IsShowingCharacterNormalizations (
    [out retval] WINBOOL *pval
  );
  [id(1610678304), propput]
  HRESULT __stdcall IsShowingCharacterNormalizations (
    [in] WINBOOL argNo1
  );
  [id(1610678306), propget]
  HRESULT __stdcall IsShowingWordNormalizations (
    [out retval] WINBOOL *pval
  );
  [id(1610678306), propput]
  HRESULT __stdcall IsShowingWordNormalizations (
    [in] WINBOOL argNo1
  );
  [id(1610678308), propget]
  HRESULT __stdcall IsComputingCompounds (
    [out retval] WINBOOL *pval
  );
  [id(1610678308), propput]
  HRESULT __stdcall IsComputingCompounds (
    [in] WINBOOL argNo1
  );
  [id(1610678310), propget]
  HRESULT __stdcall IsComputingInflections (
    [out retval] WINBOOL *pval
  );
  [id(1610678310), propput]
  HRESULT __stdcall IsComputingInflections (
    [in] WINBOOL argNo1
  );
  [id(1610678312), propget]
  HRESULT __stdcall IsComputingLemmas (
    [out retval] WINBOOL *pval
  );
  [id(1610678312), propput]
  HRESULT __stdcall IsComputingLemmas (
    [in] WINBOOL argNo1
  );
  [id(1610678314), propget]
  HRESULT __stdcall IsComputingExpansions (
    [out retval] WINBOOL *pval
  );
  [id(1610678314), propput]
  HRESULT __stdcall IsComputingExpansions (
    [in] WINBOOL argNo1
  );
  [id(1610678316), propget]
  HRESULT __stdcall IsComputingBases (
    [out retval] WINBOOL *pval
  );
  [id(1610678316), propput]
  HRESULT __stdcall IsComputingBases (
    [in] WINBOOL argNo1
  );
  [id(1610678318), propget]
  HRESULT __stdcall IsComputingPartOfSpeechTags (
    [out retval] WINBOOL *pval
  );
  [id(1610678318), propput]
  HRESULT __stdcall IsComputingPartOfSpeechTags (
    [in] WINBOOL argNo1
  );
  [id(1610678320), propget]
  HRESULT __stdcall IsFindingDefinitions (
    [out retval] WINBOOL *pval
  );
  [id(1610678320), propput]
  HRESULT __stdcall IsFindingDefinitions (
    [in] WINBOOL argNo1
  );
  [id(1610678322), propget]
  HRESULT __stdcall IsFindingDateTimeMeasures (
    [out retval] WINBOOL *pval
  );
  [id(1610678322), propput]
  HRESULT __stdcall IsFindingDateTimeMeasures (
    [in] WINBOOL argNo1
  );
  [id(1610678324), propget]
  HRESULT __stdcall IsFindingPersons (
    [out retval] WINBOOL *pval
  );
  [id(1610678324), propput]
  HRESULT __stdcall IsFindingPersons (
    [in] WINBOOL argNo1
  );
  [id(1610678326), propget]
  HRESULT __stdcall IsFindingLocations (
    [out retval] WINBOOL *pval
  );
  [id(1610678326), propput]
  HRESULT __stdcall IsFindingLocations (
    [in] WINBOOL argNo1
  );
  [id(1610678328), propget]
  HRESULT __stdcall IsFindingOrganizations (
    [out retval] WINBOOL *pval
  );
  [id(1610678328), propput]
  HRESULT __stdcall IsFindingOrganizations (
    [in] WINBOOL argNo1
  );
  [id(1610678330), propget]
  HRESULT __stdcall IsFindingPhrases (
    [out retval] WINBOOL *pval
  );
  [id(1610678330), propput]
  HRESULT __stdcall IsFindingPhrases (
    [in] WINBOOL argNo1
  );
};
[
  uuid(004CD7E2-8B63-4EF9-8D46-080CDBBE47AF)
]
interface ILexicon : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall ReadFrom (
    [in] BSTR filename
  );
  HRESULT __stdcall WriteTo (
    [in] BSTR filename
  );
  HRESULT __stdcall GetEnumerator (
    [out retval] interface ILexiconEntryEnumerator **enumerator
  );
  HRESULT __stdcall IndexOf (
    [in] BSTR word,
    [out retval] long *index
  );
  HRESULT __stdcall TagFor (
    [in] BSTR word,
    [in] long tagIndex,
    [out retval] long *index
  );
  HRESULT __stdcall ContainsPrefix (
    [in] BSTR prefix,
    [out retval] WINBOOL *ContainsPrefix
  );
  HRESULT __stdcall Add (
    [in] BSTR entry
  );
  HRESULT __stdcall Remove (
    [in] BSTR entry
  );
  [propget]
  HRESULT __stdcall Version (
    [out retval] BSTR *pval
  );
  [propget]
  HRESULT __stdcall Count (
    [out retval] long *pval
  );
  [propget, restricted]
  HRESULT __stdcall _NewEnum (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Item (
    [in] long Key,
    [out retval] interface ILexiconEntry **pval
  );
  [id(1610678283), propput]
  HRESULT __stdcall Item (
    [in] long Key,
    [in] interface ILexiconEntry *argNo2
  );
  [id(1610678285), propget]
  HRESULT __stdcall ItemByName (
    [in] BSTR Key,
    [out retval] interface ILexiconEntry **pval
  );
  [id(1610678285), propput]
  HRESULT __stdcall ItemByName (
    [in] BSTR Key,
    [in] interface ILexiconEntry *argNo2
  );
  [id(1610678287), propget]
  HRESULT __stdcall PropertyCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678288), propput]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678290), propget]
  HRESULT __stdcall IsSealed (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsReadOnly (
    [out retval] WINBOOL *pval
  );
};
[
  uuid(7FBD23F5-9972-48C8-9250-68D05FABCCDB)
]
interface ILexiconEntryEnumerator : IEnumVARIANT
{
  [id(1610743808)]
  HRESULT __stdcall MoveTo (
    [in] BSTR toWord,
    [out retval] WINBOOL *pfSucceeded
  );
  HRESULT __stdcall MoveNext (
    [out retval] WINBOOL *pfSucceeded
  );
  HRESULT __stdcall MoveToPrefix (
    [in] BSTR toWord,
    [out retval] WINBOOL *pfSucceeded
  );
  [propget]
  HRESULT __stdcall Tag (
    [in] long tagNumber,
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall index (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Key (
    [out retval] BSTR *pval
  );
  [propget]
  HRESULT __stdcall Value (
    [out retval] interface ILexiconEntry **pval
  );
};
[
  uuid(30BD2094-1FF1-40C7-974A-99BF5CBD8DB0)
]
interface ILexiconEntry : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall ToString (
    [out retval] BSTR *Value
  );
  [propget]
  HRESULT __stdcall Tag (
    [in] long tagNumber,
    [out retval] long *pval
  );
  [id(1610678273), propput]
  HRESULT __stdcall Tag (
    [in] long tagNumber,
    [in] long argNo2
  );
  [id(1610678275), propget]
  HRESULT __stdcall PropertyCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678276), propput]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678278), propget]
  HRESULT __stdcall IsReadOnly (
    [out retval] WINBOOL *pval
  );
};
[
  uuid(50C9C43C-9874-4766-959B-47E96BC18012),
  helpstring("Callback for Loading Natural Language Elements")
]
interface ILoadResources : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall Parent (
    [out retval] interface ILoadResources **pval
  );
  [id(1610678272), propput]
  HRESULT __stdcall Parent (
    [in] interface ILoadResources *argNo1
  );
  [id(1610678274), propget]
  HRESULT __stdcall Option (
    [in] LPWSTR optionName,
    [out retval] VARIANT *pval
  );
  [id(1610678274), propput]
  HRESULT __stdcall Option (
    [in] LPWSTR optionName,
    [in] VARIANT argNo2
  );
  [id(1610678276)]
  HRESULT __stdcall GetStreamFor (
    [in] USHORT langid,
    [in] LPWSTR streamName,
    [out retval] interface IStream **pval
  );
  HRESULT __stdcall CanLoadModule (
    [in] USHORT langid,
    [in] enum ModuleType ModuleType,
    [out retval] WINBOOL *pval
  );
  HRESULT __stdcall CanLoadModuleByName (
    [in] USHORT langid,
    [in] LPWSTR moduleName,
    [out retval] WINBOOL *pval
  );
  HRESULT __stdcall LoadModule (
    [in] USHORT langid,
    [in] enum ModuleType ModuleType,
    [out] struct GUID *pClsId,
    [out retval] void *pval
  );
  HRESULT __stdcall Create (
    [in] USHORT langid,
    [in] enum ModuleType ModuleType,
    [out retval] void *pObj
  );
  HRESULT __stdcall LoadModuleByName (
    [in] USHORT langid,
    [in] LPWSTR moduleName,
    [out retval] void *pval
  );
  HRESULT __stdcall UnloadModule (
    [in] void *moduleHandle
  );
};
[
  uuid(0000000C-0000-0000-C000-000000000046)
]
interface IStream : ISequentialStream
{
  [id(1610743808)]
  HRESULT __stdcall RemoteSeek (
    [in] struct _LARGE_INTEGER dlibMove,
    [in] UINT dwOrigin,
    [out] struct _ULARGE_INTEGER *plibNewPosition
  );
  HRESULT __stdcall SetSize (
    [in] struct _ULARGE_INTEGER libNewSize
  );
  HRESULT __stdcall RemoteCopyTo (
    [in] interface IStream *pstm,
    [in] struct _ULARGE_INTEGER cb,
    [out] struct _ULARGE_INTEGER *pcbRead,
    [out] struct _ULARGE_INTEGER *pcbWritten
  );
  HRESULT __stdcall Commit (
    [in] UINT grfCommitFlags
  );
  HRESULT __stdcall Revert (void);
  HRESULT __stdcall LockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall UnlockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall Stat (
    [out] struct tagSTATSTG *pstatstg,
    [in] UINT grfStatFlag
  );
  HRESULT __stdcall Clone (
    [out] interface IStream **ppstm
  );
};
[
  uuid(0C733A30-2A1C-11CE-ADE5-00AA0044773D)
]
interface ISequentialStream : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteRead (
    [out] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbRead
  );
  HRESULT __stdcall RemoteWrite (
    [in] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbWritten
  );
};
[
  uuid(C090356B-A6A5-442A-A204-CFD5415B5902),
  helpstring("Interface to list/get/set options for processing data.")
]
interface IProcessingOptions : IUnknown
{
  [id(1610678272), propget, restricted]
  HRESULT __stdcall _NewEnum (
    [out retval] interface IEnumVARIANT **pval
  );
  HRESULT __stdcall GetEnumerator (
    [out retval] interface IEnumVARIANT **ppSent
  );
  [propget]
  HRESULT __stdcall Locale (
    [out retval] UINT *pval
  );
  [propget]
  HRESULT __stdcall Count (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Name (
    [in] long index,
    [out retval] BSTR *pval
  );
  [propget]
  HRESULT __stdcall Item (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678277), propput]
  HRESULT __stdcall Item (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678279), propget]
  HRESULT __stdcall IsReadOnly (
    [out retval] WINBOOL *pval
  );
};
[
  uuid(549F997E-0EC3-43D4-B443-2BF8021010CF)
]
interface ITextChunk : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall InputText (
    [out retval] BSTR *pval
  );
  [id(1610678272), propput]
  HRESULT __stdcall InputText (
    [in] BSTR argNo1
  );
  [id(1610678274), restricted]
  HRESULT __stdcall SetInputArray (
    [in] LPWSTR str,
    [in] long size
  );
  HRESULT __stdcall RegisterEngine (
    [in] struct GUID *guid,
    [in] BSTR dllName
  );
  HRESULT __stdcall UnregisterEngine (
    [in] struct GUID *guid
  );
  [propget, restricted]
  HRESULT __stdcall InputArray (
    [out retval] LPWSTR pval
  );
  [propget, restricted]
  HRESULT __stdcall InputArrayRange (
    [out retval] struct STextRange *pval
  );
  [id(1610678278), propput, restricted]
  HRESULT __stdcall InputArrayRange (
    [in] struct STextRange argNo1
  );
  [id(1610678280), propget]
  HRESULT __stdcall Count (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Item (
    [in] long index,
    [out retval] interface ISentence **pval
  );
  [propget, restricted]
  HRESULT __stdcall _NewEnum (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Sentences (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall PropertyCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678285), propput]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678287), propget]
  HRESULT __stdcall Context (
    [out retval] interface ITextContext **pval
  );
  [id(1610678287), propput]
  HRESULT __stdcall Context (
    [in] interface ITextContext *argNo1
  );
  [id(1610678289), propget]
  HRESULT __stdcall Locale (
    [out retval] UINT *pval
  );
  [id(1610678289), propput]
  HRESULT __stdcall Locale (
    [in] UINT argNo1
  );
  [id(1610678291), propget]
  HRESULT __stdcall IsLocaleReliable (
    [out retval] WINBOOL *pval
  );
  [id(1610678291), propput]
  HRESULT __stdcall IsLocaleReliable (
    [in] WINBOOL argNo1
  );
  [id(1610678293), propget]
  HRESULT __stdcall IsEndOfDocument (
    [out retval] WINBOOL *pval
  );
  [id(1610678293), propput]
  HRESULT __stdcall IsEndOfDocument (
    [in] WINBOOL argNo1
  );
  [id(1610678295)]
  HRESULT __stdcall GetEnumerator (
    [out retval] interface IEnumVARIANT **ppSent
  );
  HRESULT __stdcall ToString (
    [out retval] BSTR *pstr
  );
  HRESULT __stdcall ProcessStream (
    [in] interface IRangedTextSource *input,
    [in out] interface IRangedTextSink *output
  );
  [propget]
  HRESULT __stdcall ReuseObjects (
    [out retval] WINBOOL *pval
  );
  [id(1610678298), propput]
  HRESULT __stdcall ReuseObjects (
    [in] WINBOOL argNo1
  );
};
[
  uuid(F0C13A7A-199B-44BE-8492-F91EAA50F943)
]
interface ISentence : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall PropertyCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678273), propput]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678275), propget]
  HRESULT __stdcall Count (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Parent (
    [out retval] interface ITextChunk **pval
  );
  [propget]
  HRESULT __stdcall Item (
    [in] long index,
    [out retval] interface ITextSegment **pval
  );
  [propget, restricted]
  HRESULT __stdcall _NewEnum (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Segments (
    [out retval] interface IEnumVARIANT **pval
  );
  HRESULT __stdcall GetEnumerator (
    [out retval] interface IEnumVARIANT **string
  );
  [propget]
  HRESULT __stdcall IsEndOfParagraph (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsUnfinished (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsUnfinishedAtEnd (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall Locale (
    [out retval] UINT *pval
  );
  [propget]
  HRESULT __stdcall IsLocaleReliable (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall Range (
    [out retval] struct STextRange *pval
  );
  [propget]
  HRESULT __stdcall RequiresNormalization (
    [out retval] WINBOOL *pval
  );
  HRESULT __stdcall ToString (
    [out retval] BSTR *string
  );
  [restricted]
  HRESULT __stdcall CopyToString (
    [out] LPWSTR pstr,
    [in out] long *pcch,
    [in] WINBOOL fAlwaysCopy
  );
};
[
  uuid(AF4656B8-5E5E-4FB2-A2D8-1E977E549A56)
]
interface ITextSegment : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall IsSurfaceString (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall Range (
    [out retval] struct STextRange *pval
  );
  [propget]
  HRESULT __stdcall Identifier (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Unit (
    [out retval] enum MeasureUnit *pval
  );
  [propget]
  HRESULT __stdcall Count (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Item (
    [in] long index,
    [out retval] interface ITextSegment **pval
  );
  [propget]
  HRESULT __stdcall Expansions (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Bases (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall SuggestionScores (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall PropertyCount (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [out retval] VARIANT *pval
  );
  [id(1610678282), propput]
  HRESULT __stdcall Property (
    [in] VARIANT index,
    [in] VARIANT argNo2
  );
  [id(1610678284), restricted]
  HRESULT __stdcall CopyToString (
    [out] LPWSTR pstr,
    [in out] long *pcch,
    [in] WINBOOL fAlwaysCopy
  );
  [propget]
  HRESULT __stdcall Role (
    [out retval] enum RangeRole *pval
  );
  [propget]
  HRESULT __stdcall PrimaryType (
    [out retval] enum PrimaryRangeType *pval
  );
  [propget]
  HRESULT __stdcall SecondaryType (
    [out retval] enum SecondaryRangeType *pval
  );
  [propget]
  HRESULT __stdcall SpellingVariations (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall CharacterNormalizations (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Representations (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Inflections (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Suggestions (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Lemmas (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall SubSegments (
    [out retval] interface IEnumVARIANT **pval
  );
  [propget]
  HRESULT __stdcall Alternatives (
    [out retval] interface IEnumVARIANT **pval
  );
  HRESULT __stdcall ToString (
    [out retval] BSTR *string
  );
  [propget]
  HRESULT __stdcall IsPossiblePhraseStart (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall SpellingScore (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall IsPunctuation (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsEndPunctuation (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsSpace (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsAbbreviation (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsSmiley (
    [out retval] WINBOOL *pval
  );
};
[
  uuid(685D9B71-16DA-49BA-BF67-A734B533217E),
  helpstring("For TextChunk's process method, this interface represents a source of text.  The text can come from a flat file, buffered network packets, or     any     other stream-like data source.")
]
interface IRangedTextSource : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall Buffer (
    [out retval] LPWSTR pval
  );
  [propget]
  HRESULT __stdcall Range (
    [out retval] struct STextRange *pval
  );
  [propget]
  HRESULT __stdcall Length (
    [out retval] long *pval
  );
  [propget]
  HRESULT __stdcall IsEndOfText (
    [out retval] WINBOOL *pval
  );
  [propget]
  HRESULT __stdcall IsRandomAccess (
    [out retval] WINBOOL *pval
  );
  HRESULT __stdcall SetRange (
    [in] struct STextRange rangeInSource,
    [out retval] WINBOOL *pfSuccess
  );
};
[
  uuid(C349B170-B5AD-47BF-9A9C-85649E1674FD),
  helpstring("The IRangedTextSink is used to commit results of NLDP services in a low-overhead manner to a client application.")
]
interface IRangedTextSink : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall CommitRange (
    [in] struct STextRange rangeInSource,
    [in] struct SRangeData rangeData
  );
  HRESULT __stdcall CommitSubRange (
    [in] struct STextRange subRangeInSource,
    [in] struct SRangeData rangeData
  );
  HRESULT __stdcall CommitSentenceRange (
    [in] struct STextRange rangeInSource
  );
  HRESULT __stdcall CommitParagraphRange (
    [in] struct STextRange rangeInSource
  );
};

