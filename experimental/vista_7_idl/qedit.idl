/* Automated generated idl file <dexterlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IResize;
interface IAMTimeline;
interface IAMTimelineObj;
interface IPropertySetter;
interface IAMTimelineGroup;
interface IAMTimelineSrc;
interface IMediaLocator;
interface IPersistStream;
interface IPersist;
interface IStream;
interface ISequentialStream;
interface IAMSetErrorLog;
interface IAMErrorLog;
interface IAMTimelineEffectable;
interface IAMTimelineSplittable;
interface IAMTimelineTrack;
interface IAMTimelineTransable;
interface IAMTimelineVirtualTrack;
interface IAMTimelineComp;
interface IAMTimelineTrans;
interface IAMTimelineEffect;
interface IPropertyBag;
interface IErrorLog;
interface IRenderEngine;
interface IGraphBuilder;
interface IFilterGraph;
interface IBaseFilter;
interface IMediaFilter;
interface IReferenceClock;
interface IEnumPins;
interface IPin;
interface IEnumMediaTypes;
interface IEnumFilters;
interface IGrfCache;
interface IRenderEngine2;
interface ISmartRenderEngine;
interface IFindCompressorCB;
interface IXml2Dex;
interface IMediaDet;
interface ISampleGrabber;
interface IMediaSample;
interface ISampleGrabberCB;

/* Structure forward declarations.  */
struct _AMMediaType;
struct __MIDL___MIDL_itf_qedit_0000_0000_0002;
struct __MIDL___MIDL_itf_qedit_0000_0000_0003;
struct _LARGE_INTEGER;
struct _ULARGE_INTEGER;
struct tagSTATSTG;
struct _FILETIME;
struct _PinInfo;
struct _FilterInfo;

/* Union record forward declarations.  */
dispinterface IDxtCompositor;
dispinterface IDXEffect;
dispinterface IDxtAlphaSetter;
dispinterface IDxtJpeg;
dispinterface IDxtKey;

/* Union record forward declarations.  */
coclass AMTimeline;
coclass AMTimelineObj;
coclass AMTimelineSrc;
coclass AMTimelineTrack;
coclass AMTimelineComp;
coclass AMTimelineGroup;
coclass AMTimelineTrans;
coclass AMTimelineEffect;
coclass RenderEngine;
coclass SmartRenderEngine;
coclass AudMixer;
coclass Xml2Dex;
coclass MediaLocator;
coclass PropertySetter;
coclass MediaDet;
coclass SampleGrabber;
coclass NullRenderer;
coclass DxtCompositor;
coclass DxtAlphaSetter;
coclass DxtJpeg;
coclass ColorSource;
coclass DxtKey;

/* Enumeration declarations.  */
enum __MIDL___MIDL_itf_qedit_0000_0000_0007
{
  TIMELINE_MAJOR_TYPE_COMPOSITE = (int) 201326593,
  TIMELINE_MAJOR_TYPE_TRACK = (int) 201326594,
  TIMELINE_MAJOR_TYPE_SOURCE = (int) 201326596,
  TIMELINE_MAJOR_TYPE_TRANSITION = (int) 201326600,
  TIMELINE_MAJOR_TYPE_EFFECT = (int) 201326608,
  TIMELINE_MAJOR_TYPE_GROUP = (int) 201326720
};
enum _FilterState
{
  State_Stopped = (int) 201326592,
  State_Paused = (int) 201326593,
  State_Running = (int) 201326594
};
enum _PinDirection
{
  PINDIR_INPUT = (int) 201326592,
  PINDIR_OUTPUT = (int) 201326593
};

/* Structure/union declarations.  */
struct _AMMediaType
{
  struct GUID majortype;
  struct GUID subtype;
  long bFixedSizeSamples;
  long bTemporalCompression;
  UINT lSampleSize;
  struct GUID formattype;
  IUnknown * pUnk;
  UINT cbFormat;
  UCHAR *pbFormat;
};
struct __MIDL___MIDL_itf_qedit_0000_0000_0002
{
  BSTR Name;
  long dispID;
  long nValues;
};
struct __MIDL___MIDL_itf_qedit_0000_0000_0003
{
  VARIANT v;
  LONGLONG rt;
  UINT dwInterp;
};
struct _LARGE_INTEGER
{
  LONGLONG QuadPart;
};
struct _ULARGE_INTEGER
{
  ULONGLONG QuadPart;
};
struct tagSTATSTG
{
  LPWSTR pwcsName;
  UINT Type;
  struct _ULARGE_INTEGER cbSize;
  struct _FILETIME mtime;
  struct _FILETIME ctime;
  struct _FILETIME atime;
  UINT grfMode;
  UINT grfLocksSupported;
  struct GUID clsid;
  UINT grfStateBits;
  UINT reserved;
};
struct _FILETIME
{
  UINT dwLowDateTime;
  UINT dwHighDateTime;
};
struct _PinInfo
{
  interface IBaseFilter *pFilter;
  enum _PinDirection dir;
  USHORT achName[128];
};
struct _FilterInfo
{
  USHORT achName[128];
  interface IFilterGraph *pGraph;
};

/* Type definitions.  */
typedef struct __MIDL___MIDL_itf_qedit_0000_0000_0002 DEXTER_PARAM;
typedef struct __MIDL___MIDL_itf_qedit_0000_0000_0003 DEXTER_VALUE;
typedef enum __MIDL___MIDL_itf_qedit_0000_0000_0007 TIMELINE_MAJOR_TYPE;
typedef LONGLONG LONG_PTR;
typedef ULONGLONG ULONG_PTR;

[
  uuid(78530B68-61F9-11D2-8CAD-00A024580902),
  version(1.0),
  helpstring("Dexter 1.0 Type Library")
]
library dexterlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(78530B75-61F9-11D2-8CAD-00A024580902),
     helpstring("AMTimeline Class"),
     cancreate
   ]
   coclass AMTimeline
   {
     interface IAMTimeline;
     interface IPersistStream;
     interface IAMSetErrorLog;
   };
   [
     uuid(78530B78-61F9-11D2-8CAD-00A024580902),
     helpstring("IAMTimelineObj Class"),
     cancreate
   ]
   coclass AMTimelineObj
   {
     interface IAMTimelineObj;
   };
   [
     uuid(78530B7A-61F9-11D2-8CAD-00A024580902),
     helpstring("IAMTimelineSrc Class"),
     cancreate
   ]
   coclass AMTimelineSrc
   {
     interface IAMTimelineSrc;
     interface IAMTimelineObj;
     interface IAMTimelineEffectable;
     interface IAMTimelineSplittable;
   };
   [
     uuid(8F6C3C50-897B-11D2-8CFB-00A0C9441E20),
     cancreate
   ]
   coclass AMTimelineTrack
   {
     interface IAMTimelineTrack;
     interface IAMTimelineObj;
     interface IAMTimelineEffectable;
     interface IAMTimelineTransable;
     interface IAMTimelineVirtualTrack;
     interface IAMTimelineSplittable;
   };
   [
     uuid(74D2EC80-6233-11D2-8CAD-00A024580902),
     cancreate
   ]
   coclass AMTimelineComp
   {
     interface IAMTimelineComp;
     interface IAMTimelineObj;
     interface IAMTimelineEffectable;
     interface IAMTimelineTransable;
     interface IAMTimelineVirtualTrack;
   };
   [
     uuid(F6D371E1-B8A6-11D2-8023-00C0DF10D434),
     cancreate
   ]
   coclass AMTimelineGroup
   {
     interface IAMTimelineGroup;
     interface IAMTimelineComp;
     interface IAMTimelineObj;
   };
   [
     uuid(74D2EC81-6233-11D2-8CAD-00A024580902),
     cancreate
   ]
   coclass AMTimelineTrans
   {
     interface IAMTimelineTrans;
     interface IAMTimelineObj;
     interface IAMTimelineSplittable;
   };
   [
     uuid(74D2EC82-6233-11D2-8CAD-00A024580902),
     cancreate
   ]
   coclass AMTimelineEffect
   {
     interface IAMTimelineEffect;
     interface IAMTimelineObj;
     interface IAMTimelineSplittable;
     interface IPropertyBag;
   };
   [
     uuid(64D8A8E0-80A2-11D2-8CF3-00A0C9441E20),
     cancreate
   ]
   coclass RenderEngine
   {
     interface IRenderEngine;
     interface IRenderEngine2;
     interface IAMSetErrorLog;
   };
   [
     uuid(498B0949-BBE9-4072-98BE-6CCAEB79DC6F),
     cancreate
   ]
   coclass SmartRenderEngine
   {
     interface IRenderEngine;
     interface ISmartRenderEngine;
     interface IAMSetErrorLog;
   };
   [
     uuid(036A9790-C153-11D2-9EF7-006008039E37),
     cancreate
   ]
   coclass AudMixer
   {
     interface IBaseFilter;
   };
   [
     uuid(18C628EE-962A-11D2-8D08-00A0C9441E20),
     helpstring("Xml2Dex Class"),
     cancreate
   ]
   coclass Xml2Dex
   {
     interface IXml2Dex;
   };
   [
     uuid(CC1101F2-79DC-11D2-8CE6-00A0C9441E20),
     helpstring("MediaLocator Class"),
     cancreate
   ]
   coclass MediaLocator
   {
     interface IMediaLocator;
   };
   [
     uuid(ADF95821-DED7-11D2-ACBE-0080C75E246E),
     helpstring("Varying Property Holder"),
     cancreate
   ]
   coclass PropertySetter
   {
     interface IPropertySetter;
     interface IAMSetErrorLog;
   };
   [
     uuid(65BD0711-24D2-4FF7-9324-ED2E5D3ABAFA),
     helpstring("MediaDet Class"),
     cancreate
   ]
   coclass MediaDet
   {
     interface IMediaDet;
   };
   [
     uuid(C1F400A0-3F08-11D3-9F0B-006008039E37),
     helpstring("MsGrab Class"),
     cancreate
   ]
   coclass SampleGrabber
   {
     interface ISampleGrabber;
   };
   [
     uuid(C1F400A4-3F08-11D3-9F0B-006008039E37),
     helpstring("NullRenderer Class"),
     cancreate
   ]
   coclass NullRenderer
   {
     interface IBaseFilter;
   };
   [
     uuid(BB44391D-6ABD-422F-9E2E-385C9DFF51FC),
     helpstring("DxtCompositor Class"),
     cancreate
   ]
   coclass DxtCompositor
   {
     dispinterface IDxtCompositor;
   };
   [
     uuid(506D89AE-909A-44F7-9444-ABD575896E35),
     helpstring("DxtAlphaSetter Class"),
     cancreate
   ]
   coclass DxtAlphaSetter
   {
     dispinterface IDxtAlphaSetter;
   };
   [
     uuid(DE75D012-7A65-11D2-8CEA-00A0C9441E20),
     helpstring("SMPTE wipe DXT"),
     cancreate
   ]
   coclass DxtJpeg
   {
     dispinterface IDxtJpeg;
   };
   [
     uuid(0CFDD070-581A-11D2-9EE6-006008039E37),
     cancreate
   ]
   coclass ColorSource
   {
     interface IBaseFilter;
   };
   [
     uuid(C5B19592-145E-11D3-9F04-006008039E37),
     helpstring("DxtKey Class"),
     cancreate
   ]
   coclass DxtKey
   {
     dispinterface IDxtKey;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(BB44391E-6ABD-422F-9E2E-385C9DFF51FC),
     helpstring("IDxtCompositor Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDxtCompositor : IDXEffect
   {
     [id(1), propget]
     HRESULT __stdcall OffsetX (
       [out retval] long *pVal
     );
     [id(1), propput]
     HRESULT __stdcall OffsetX (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall OffsetY (
       [out retval] long *pVal
     );
     [id(2), propput]
     HRESULT __stdcall OffsetY (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Width (
       [out retval] long *pVal
     );
     [id(3), propput]
     HRESULT __stdcall Width (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Height (
       [out retval] long *pVal
     );
     [id(4), propput]
     HRESULT __stdcall Height (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall SrcOffsetX (
       [out retval] long *pVal
     );
     [id(5), propput]
     HRESULT __stdcall SrcOffsetX (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall SrcOffsetY (
       [out retval] long *pVal
     );
     [id(6), propput]
     HRESULT __stdcall SrcOffsetY (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall SrcWidth (
       [out retval] long *pVal
     );
     [id(7), propput]
     HRESULT __stdcall SrcWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall SrcHeight (
       [out retval] long *pVal
     );
     [id(8), propput]
     HRESULT __stdcall SrcHeight (
       [in] long argNo1
     );
   };
   [
     uuid(E31FB81B-1335-11D1-8189-0000F87557DB),
     helpstring("IDXEffect Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDXEffect : IDispatch
   {
     [id(10000), propget]
     HRESULT __stdcall Capabilities (
       [out retval] long *pVal
     );
     [propget]
     HRESULT __stdcall Progress (
       [out retval] float *pVal
     );
     [id(10001), propput]
     HRESULT __stdcall Progress (
       [in] float argNo1
     );
     [propget]
     HRESULT __stdcall StepResolution (
       [out retval] float *pVal
     );
     [propget]
     HRESULT __stdcall Duration (
       [out retval] float *pVal
     );
     [id(10003), propput]
     HRESULT __stdcall Duration (
       [in] float argNo1
     );
   };
   [
     uuid(4EE9EAD9-DA4D-43D0-9383-06B90C08B12B),
     helpstring("IDxtAlphaSetter Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDxtAlphaSetter : IDXEffect
   {
     [id(1), propget]
     HRESULT __stdcall Alpha (
       [out retval] long *pVal
     );
     [id(1), propput]
     HRESULT __stdcall Alpha (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall AlphaRamp (
       [out retval] double *pVal
     );
     [id(2), propput]
     HRESULT __stdcall AlphaRamp (
       [in] double argNo1
     );
   };
   [
     uuid(DE75D011-7A65-11D2-8CEA-00A0C9441E20),
     helpstring("IDxtJpeg Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDxtJpeg : IDXEffect
   {
     [id(1), propget]
     HRESULT __stdcall MaskNum (
       [out retval] long *__MIDL__IDxtJpeg0000
     );
     [id(1), propput]
     HRESULT __stdcall MaskNum (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall MaskName (
       [out retval] BSTR *pVal
     );
     [id(2), propput]
     HRESULT __stdcall MaskName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall ScaleX (
       [out retval] double *__MIDL__IDxtJpeg0002
     );
     [id(3), propput]
     HRESULT __stdcall ScaleX (
       [in] double argNo1
     );
     [propget]
     HRESULT __stdcall ScaleY (
       [out retval] double *__MIDL__IDxtJpeg0004
     );
     [id(4), propput]
     HRESULT __stdcall ScaleY (
       [in] double argNo1
     );
     [propget]
     HRESULT __stdcall OffsetX (
       [out retval] long *__MIDL__IDxtJpeg0006
     );
     [id(5), propput]
     HRESULT __stdcall OffsetX (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall OffsetY (
       [out retval] long *__MIDL__IDxtJpeg0008
     );
     [id(6), propput]
     HRESULT __stdcall OffsetY (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall ReplicateX (
       [out retval] long *pVal
     );
     [id(7), propput]
     HRESULT __stdcall ReplicateX (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall ReplicateY (
       [out retval] long *pVal
     );
     [id(8), propput]
     HRESULT __stdcall ReplicateY (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall BorderColor (
       [out retval] long *pVal
     );
     [id(9), propput]
     HRESULT __stdcall BorderColor (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall BorderWidth (
       [out retval] long *pVal
     );
     [id(10), propput]
     HRESULT __stdcall BorderWidth (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall BorderSoftness (
       [out retval] long *pVal
     );
     [id(11), propput]
     HRESULT __stdcall BorderSoftness (
       [in] long argNo1
     );
     [id(1610809366)]
     HRESULT __stdcall ApplyChanges (void);
     HRESULT __stdcall LoadDefSettings (void);
   };
   [
     uuid(3255DE56-38FB-4901-B980-94B438010D7B),
     helpstring("IDxtKey Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IDxtKey : IDXEffect
   {
     [id(1), propget]
     HRESULT __stdcall KeyType (
       [out retval] int *__MIDL__IDxtKey0000
     );
     [id(1), propput]
     HRESULT __stdcall KeyType (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall Hue (
       [out retval] int *__MIDL__IDxtKey0002
     );
     [id(2), propput]
     HRESULT __stdcall Hue (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall Luminance (
       [out retval] int *__MIDL__IDxtKey0004
     );
     [id(3), propput]
     HRESULT __stdcall Luminance (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall RGB (
       [out retval] UINT *__MIDL__IDxtKey0006
     );
     [id(4), propput]
     HRESULT __stdcall RGB (
       [in] UINT argNo1
     );
     [propget]
     HRESULT __stdcall Similarity (
       [out retval] int *__MIDL__IDxtKey0008
     );
     [id(5), propput]
     HRESULT __stdcall Similarity (
       [in] int argNo1
     );
     [propget]
     HRESULT __stdcall Invert (
       [out retval] long *__MIDL__IDxtKey0010
     );
     [id(6), propput]
     HRESULT __stdcall Invert (
       [in] long argNo1
     );
   };

};

/* Interface declarations.  */
[
  uuid(4ADA63A0-72D5-11D2-952A-0060081840BC),
  helpstring("IResize Interface")
]
interface IResize : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall get_Size (
    [out] int *piHeight,
    [out] int *piWidth,
    [out] long *pFlag
  );
  HRESULT __stdcall get_InputSize (
    [out] int *piHeight,
    [out] int *piWidth
  );
  HRESULT __stdcall put_Size (
    [in] int Height,
    [in] int Width,
    [in] long Flag
  );
  HRESULT __stdcall get_MediaType (
    [out] struct _AMMediaType *pmt
  );
  HRESULT __stdcall put_MediaType (
    [in] struct _AMMediaType *pmt
  );
};
[
  uuid(78530B74-61F9-11D2-8CAD-00A024580902),
  helpstring("IAMTimeline Interface")
]
interface IAMTimeline : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall CreateEmptyNode (
    [out] interface IAMTimelineObj **ppObj,
    TIMELINE_MAJOR_TYPE Type
  );
  HRESULT __stdcall AddGroup (
    interface IAMTimelineObj *pGroup
  );
  HRESULT __stdcall RemGroupFromList (
    interface IAMTimelineObj *pGroup
  );
  HRESULT __stdcall GetGroup (
    [out] interface IAMTimelineObj **ppGroup,
    long WhichGroup
  );
  HRESULT __stdcall GetGroupCount (
    long *pCount
  );
  HRESULT __stdcall ClearAllGroups (void);
  HRESULT __stdcall GetInsertMode (
    long *pMode
  );
  HRESULT __stdcall SetInsertMode (
    long Mode
  );
  HRESULT __stdcall EnableTransitions (
    long fEnabled
  );
  HRESULT __stdcall TransitionsEnabled (
    long *pfEnabled
  );
  HRESULT __stdcall EnableEffects (
    long fEnabled
  );
  HRESULT __stdcall EffectsEnabled (
    long *pfEnabled
  );
  HRESULT __stdcall SetInterestRange (
    LONGLONG Start,
    LONGLONG Stop
  );
  HRESULT __stdcall GetDuration (
    LONGLONG *pDuration
  );
  HRESULT __stdcall GetDuration2 (
    double *pDuration
  );
  HRESULT __stdcall SetDefaultFPS (
    double FPS
  );
  HRESULT __stdcall GetDefaultFPS (
    double *pFPS
  );
  HRESULT __stdcall IsDirty (
    long *pDirty
  );
  HRESULT __stdcall GetDirtyRange (
    LONGLONG *pStart,
    LONGLONG *pStop
  );
  HRESULT __stdcall GetCountOfType (
    long Group,
    long *pVal,
    long *pValWithComps,
    TIMELINE_MAJOR_TYPE majortype
  );
  HRESULT __stdcall ValidateSourceNames (
    long ValidateFlags,
    interface IMediaLocator *pOverride,
    LONG_PTR NotifyEventHandle
  );
  HRESULT __stdcall SetDefaultTransition (
    struct GUID *pGuid
  );
  HRESULT __stdcall GetDefaultTransition (
    struct GUID *pGuid
  );
  HRESULT __stdcall SetDefaultEffect (
    struct GUID *pGuid
  );
  HRESULT __stdcall GetDefaultEffect (
    struct GUID *pGuid
  );
  HRESULT __stdcall SetDefaultTransitionB (
    BSTR pGuid
  );
  HRESULT __stdcall GetDefaultTransitionB (
    [out retval] BSTR *pGuid
  );
  HRESULT __stdcall SetDefaultEffectB (
    BSTR pGuid
  );
  HRESULT __stdcall GetDefaultEffectB (
    [out retval] BSTR *pGuid
  );
};
[
  uuid(78530B77-61F9-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineObj Interface")
]
interface IAMTimelineObj : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetStartStop (
    LONGLONG *pStart,
    LONGLONG *pStop
  );
  HRESULT __stdcall GetStartStop2 (
    double *pStart,
    double *pStop
  );
  HRESULT __stdcall FixTimes (
    LONGLONG *pStart,
    LONGLONG *pStop
  );
  HRESULT __stdcall FixTimes2 (
    double *pStart,
    double *pStop
  );
  HRESULT __stdcall SetStartStop (
    LONGLONG Start,
    LONGLONG Stop
  );
  HRESULT __stdcall SetStartStop2 (
    double Start,
    double Stop
  );
  HRESULT __stdcall GetPropertySetter (
    [out retval] interface IPropertySetter **pVal
  );
  HRESULT __stdcall SetPropertySetter (
    interface IPropertySetter *newVal
  );
  HRESULT __stdcall GetSubObject (
    [out retval] IUnknown **pVal
  );
  HRESULT __stdcall SetSubObject (
    IUnknown * newVal
  );
  HRESULT __stdcall SetSubObjectGUID (
    struct GUID newVal
  );
  HRESULT __stdcall SetSubObjectGUIDB (
    BSTR newVal
  );
  HRESULT __stdcall GetSubObjectGUID (
    struct GUID *pVal
  );
  HRESULT __stdcall GetSubObjectGUIDB (
    [out retval] BSTR *pVal
  );
  HRESULT __stdcall GetSubObjectLoaded (
    long *pVal
  );
  HRESULT __stdcall GetTimelineType (
    TIMELINE_MAJOR_TYPE *pVal
  );
  HRESULT __stdcall SetTimelineType (
    TIMELINE_MAJOR_TYPE newVal
  );
  HRESULT __stdcall GetUserID (
    long *pVal
  );
  HRESULT __stdcall SetUserID (
    long newVal
  );
  HRESULT __stdcall GetGenID (
    long *pVal
  );
  HRESULT __stdcall GetUserName (
    [out retval] BSTR *pVal
  );
  HRESULT __stdcall SetUserName (
    BSTR newVal
  );
  HRESULT __stdcall GetUserData (
    UCHAR *pData,
    long *pSize
  );
  HRESULT __stdcall SetUserData (
    UCHAR *pData,
    long Size
  );
  HRESULT __stdcall GetMuted (
    long *pVal
  );
  HRESULT __stdcall SetMuted (
    long newVal
  );
  HRESULT __stdcall GetLocked (
    long *pVal
  );
  HRESULT __stdcall SetLocked (
    long newVal
  );
  HRESULT __stdcall GetDirtyRange (
    LONGLONG *pStart,
    LONGLONG *pStop
  );
  HRESULT __stdcall GetDirtyRange2 (
    double *pStart,
    double *pStop
  );
  HRESULT __stdcall SetDirtyRange (
    LONGLONG Start,
    LONGLONG Stop
  );
  HRESULT __stdcall SetDirtyRange2 (
    double Start,
    double Stop
  );
  HRESULT __stdcall ClearDirty (void);
  HRESULT __stdcall Remove (void);
  HRESULT __stdcall RemoveAll (void);
  HRESULT __stdcall GetTimelineNoRef (
    interface IAMTimeline **ppResult
  );
  HRESULT __stdcall GetGroupIBelongTo (
    [out] interface IAMTimelineGroup **ppGroup
  );
  HRESULT __stdcall GetEmbedDepth (
    long *pVal
  );
};
[
  uuid(AE9472BD-B0C3-11D2-8D24-00A0C9441E20),
  helpstring("IPropertySetter Interface")
]
interface IPropertySetter : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall LoadXML (
    [in] IUnknown * pxml
  );
  HRESULT __stdcall PrintXML (
    [out] UCHAR *pszXML,
    [in] int cbXML,
    [out] int *pcbPrinted,
    [in] int indent
  );
  HRESULT __stdcall CloneProps (
    [out] interface IPropertySetter **ppSetter,
    [in] LONGLONG rtStart,
    [in] LONGLONG rtStop
  );
  HRESULT __stdcall AddProp (
    [in] DEXTER_PARAM Param,
    [in] DEXTER_VALUE *paValue
  );
  HRESULT __stdcall GetProps (
    [out] long *pcParams,
    [out] DEXTER_PARAM **paParam,
    [out] DEXTER_VALUE **paValue
  );
  HRESULT __stdcall FreeProps (
    [in] long cParams,
    [in] DEXTER_PARAM *paParam,
    [in] DEXTER_VALUE *paValue
  );
  HRESULT __stdcall ClearProps (void);
  HRESULT __stdcall SaveToBlob (
    [out] long *pcSize,
    [out] UCHAR *ppb
  );
  HRESULT __stdcall LoadFromBlob (
    [in] long cSize,
    [in] UCHAR *pb
  );
  HRESULT __stdcall SetProps (
    [in] IUnknown * pTarget,
    [in] LONGLONG rtNow
  );
  HRESULT __stdcall PrintXMLW (
    [out] USHORT *pszXML,
    [in] int cchXML,
    [out] int *pcchPrinted,
    [in] int indent
  );
};
[
  uuid(9EED4F00-B8A6-11D2-8023-00C0DF10D434),
  helpstring("IAMTimelineGroup Interface")
]
interface IAMTimelineGroup : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetTimeline (
    interface IAMTimeline *pTimeline
  );
  HRESULT __stdcall GetTimeline (
    [out] interface IAMTimeline **ppTimeline
  );
  HRESULT __stdcall GetPriority (
    long *pPriority
  );
  HRESULT __stdcall GetMediaType (
    [out] struct _AMMediaType *__MIDL__IAMTimelineGroup0000
  );
  HRESULT __stdcall SetMediaType (
    [in] struct _AMMediaType *__MIDL__IAMTimelineGroup0001
  );
  HRESULT __stdcall SetOutputFPS (
    double FPS
  );
  HRESULT __stdcall GetOutputFPS (
    double *pFPS
  );
  HRESULT __stdcall SetGroupName (
    BSTR pGroupName
  );
  HRESULT __stdcall GetGroupName (
    [out retval] BSTR *pGroupName
  );
  HRESULT __stdcall SetPreviewMode (
    long fPreview
  );
  HRESULT __stdcall GetPreviewMode (
    long *pfPreview
  );
  HRESULT __stdcall SetMediaTypeForVB (
    [in] long Val
  );
  HRESULT __stdcall GetOutputBuffering (
    [out] int *pnBuffer
  );
  HRESULT __stdcall SetOutputBuffering (
    [in] int nBuffer
  );
  HRESULT __stdcall SetSmartRecompressFormat (
    long *pFormat
  );
  HRESULT __stdcall GetSmartRecompressFormat (
    long *ppFormat
  );
  HRESULT __stdcall IsSmartRecompressFormatSet (
    long *pVal
  );
  HRESULT __stdcall IsRecompressFormatDirty (
    long *pVal
  );
  HRESULT __stdcall ClearRecompressFormatDirty (void);
  HRESULT __stdcall SetRecompFormatFromSource (
    interface IAMTimelineSrc *pSource
  );
};
[
  uuid(78530B79-61F9-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineSrc Interface")
]
interface IAMTimelineSrc : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetMediaTimes (
    LONGLONG *pStart,
    LONGLONG *pStop
  );
  HRESULT __stdcall GetMediaTimes2 (
    double *pStart,
    double *pStop
  );
  HRESULT __stdcall ModifyStopTime (
    LONGLONG Stop
  );
  HRESULT __stdcall ModifyStopTime2 (
    double Stop
  );
  HRESULT __stdcall FixMediaTimes (
    LONGLONG *pStart,
    LONGLONG *pStop
  );
  HRESULT __stdcall FixMediaTimes2 (
    double *pStart,
    double *pStop
  );
  HRESULT __stdcall SetMediaTimes (
    LONGLONG Start,
    LONGLONG Stop
  );
  HRESULT __stdcall SetMediaTimes2 (
    double Start,
    double Stop
  );
  HRESULT __stdcall SetMediaLength (
    LONGLONG Length
  );
  HRESULT __stdcall SetMediaLength2 (
    double Length
  );
  HRESULT __stdcall GetMediaLength (
    LONGLONG *pLength
  );
  HRESULT __stdcall GetMediaLength2 (
    double *pLength
  );
  HRESULT __stdcall GetMediaName (
    [out retval] BSTR *pVal
  );
  HRESULT __stdcall SetMediaName (
    BSTR newVal
  );
  HRESULT __stdcall SpliceWithNext (
    interface IAMTimelineObj *pNext
  );
  HRESULT __stdcall GetStreamNumber (
    long *pVal
  );
  HRESULT __stdcall SetStreamNumber (
    long Val
  );
  HRESULT __stdcall IsNormalRate (
    long *pVal
  );
  HRESULT __stdcall GetDefaultFPS (
    double *pFPS
  );
  HRESULT __stdcall SetDefaultFPS (
    double FPS
  );
  HRESULT __stdcall GetStretchMode (
    int *pnStretchMode
  );
  HRESULT __stdcall SetStretchMode (
    int nStretchMode
  );
};
[
  uuid(288581E0-66CE-11D2-918F-00C0DF10D434),
  helpstring("IMediaLocator Interface")
]
interface IMediaLocator : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall FindMediaFile (
    BSTR Input,
    BSTR FilterString,
    BSTR *pOutput,
    long Flags
  );
  HRESULT __stdcall AddFoundLocation (
    BSTR DirectoryName
  );
};
[
  uuid(00000109-0000-0000-C000-000000000046)
]
interface IPersistStream : IPersist
{
  [id(1610743808)]
  HRESULT __stdcall IsDirty (void);
  HRESULT __stdcall Load (
    [in] interface IStream *pstm
  );
  HRESULT __stdcall Save (
    [in] interface IStream *pstm,
    [in] long fClearDirty
  );
  HRESULT __stdcall GetSizeMax (
    [out] struct _ULARGE_INTEGER *pcbSize
  );
};
[
  uuid(0000010C-0000-0000-C000-000000000046)
]
interface IPersist : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetClassID (
    [out] struct GUID *pClassID
  );
};
[
  uuid(0000000C-0000-0000-C000-000000000046)
]
interface IStream : ISequentialStream
{
  [id(1610743808)]
  HRESULT __stdcall RemoteSeek (
    [in] struct _LARGE_INTEGER dlibMove,
    [in] UINT dwOrigin,
    [out] struct _ULARGE_INTEGER *plibNewPosition
  );
  HRESULT __stdcall SetSize (
    [in] struct _ULARGE_INTEGER libNewSize
  );
  HRESULT __stdcall RemoteCopyTo (
    [in] interface IStream *pstm,
    [in] struct _ULARGE_INTEGER cb,
    [out] struct _ULARGE_INTEGER *pcbRead,
    [out] struct _ULARGE_INTEGER *pcbWritten
  );
  HRESULT __stdcall Commit (
    [in] UINT grfCommitFlags
  );
  HRESULT __stdcall Revert (void);
  HRESULT __stdcall LockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall UnlockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall Stat (
    [out] struct tagSTATSTG *pstatstg,
    [in] UINT grfStatFlag
  );
  HRESULT __stdcall Clone (
    [out] interface IStream **ppstm
  );
};
[
  uuid(0C733A30-2A1C-11CE-ADE5-00AA0044773D)
]
interface ISequentialStream : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteRead (
    [out] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbRead
  );
  HRESULT __stdcall RemoteWrite (
    [in] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbWritten
  );
};
[
  uuid(963566DA-BE21-4EAF-88E9-35704F8F52A1),
  helpstring("IAMSetErrorLog Interface")
]
interface IAMSetErrorLog : IUnknown
{
  [id(1610678272), propget]
  HRESULT __stdcall ErrorLog (
    [out retval] interface IAMErrorLog **pVal
  );
  [id(1610678272), propput]
  HRESULT __stdcall ErrorLog (
    [in] interface IAMErrorLog *argNo1
  );
};
[
  uuid(E43E73A2-0EFA-11D3-9601-00A0C9441E20),
  helpstring("IAMErrorLog Interface")
]
interface IAMErrorLog : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall LogError (
    long Severity,
    BSTR pErrorString,
    long ErrorCode,
    long hresult,
    [in] VARIANT *pExtraInfo
  );
};
[
  uuid(EAE58537-622E-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineEffectable Interface")
]
interface IAMTimelineEffectable : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall EffectInsBefore (
    interface IAMTimelineObj *pFX,
    long priority
  );
  HRESULT __stdcall EffectSwapPriorities (
    long PriorityA,
    long PriorityB
  );
  HRESULT __stdcall EffectGetCount (
    long *pCount
  );
  HRESULT __stdcall GetEffect (
    [out] interface IAMTimelineObj **ppFx,
    long Which
  );
};
[
  uuid(A0F840A0-D590-11D2-8D55-00A0C9441E20),
  helpstring("IAMTimelineSplittable Interface")
]
interface IAMTimelineSplittable : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SplitAt (
    LONGLONG Time
  );
  HRESULT __stdcall SplitAt2 (
    double Time
  );
};
[
  uuid(EAE58538-622E-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineTrack Interface")
]
interface IAMTimelineTrack : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SrcAdd (
    interface IAMTimelineObj *pSource
  );
  HRESULT __stdcall GetNextSrc (
    [out] interface IAMTimelineObj **ppSrc,
    LONGLONG *pInOut
  );
  HRESULT __stdcall GetNextSrc2 (
    [out] interface IAMTimelineObj **ppSrc,
    double *pInOut
  );
  HRESULT __stdcall MoveEverythingBy (
    LONGLONG Start,
    LONGLONG MoveBy
  );
  HRESULT __stdcall MoveEverythingBy2 (
    double Start,
    double MoveBy
  );
  HRESULT __stdcall GetSourcesCount (
    long *pVal
  );
  HRESULT __stdcall AreYouBlank (
    long *pVal
  );
  HRESULT __stdcall GetSrcAtTime (
    [out] interface IAMTimelineObj **ppSrc,
    LONGLONG Time,
    long SearchDirection
  );
  HRESULT __stdcall GetSrcAtTime2 (
    [out] interface IAMTimelineObj **ppSrc,
    double Time,
    long SearchDirection
  );
  HRESULT __stdcall InsertSpace (
    LONGLONG rtStart,
    LONGLONG rtEnd
  );
  HRESULT __stdcall InsertSpace2 (
    double rtStart,
    double rtEnd
  );
  HRESULT __stdcall ZeroBetween (
    LONGLONG rtStart,
    LONGLONG rtEnd
  );
  HRESULT __stdcall ZeroBetween2 (
    double rtStart,
    double rtEnd
  );
  HRESULT __stdcall GetNextSrcEx (
    interface IAMTimelineObj *pLast,
    [out] interface IAMTimelineObj **ppNext
  );
};
[
  uuid(378FA386-622E-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineTransable Interface")
]
interface IAMTimelineTransable : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall TransAdd (
    interface IAMTimelineObj *pTrans
  );
  HRESULT __stdcall TransGetCount (
    long *pCount
  );
  HRESULT __stdcall GetNextTrans (
    [out] interface IAMTimelineObj **ppTrans,
    LONGLONG *pInOut
  );
  HRESULT __stdcall GetNextTrans2 (
    [out] interface IAMTimelineObj **ppTrans,
    double *pInOut
  );
  HRESULT __stdcall GetTransAtTime (
    [out] interface IAMTimelineObj **ppObj,
    LONGLONG Time,
    long SearchDirection
  );
  HRESULT __stdcall GetTransAtTime2 (
    [out] interface IAMTimelineObj **ppObj,
    double Time,
    long SearchDirection
  );
};
[
  uuid(A8ED5F80-C2C7-11D2-8D39-00A0C9441E20),
  helpstring("IAMTimelineVirtualTrack Interface")
]
interface IAMTimelineVirtualTrack : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall TrackGetPriority (
    long *pPriority
  );
  HRESULT __stdcall SetTrackDirty (void);
};
[
  uuid(EAE58536-622E-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineComp Interface")
]
interface IAMTimelineComp : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall VTrackInsBefore (
    interface IAMTimelineObj *pVirtualTrack,
    long priority
  );
  HRESULT __stdcall VTrackSwapPriorities (
    long VirtualTrackA,
    long VirtualTrackB
  );
  HRESULT __stdcall VTrackGetCount (
    long *pVal
  );
  HRESULT __stdcall GetVTrack (
    [out] interface IAMTimelineObj **ppVirtualTrack,
    long Which
  );
  HRESULT __stdcall GetCountOfType (
    long *pVal,
    long *pValWithComps,
    TIMELINE_MAJOR_TYPE majortype
  );
  HRESULT __stdcall GetRecursiveLayerOfType (
    [out] interface IAMTimelineObj **ppVirtualTrack,
    long WhichLayer,
    TIMELINE_MAJOR_TYPE Type
  );
  HRESULT __stdcall GetRecursiveLayerOfTypeI (
    [out] interface IAMTimelineObj **ppVirtualTrack,
    [in out] long *pWhichLayer,
    TIMELINE_MAJOR_TYPE Type
  );
  HRESULT __stdcall GetNextVTrack (
    interface IAMTimelineObj *pVirtualTrack,
    [out] interface IAMTimelineObj **ppNextVirtualTrack
  );
};
[
  uuid(BCE0C265-622D-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineTrans Interface")
]
interface IAMTimelineTrans : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetCutPoint (
    LONGLONG *pTLTime
  );
  HRESULT __stdcall GetCutPoint2 (
    double *pTLTime
  );
  HRESULT __stdcall SetCutPoint (
    LONGLONG TLTime
  );
  HRESULT __stdcall SetCutPoint2 (
    double TLTime
  );
  HRESULT __stdcall GetSwapInputs (
    long *pVal
  );
  HRESULT __stdcall SetSwapInputs (
    long pVal
  );
  HRESULT __stdcall GetCutsOnly (
    long *pVal
  );
  HRESULT __stdcall SetCutsOnly (
    long pVal
  );
};
[
  uuid(BCE0C264-622D-11D2-8CAD-00A024580902),
  helpstring("IAMTimelineEffect Interface")
]
interface IAMTimelineEffect : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall EffectGetPriority (
    long *pVal
  );
};
[
  uuid(55272A00-42CB-11CE-8135-00AA004BB851)
]
interface IPropertyBag : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteRead (
    [in] LPWSTR pszPropName,
    [out] VARIANT *pVar,
    [in] interface IErrorLog *pErrorLog,
    [in] UINT varType,
    [in] IUnknown * pUnkObj
  );
  HRESULT __stdcall Write (
    [in] LPWSTR pszPropName,
    [in] VARIANT *pVar
  );
};
[
  uuid(3127CA40-446E-11CE-8135-00AA004BB851)
]
interface IErrorLog : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall AddError (
    [in] LPWSTR pszPropName,
    [in] struct EXCEPINFO *pExcepInfo
  );
};
[
  uuid(6BEE3A81-66C9-11D2-918F-00C0DF10D434),
  helpstring("IRenderEngine Interface")
]
interface IRenderEngine : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetTimelineObject (
    interface IAMTimeline *pTimeline
  );
  HRESULT __stdcall GetTimelineObject (
    [out] interface IAMTimeline **ppTimeline
  );
  HRESULT __stdcall GetFilterGraph (
    [out] interface IGraphBuilder **ppFG
  );
  HRESULT __stdcall SetFilterGraph (
    interface IGraphBuilder *pFG
  );
  HRESULT __stdcall SetInterestRange (
    LONGLONG Start,
    LONGLONG Stop
  );
  HRESULT __stdcall SetInterestRange2 (
    double Start,
    double Stop
  );
  HRESULT __stdcall SetRenderRange (
    LONGLONG Start,
    LONGLONG Stop
  );
  HRESULT __stdcall SetRenderRange2 (
    double Start,
    double Stop
  );
  HRESULT __stdcall GetGroupOutputPin (
    long Group,
    [out] interface IPin **ppRenderPin
  );
  HRESULT __stdcall ScrapIt (void);
  HRESULT __stdcall RenderOutputPins (void);
  HRESULT __stdcall GetVendorString (
    [out retval] BSTR *pVendorID
  );
  HRESULT __stdcall ConnectFrontEnd (void);
  HRESULT __stdcall SetSourceConnectCallback (
    interface IGrfCache *pCallback
  );
  HRESULT __stdcall SetDynamicReconnectLevel (
    long Level
  );
  HRESULT __stdcall DoSmartRecompression (void);
  HRESULT __stdcall UseInSmartRecompressionGraph (void);
  HRESULT __stdcall SetSourceNameValidation (
    BSTR FilterString,
    interface IMediaLocator *pOverride,
    long Flags
  );
  HRESULT __stdcall Commit (void);
  HRESULT __stdcall Decommit (void);
  HRESULT __stdcall GetCaps (
    long Index,
    long *pReturn
  );
};
[
  uuid(56A868A9-0AD4-11CE-B03A-0020AF0BA770)
]
interface IGraphBuilder : IFilterGraph
{
  [id(1610743808)]
  HRESULT __stdcall Connect (
    [in] interface IPin *ppinOut,
    [in] interface IPin *ppinIn
  );
  HRESULT __stdcall Render (
    [in] interface IPin *ppinOut
  );
  HRESULT __stdcall RenderFile (
    [in] LPWSTR lpcwstrFile,
    [in] LPWSTR lpcwstrPlayList
  );
  HRESULT __stdcall AddSourceFilter (
    [in] LPWSTR lpcwstrFileName,
    [in] LPWSTR lpcwstrFilterName,
    [out] interface IBaseFilter **ppFilter
  );
  HRESULT __stdcall SetLogFile (
    [in] ULONG_PTR hFile
  );
  HRESULT __stdcall Abort (void);
  HRESULT __stdcall ShouldOperationContinue (void);
};
[
  uuid(56A8689F-0AD4-11CE-B03A-0020AF0BA770)
]
interface IFilterGraph : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall AddFilter (
    [in] interface IBaseFilter *pFilter,
    [in] LPWSTR pName
  );
  HRESULT __stdcall RemoveFilter (
    [in] interface IBaseFilter *pFilter
  );
  HRESULT __stdcall EnumFilters (
    [out] interface IEnumFilters **ppEnum
  );
  HRESULT __stdcall FindFilterByName (
    [in] LPWSTR pName,
    [out] interface IBaseFilter **ppFilter
  );
  HRESULT __stdcall ConnectDirect (
    [in] interface IPin *ppinOut,
    [in] interface IPin *ppinIn,
    [in] struct _AMMediaType *pmt
  );
  HRESULT __stdcall Reconnect (
    [in] interface IPin *pPin
  );
  HRESULT __stdcall Disconnect (
    [in] interface IPin *pPin
  );
  HRESULT __stdcall SetDefaultSyncSource (void);
};
[
  uuid(56A86895-0AD4-11CE-B03A-0020AF0BA770)
]
interface IBaseFilter : IMediaFilter
{
  [id(1610809344)]
  HRESULT __stdcall EnumPins (
    [out] interface IEnumPins **ppEnum
  );
  HRESULT __stdcall FindPin (
    [in] LPWSTR Id,
    [out] interface IPin **ppPin
  );
  HRESULT __stdcall QueryFilterInfo (
    [out] struct _FilterInfo *pInfo
  );
  HRESULT __stdcall JoinFilterGraph (
    [in] interface IFilterGraph *pGraph,
    [in] LPWSTR pName
  );
  HRESULT __stdcall QueryVendorInfo (
    [out] LPWSTR pVendorInfo
  );
};
[
  uuid(56A86899-0AD4-11CE-B03A-0020AF0BA770)
]
interface IMediaFilter : IPersist
{
  [id(1610743808)]
  HRESULT __stdcall Stop (void);
  HRESULT __stdcall Pause (void);
  HRESULT __stdcall Run (
    LONGLONG tStart
  );
  HRESULT __stdcall GetState (
    [in] UINT dwMilliSecsTimeout,
    [out] enum _FilterState *State
  );
  HRESULT __stdcall SetSyncSource (
    [in] interface IReferenceClock *pClock
  );
  HRESULT __stdcall GetSyncSource (
    [out] interface IReferenceClock **pClock
  );
};
[
  uuid(56A86897-0AD4-11CE-B03A-0020AF0BA770)
]
interface IReferenceClock : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetTime (
    [out] LONGLONG *pTime
  );
  HRESULT __stdcall AdviseTime (
    [in] LONGLONG baseTime,
    [in] LONGLONG streamTime,
    [in] ULONG_PTR hEvent,
    [out] ULONG_PTR *pdwAdviseCookie
  );
  HRESULT __stdcall AdvisePeriodic (
    [in] LONGLONG startTime,
    [in] LONGLONG periodTime,
    [in] ULONG_PTR hSemaphore,
    [out] ULONG_PTR *pdwAdviseCookie
  );
  HRESULT __stdcall Unadvise (
    [in] ULONG_PTR dwAdviseCookie
  );
};
[
  uuid(56A86892-0AD4-11CE-B03A-0020AF0BA770)
]
interface IEnumPins : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Next (
    [in] UINT cPins,
    [out] interface IPin **ppPins,
    [out] UINT *pcFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT cPins
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumPins **ppEnum
  );
};
[
  uuid(56A86891-0AD4-11CE-B03A-0020AF0BA770)
]
interface IPin : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Connect (
    [in] interface IPin *pReceivePin,
    [in] struct _AMMediaType *pmt
  );
  HRESULT __stdcall ReceiveConnection (
    [in] interface IPin *pConnector,
    [in] struct _AMMediaType *pmt
  );
  HRESULT __stdcall Disconnect (void);
  HRESULT __stdcall ConnectedTo (
    [out] interface IPin **pPin
  );
  HRESULT __stdcall ConnectionMediaType (
    [out] struct _AMMediaType *pmt
  );
  HRESULT __stdcall QueryPinInfo (
    [out] struct _PinInfo *pInfo
  );
  HRESULT __stdcall QueryDirection (
    [out] enum _PinDirection *pPinDir
  );
  HRESULT __stdcall QueryId (
    [out] LPWSTR Id
  );
  HRESULT __stdcall QueryAccept (
    [in] struct _AMMediaType *pmt
  );
  HRESULT __stdcall EnumMediaTypes (
    [out] interface IEnumMediaTypes **ppEnum
  );
  HRESULT __stdcall QueryInternalConnections (
    [out] interface IPin **apPin,
    [in out] UINT *nPin
  );
  HRESULT __stdcall EndOfStream (void);
  HRESULT __stdcall BeginFlush (void);
  HRESULT __stdcall EndFlush (void);
  HRESULT __stdcall NewSegment (
    [in] LONGLONG tStart,
    [in] LONGLONG tStop,
    [in] double dRate
  );
};
[
  uuid(89C31040-846B-11CE-97D3-00AA0055595A)
]
interface IEnumMediaTypes : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Next (
    [in] UINT cMediaTypes,
    [out] struct _AMMediaType **ppMediaTypes,
    [out] UINT *pcFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT cMediaTypes
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumMediaTypes **ppEnum
  );
};
[
  uuid(56A86893-0AD4-11CE-B03A-0020AF0BA770)
]
interface IEnumFilters : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Next (
    [in] UINT cFilters,
    [out] interface IBaseFilter **ppFilter,
    [out] UINT *pcFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT cFilters
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumFilters **ppEnum
  );
};
[
  uuid(AE9472BE-B0C3-11D2-8D24-00A0C9441E20),
  helpstring("IGrfCache Interface"),
  dispatchable
]
interface IGrfCache : IDispatch
{
  [id(1)]
  HRESULT __stdcall AddFilter (
    interface IGrfCache *ChainedCache,
    LONGLONG Id,
    interface IBaseFilter *pFilter,
    LPWSTR pName
  );
  HRESULT __stdcall ConnectPins (
    interface IGrfCache *ChainedCache,
    LONGLONG PinID1,
    interface IPin *pPin1,
    LONGLONG PinID2,
    interface IPin *pPin2
  );
  HRESULT __stdcall SetGraph (
    interface IGraphBuilder *pGraph
  );
  HRESULT __stdcall DoConnectionsNow (void);
};
[
  uuid(6BEE3A82-66C9-11D2-918F-00C0DF10D434),
  helpstring("IRenderEngine2 Interface")
]
interface IRenderEngine2 : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetResizerGUID (
    struct GUID ResizerGuid
  );
};
[
  uuid(F03FA8CE-879A-4D59-9B2C-26BB1CF83461),
  helpstring("ISmartRenderEngine Interface")
]
interface ISmartRenderEngine : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetGroupCompressor (
    long Group,
    interface IBaseFilter *pCompressor
  );
  HRESULT __stdcall GetGroupCompressor (
    long Group,
    interface IBaseFilter **pCompressor
  );
  HRESULT __stdcall SetFindCompressorCB (
    interface IFindCompressorCB *pCallback
  );
};
[
  uuid(F03FA8DE-879A-4D59-9B2C-26BB1CF83461),
  helpstring("IFindCompressorCB Interface")
]
interface IFindCompressorCB : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetCompressor (
    struct _AMMediaType *pType,
    struct _AMMediaType *pCompType,
    [out] interface IBaseFilter **ppFilter
  );
};
[
  uuid(18C628ED-962A-11D2-8D08-00A0C9441E20),
  helpstring("IXml2Dex Interface"),
  dispatchable
]
interface IXml2Dex : IDispatch
{
  [id(1)]
  HRESULT __stdcall CreateGraphFromFile (
    [out] IUnknown **ppGraph,
    IUnknown * pTimeline,
    BSTR Filename
  );
  HRESULT __stdcall WriteGrfFile (
    IUnknown * pGraph,
    BSTR Filename
  );
  HRESULT __stdcall WriteXMLFile (
    IUnknown * pTimeline,
    BSTR Filename
  );
  [id(5)]
  HRESULT __stdcall ReadXMLFile (
    IUnknown * pTimeline,
    BSTR XMLName
  );
  HRESULT __stdcall Delete (
    IUnknown * pTimeline,
    double dStart,
    double dEnd
  );
  HRESULT __stdcall WriteXMLPart (
    IUnknown * pTimeline,
    double dStart,
    double dEnd,
    BSTR Filename
  );
  HRESULT __stdcall PasteXMLFile (
    IUnknown * pTimeline,
    double dStart,
    BSTR Filename
  );
  HRESULT __stdcall CopyXML (
    IUnknown * pTimeline,
    double dStart,
    double dEnd
  );
  HRESULT __stdcall PasteXML (
    IUnknown * pTimeline,
    double dStart
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall ReadXML (
    IUnknown * pTimeline,
    IUnknown * pxml
  );
  HRESULT __stdcall WriteXML (
    IUnknown * pTimeline,
    BSTR *pbstrXML
  );
};
[
  uuid(65BD0710-24D2-4FF7-9324-ED2E5D3ABAFA),
  helpstring("IMediaDet Interface")
]
interface IMediaDet : IUnknown
{
  [id(1), propget]
  HRESULT __stdcall Filter (
    [out retval] IUnknown **pVal
  );
  [id(1), propput]
  HRESULT __stdcall Filter (
    [in] IUnknown * argNo1
  );
  [propget]
  HRESULT __stdcall OutputStreams (
    [out retval] long *pVal
  );
  [propget]
  HRESULT __stdcall CurrentStream (
    [out retval] long *pVal
  );
  [id(3), propput]
  HRESULT __stdcall CurrentStream (
    [in] long argNo1
  );
  [propget]
  HRESULT __stdcall StreamType (
    [out retval] struct GUID *pVal
  );
  [propget]
  HRESULT __stdcall StreamTypeB (
    [out retval] BSTR *pVal
  );
  [propget]
  HRESULT __stdcall StreamLength (
    [out retval] double *pVal
  );
  [propget]
  HRESULT __stdcall Filename (
    [out retval] BSTR *pVal
  );
  [id(7), propput]
  HRESULT __stdcall Filename (
    [in] BSTR argNo1
  );
  HRESULT __stdcall GetBitmapBits (
    double streamTime,
    long *pBufferSize,
    UCHAR *pBuffer,
    long Width,
    long Height
  );
  HRESULT __stdcall WriteBitmapBits (
    double streamTime,
    long Width,
    long Height,
    BSTR Filename
  );
  [propget]
  HRESULT __stdcall StreamMediaType (
    [out retval] struct _AMMediaType *pVal
  );
  HRESULT __stdcall GetSampleGrabber (
    [out] interface ISampleGrabber **ppVal
  );
  [propget]
  HRESULT __stdcall FrameRate (
    [out retval] double *pVal
  );
  HRESULT __stdcall EnterBitmapGrabMode (
    double SeekTime
  );
};
[
  uuid(6B652FFF-11FE-4FCE-92AD-0266B5D7C78F),
  helpstring("ISampleGrabber Interface")
]
interface ISampleGrabber : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetOneShot (
    long OneShot
  );
  HRESULT __stdcall SetMediaType (
    struct _AMMediaType *pType
  );
  HRESULT __stdcall GetConnectedMediaType (
    struct _AMMediaType *pType
  );
  HRESULT __stdcall SetBufferSamples (
    long BufferThem
  );
  HRESULT __stdcall GetCurrentBuffer (
    [in out] long *pBufferSize,
    [out] long *pBuffer
  );
  HRESULT __stdcall GetCurrentSample (
    [out retval] interface IMediaSample **ppSample
  );
  HRESULT __stdcall SetCallback (
    interface ISampleGrabberCB *pCallback,
    long WhichMethodToCallback
  );
};
[
  uuid(56A8689A-0AD4-11CE-B03A-0020AF0BA770)
]
interface IMediaSample : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetPointer (
    [out] UCHAR *ppBuffer
  );
  long __stdcall GetSize (void);
  HRESULT __stdcall GetTime (
    [out] LONGLONG *pTimeStart,
    [out] LONGLONG *pTimeEnd
  );
  HRESULT __stdcall SetTime (
    [in] LONGLONG *pTimeStart,
    [in] LONGLONG *pTimeEnd
  );
  HRESULT __stdcall IsSyncPoint (void);
  HRESULT __stdcall SetSyncPoint (
    long bIsSyncPoint
  );
  HRESULT __stdcall IsPreroll (void);
  HRESULT __stdcall SetPreroll (
    long bIsPreroll
  );
  long __stdcall GetActualDataLength (void);
  HRESULT __stdcall SetActualDataLength (
    long __MIDL__IMediaSample0000
  );
  HRESULT __stdcall GetMediaType (
    [out] struct _AMMediaType **ppMediaType
  );
  HRESULT __stdcall SetMediaType (
    [in] struct _AMMediaType *pMediaType
  );
  HRESULT __stdcall IsDiscontinuity (void);
  HRESULT __stdcall SetDiscontinuity (
    long bDiscontinuity
  );
  HRESULT __stdcall GetMediaTime (
    [out] LONGLONG *pTimeStart,
    [out] LONGLONG *pTimeEnd
  );
  HRESULT __stdcall SetMediaTime (
    [in] LONGLONG *pTimeStart,
    [in] LONGLONG *pTimeEnd
  );
};
[
  uuid(0579154A-2B53-4994-B0D0-E773148EFF85),
  helpstring("ISampleGrabberCB Interface")
]
interface ISampleGrabberCB : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SampleCB (
    double SampleTime,
    interface IMediaSample *pSample
  );
  HRESULT __stdcall BufferCB (
    double SampleTime,
    UCHAR *pBuffer,
    long BufferLen
  );
};

