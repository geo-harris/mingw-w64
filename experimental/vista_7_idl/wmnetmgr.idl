/* Automated generated idl file <wmsclientnetmgrlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface INSNetSourceCreator;
interface IMediaStreamMonitor;
interface IMediaStream;
interface IAsfFormatSet;
interface INSSBuffer;
interface IWMSContentDescriptionList;
interface IWMSContext;
interface IWMSDataContainerVersion;
interface IWMSPacket;
interface IWMSBufferAllocator;
interface IWMSPacketList;
interface IWMSPacketParser;
interface IWMSPacketListCallback;
interface INSNetSourceCreatorCallback;
interface IWMSNamespaceNode;
interface IWMSNamespaceChangeCallback;
interface IStream;
interface ISequentialStream;

/* Structure forward declarations.  */
struct STREAMPOS;
struct PLAYLISTPOS;
struct STREAMPROPERTIES;
struct _FILETIME;
struct __MIDL___MIDL_itf_wmsclientnetmanager_0003_0025_0002;
struct _RemotableHandle;
struct __MIDL_IWMSPacket_0001;
struct __MIDL_IWMSPacketList_0001;
struct __MIDL_IWMSPacketList_0002;
struct _LARGE_INTEGER;
struct _ULARGE_INTEGER;
struct tagSTATSTG;

/* Union record forward declarations.  */
union __MIDL_IWinTypes_0009;

/* Union record forward declarations.  */
coclass ClientNetManager;

/* Enumeration declarations.  */
enum STREAMPOSTYPE
{
  SPT_TIME = (int) 201326592,
  SPT_OBJECT = (int) 201326593,
  SPT_PACKET = (int) 201326594,
  SPT_BYTE = (int) 201326595
};
enum STREAMREQUEST
{
  STREAMREQUEST_INCREASE_BANDWIDTH = (int) 201326592,
  STREAMREQUEST_REDUCE_BANDWIDTH = (int) 201326593
};
enum WMS_CONTEXT_TYPE
{
  WMS_UNKNOWN_CONTEXT_TYPE = (int) 201326592,
  WMS_SERVER_CONTEXT_TYPE = (int) 201326593,
  WMS_USER_CONTEXT_TYPE = (int) 201326594,
  WMS_PRESENTATION_CONTEXT_TYPE = (int) 201326595,
  WMS_CONTENT_DESCRIPTION_CONTEXT_TYPE = (int) 201326596,
  WMS_COMMAND_REQUEST_CONTEXT_TYPE = (int) 201326597,
  WMS_COMMAND_RESPONSE_CONTEXT_TYPE = (int) 201326598,
  WMS_TRANSPORT_SPEC_CONTEXT_TYPE = (int) 201326599,
  WMS_PACKETIZER_CONTEXT_TYPE = (int) 201326600,
  WMS_CACHE_CONTENT_INFORMATION_CONTEXT_TYPE = (int) 201326601,
  WMS_ARCHIVE_CONTEXT_TYPE = (int) 201326602,
  WMS_NUM_CONTEXT_TYPE = (int) 201326603
};
enum STREAMEVENT
{
  STREAM_EVENT_STOP = (int) 201326592,
  STREAM_EVENT_CLOSE = (int) 201326593,
  STREAM_EVENT_HEADER = (int) 201326594,
  STREAM_EVENT_NO_HEADER = (int) 201326595,
  STREAM_EVENT_BUFFERING_START = (int) 201326596,
  STREAM_EVENT_BUFFERING_END = (int) 201326597,
  STREAM_EVENT_END_OF_STREAMING = (int) 201326598
};
enum __MIDL___MIDL_itf_wmsclientnetmanager_0002_0179_0002
{
  WMS_NAME_CT_NODE_ADD = (int) 201326593,
  WMS_NAME_CT_NODE_RENAME = (int) 201326594,
  WMS_NAME_CT_NODE_VALUE_CHANGE = (int) 201326596,
  WMS_NAME_CT_NODE_DELETE = (int) 201326600,
  WMS_NAME_CT_NODE_MOVE_BEFORE = (int) 201326608,
  WMS_NAME_CT_MASK = (int) 201326623
};

/* Structure/union declarations.  */
struct STREAMPOS
{
  enum STREAMPOSTYPE Type;
  UINT msStreamTime;
  UINT dwObjectId;
  UINT dwPacketId;
};
struct PLAYLISTPOS
{
  UINT dwPlaylistGenId;
  UINT dwOffset;
};
struct STREAMPROPERTIES
{
  UINT cbSize;
  UINT dwStreamId;
  UINT dwFlags;
  UINT cbMaxSegment;
  UINT cbMaxObject;
  UINT cTotalObjects;
  UINT msDuration;
  UINT dwBitRate;
  UINT cbHeaderSize;
  struct _FILETIME fileCreationTime;
};
struct _FILETIME
{
  UINT dwLowDateTime;
  UINT dwHighDateTime;
};
struct __MIDL___MIDL_itf_wmsclientnetmanager_0003_0025_0002
{
  USHORT wSrcStreamNumber;
  USHORT wDstStreamNumber;
  USHORT wThinningLevel;
};
struct _RemotableHandle
{
  long fContext;
  union __MIDL_IWinTypes_0009 u;
};
union __MIDL_IWinTypes_0009
{
  long hInproc;
  long hRemote;
};
struct __MIDL_IWMSPacket_0001
{
  interface INSSBuffer *pBuffer;
  UINT dwBufferOffset;
  UINT dwBufferLen;
  USHORT wFlags;
};
struct __MIDL_IWMSPacketList_0001
{
  interface IWMSPacket *pPacket;
  struct __MIDL_IWMSPacketList_0002 Attrs;
};
struct __MIDL_IWMSPacketList_0002
{
  UINT dwPacketNum;
  UINT dwPacketNumBuffers;
  UINT dwPacketLength;
  UINT dwPacketSendTimeHi;
  UINT dwPacketSendTime;
  UINT dwPacketStreamNum;
  UINT dwPacketFlags;
  UINT dwPacketNetSequenceNum;
};
struct _LARGE_INTEGER
{
  LONGLONG QuadPart;
};
struct _ULARGE_INTEGER
{
  ULONGLONG QuadPart;
};
struct tagSTATSTG
{
  LPWSTR pwcsName;
  UINT Type;
  struct _ULARGE_INTEGER cbSize;
  struct _FILETIME mtime;
  struct _FILETIME ctime;
  struct _FILETIME atime;
  UINT grfMode;
  UINT grfLocksSupported;
  struct GUID clsid;
  UINT grfStateBits;
  UINT reserved;
};

/* Type definitions.  */
typedef struct __MIDL___MIDL_itf_wmsclientnetmanager_0003_0025_0002 STREAM_SWITCH_ENTRY;
typedef struct _RemotableHandle * wireHWND;
typedef struct __MIDL_IWMSPacket_0001 WMSBUFFERDESC;
typedef struct __MIDL_IWMSPacketList_0001 WMSPACKETDESC;
typedef enum __MIDL___MIDL_itf_wmsclientnetmanager_0002_0179_0002 WMS_NAMESPACE_CHANGE_TYPES;

[
  uuid(CD12A3C0-9C42-11D2-BEED-0060082F2054),
  version(1.0),
  helpstring("WMSClientNetManager 1.0 Type Library")
]
library wmsclientnetmgrlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(CD12A3CE-9C42-11D2-BEED-0060082F2054),
     helpstring("ClientNetManager Class"),
     cancreate
   ]
   coclass ClientNetManager
   {
     interface INSNetSourceCreator;
   };

};

/* Interface declarations.  */
[
  uuid(0C0E4080-9081-11D2-BEEC-0060082F2054),
  version(1.0)
]
interface INSNetSourceCreator : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Initialize (void);
  HRESULT __stdcall CreateNetSource (
    [in] LPWSTR pszStreamName,
    [in] interface IMediaStreamMonitor *pMonitor,
    [in] UCHAR *pData,
    [in] interface IWMSContext *pUserContext,
    [in] interface INSNetSourceCreatorCallback *pCallback,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall GetNetSourceProperties (
    [in] LPWSTR pszStreamName,
    [out] interface IWMSNamespaceNode **ppPropertiesNode
  );
  HRESULT __stdcall GetNetSourceSharedNamespace (
    [out] interface IWMSNamespaceNode **ppSharedNamespace
  );
  HRESULT __stdcall GetNetSourceAdminInterface (
    [in] LPWSTR pszStreamName,
    [out] VARIANT *pVal
  );
  HRESULT __stdcall GetNumProtocolsSupported (
    [out] UINT *pcProtocols
  );
  HRESULT __stdcall GetProtocolName (
    [in] UINT dwProtocolNum,
    [out] USHORT *pwszProtocolName,
    [in out] USHORT *pcchProtocolName
  );
  HRESULT __stdcall Shutdown (void);
};
[
  uuid(D7A97310-C082-11D2-B263-006097D2E41E),
  version(1.0)
]
interface IMediaStreamMonitor : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnStreamOpen (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall OnStreamClose (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall OnStreamStart (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall OnStreamStop (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall OnStreamPause (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall OnStreamHeaderAvailable (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext,
    [in] interface INSSBuffer *pHeader,
    [in] interface IWMSContentDescriptionList *pContentDescription,
    [in] interface IWMSDataContainerVersion *pVersion
  );
  HRESULT __stdcall OnStreamSegmentAvailable (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext,
    [in] interface IWMSPacket *pSegment
  );
  HRESULT __stdcall OnStreamSegmentsAvailable (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext,
    [in] interface IWMSPacketList *pSegments
  );
  HRESULT __stdcall OnStreamUnsolicitedEvent (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] enum STREAMEVENT Event,
    [in] interface INSSBuffer *pBuffer,
    [in] IUnknown * pUnk
  );
  HRESULT __stdcall OnStreamSelect (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall OnStreamGetLinkBandwidth (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext,
    [in] UINT dwLinkBandwidth
  );
  HRESULT __stdcall OnStreamAcquireCredentials (
    [in] interface IMediaStream *pStream,
    [in] HRESULT hr,
    [in] ULONGLONG qwContext,
    [in] long fProxy,
    [in] LPWSTR pwszRealm,
    [in] LPWSTR pwszSite,
    [in] LPWSTR pwszUser,
    [in] LPWSTR pwszPassword,
    [in] UINT dwFlags
  );
};
[
  uuid(E391F620-C082-11D2-B263-006097D2E41E),
  version(1.0)
]
interface IMediaStream : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Open (
    [in] LPWSTR pszStreamName,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall Close (
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall RequestHeader (
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall Start (
    [in] struct STREAMPOS *pPos,
    [in] struct PLAYLISTPOS *pPLPos,
    [in] double Rate,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall Stop (
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall Pause (
    [in] long fSlowSkip,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall GetStreamProperties (
    [out] struct STREAMPROPERTIES **ppProperties
  );
  HRESULT __stdcall GetStreamName (
    [out] LPWSTR ppszName
  );
  HRESULT __stdcall GetProxyName (
    [out] LPWSTR ppszName
  );
  HRESULT __stdcall Shutdown (
    [in] long fBlock
  );
  HRESULT __stdcall IsAlive (
    [out] long *pfIsAlive
  );
  HRESULT __stdcall SelectStreams (
    [in] STREAM_SWITCH_ENTRY *pStreamEntries,
    [in] USHORT cStreamEntries,
    [in] USHORT wBandwidthLevel,
    [in] UINT dwSelectedBitrate,
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall SetPlayoutDelay (
    [in] UINT dwPlayoutDelay
  );
  HRESULT __stdcall SetAccelDuration (
    [in] UINT dwAccelDuration
  );
  HRESULT __stdcall SetEnableResends (
    [in] long fEnableResends
  );
  HRESULT __stdcall SetBandwidthLevels (
    [in] USHORT wBandwidthLevels
  );
  HRESULT __stdcall SetLoggingUrl (
    [in] LPWSTR pszLoggingUrl
  );
  HRESULT __stdcall SetMaxTime (
    [in] UINT dwMsTime,
    [in] long fAbsolute
  );
  HRESULT __stdcall SetParentWindow (
    [in] wireHWND hParentWindow
  );
  HRESULT __stdcall Rebuffer (void);
  HRESULT __stdcall SetMediaStreamMonitor (
    [in] interface IMediaStreamMonitor *pMonitor
  );
  HRESULT __stdcall GetLinkBandwidth (
    [in] ULONGLONG qwContext
  );
  HRESULT __stdcall SetLinkBandwidth (
    [in] UINT dwLinkBandwidth
  );
  HRESULT __stdcall GetMaxNetPacketSize (
    [out] USHORT *pwMaxNetPacketSize
  );
  HRESULT __stdcall SetFormatSet (
    [in] interface IAsfFormatSet *pFormatSet
  );
  HRESULT __stdcall SetUserCredentials (
    [in] HRESULT hrCredentials,
    [in] ULONGLONG qwContext,
    [in] long fProxy,
    [in] LPWSTR pwszRealm,
    [in] LPWSTR pwszSite,
    [in] UCHAR *pbUser,
    [in] UINT cbUser,
    [in] UCHAR *pbPassword,
    [in] UINT cbPassword,
    [in] UINT dwFlags
  );
  HRESULT __stdcall SetLogClientID (
    [in] LPWSTR pwszLogClientID
  );
  HRESULT __stdcall SetResult (
    [in] enum STREAMREQUEST req,
    [in] HRESULT hrReq
  );
  HRESULT __stdcall SetReferrerURL (
    [in] LPWSTR pwszReferrerURL
  );
  HRESULT __stdcall SetLanguage (
    [in] LPWSTR pwszLanguage
  );
};
[
  uuid(284237D0-73FC-11D0-B724-00AA00B4E220),
  version(1.0)
]
interface IAsfFormatSet : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall AddEncodedFormat (
    [in] LPSTR pszHeader
  );
  HRESULT __stdcall FindFormat (
    [in] UINT dwStreamKey,
    [out] UCHAR *pHeader,
    [in out] UINT *pcbHeader
  );
  HRESULT __stdcall FindAnyFormat (
    [out] UINT *pdwStreamKey,
    [out] UINT *pcbHeader
  );
  HRESULT __stdcall GetDefaultEccSpan (
    [out] UINT *pdwEccSpan
  );
  HRESULT __stdcall SetDefaultEccSpan (
    [in] UINT dwEccSpan
  );
  HRESULT __stdcall GetLinkBandwidth (
    [out] UINT *pdwLinkBandwidth
  );
  HRESULT __stdcall SetLinkBandwidth (
    [in] UINT dwLinkBandwidth
  );
};
[
  uuid(E1CD3524-03D7-11D2-9EED-006097D2D7CF),
  version(1.0),
  helpstring("Provides methods for managing a buffer.")
]
interface INSSBuffer : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetLength (
    [out] UINT *pdwLength
  );
  HRESULT __stdcall SetLength (
    [in] UINT dwLength
  );
  HRESULT __stdcall GetMaxLength (
    [out] UINT *pdwLength
  );
  HRESULT __stdcall GetBuffer (
    [out] UCHAR *ppbBuffer
  );
  HRESULT __stdcall GetBufferAndLength (
    [out] UCHAR *ppbBuffer,
    [out] UINT *pdwLength
  );
};
[
  uuid(105D6F73-6DF0-11D2-9F14-006097D2D7CF),
  version(1.0),
  helpstring("Contains a collection of content description contexts for different languages.")
]
interface IWMSContentDescriptionList : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetDescriptionCount (
    [out] UINT *pdwNumDescriptions
  );
  HRESULT __stdcall GetIndexedDescription (
    [in] UINT dwDescriptionNum,
    [out] LPWSTR pstrLanguage,
    [out] interface IWMSContext **ppDescription
  );
  HRESULT __stdcall GetDescriptionInLanguage (
    [in] LPWSTR pstrLanguage,
    [out] interface IWMSContext **ppDescription
  );
  HRESULT __stdcall AppendDescription (
    [in] LPWSTR pstrLanguage,
    [in] interface IWMSContext *pDescription
  );
  HRESULT __stdcall RemoveAllDescriptions (void);
  HRESULT __stdcall GetPlaylistGenid (
    UINT *pdwPlaylistGenerationId
  );
  HRESULT __stdcall SetPlaylistGenid (
    UINT dwPlaylistGenerationId
  );
  HRESULT __stdcall SetValueOnAllDescriptions (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] VARIANT Value,
    [in] long lOptions
  );
  HRESULT __stdcall RemoveValueFromAllDescriptions (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] long lOptions
  );
};
[
  uuid(4F1A1421-5CD5-11D2-9F05-006097D2D7CF),
  helpstring("Provides methods for managing a collection of properties for a particular context.")
]
interface IWMSContext : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetLongValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] long lValue,
    [in] long lOptions
  );
  HRESULT __stdcall SetStringValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] LPWSTR pstrValue,
    [in] long lOptions
  );
  HRESULT __stdcall SetIUnknownValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] IUnknown * pValue,
    [in] long lOptions
  );
  HRESULT __stdcall SetQwordValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] CY qwValue,
    [in] long lOptions
  );
  HRESULT __stdcall SetDateValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] DATE dateValue,
    [in] long lOptions
  );
  HRESULT __stdcall SetArrayValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] BSTR psaValue[],
    [in] long lOptions
  );
  HRESULT __stdcall GetLongValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] long *plValue,
    [in] long lOptions
  );
  HRESULT __stdcall GetStringValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] LPWSTR pstrValue,
    [in] long lOptions
  );
  HRESULT __stdcall GetIUnknownValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] IUnknown **pValue,
    [in] long lOptions
  );
  HRESULT __stdcall GetQwordValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] CY *pqwValue,
    [in] long lOptions
  );
  HRESULT __stdcall GetDateValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] DATE *pdateValue,
    [in] long lOptions
  );
  HRESULT __stdcall GetArrayValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] BSTR ppsaValue[]*,
    [in] long lOptions
  );
  HRESULT __stdcall SetValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] VARIANT Value,
    [in] long lOptions
  );
  HRESULT __stdcall GetValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [out] VARIANT *pValue,
    [in] long lOptions
  );
  HRESULT __stdcall GetValueCount (
    [out] long *pCount
  );
  HRESULT __stdcall GetIndexedValue (
    [in] long lIndex,
    [out] LPWSTR pstrName,
    [out] long *plNameHint,
    [out] VARIANT *pValue,
    [out] long *pdwResultOptions,
    [in] long lOptions
  );
  HRESULT __stdcall RemoveValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] long lOptions
  );
  HRESULT __stdcall RemoveAllValues (void);
  HRESULT __stdcall GetContextType (
    [out] enum WMS_CONTEXT_TYPE *pType
  );
  HRESULT __stdcall GetAndQueryIUnknownValue (
    [in] LPWSTR pstrName,
    [in] long lNameHint,
    [in] struct GUID *riid,
    [out] IUnknown **pResult,
    [in] long lOptions
  );
  HRESULT __stdcall CopyValues (
    [in] interface IWMSContext *pDest,
    [in] LPWSTR pstrName,
    [in] long *lNameHint,
    [in] long lNames
  );
};
[
  uuid(3AE75C14-2B3A-11D2-9EF7-006097D2D7CF),
  version(1.0),
  helpstring("Provides methods for retrieving content version information.")
]
interface IWMSDataContainerVersion : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetLastModifiedTime (
    [out] DATE *pdateLastModifiedTime
  );
  HRESULT __stdcall SetLastModifiedTime (
    [in] DATE dateLastModifiedTime
  );
  HRESULT __stdcall GetExpirationTime (
    [out] DATE *pdateExpirationTime
  );
  HRESULT __stdcall SetExpirationTime (
    [in] DATE dateExpirationTime
  );
  HRESULT __stdcall GetCacheFlags (
    [out] long *plFlags
  );
  HRESULT __stdcall SetCacheFlags (
    [in] long lFlags
  );
  HRESULT __stdcall GetContentSize (
    [out] long *plContentSizeLow,
    [out] long *plContentSizeHigh
  );
  HRESULT __stdcall SetContentSize (
    [in] long lContentSizeLow,
    [in] long lContentSizeHigh
  );
  HRESULT __stdcall GetEntityTagCount (
    [out] long *plNumEntityTags
  );
  HRESULT __stdcall GetEntityTag (
    [in] long lTagNum,
    [out] BSTR *pszEntityTag
  );
  HRESULT __stdcall SetEntityTag (
    [in] BSTR szEntityTag
  );
  HRESULT __stdcall Compare (
    [in] interface IWMSDataContainerVersion *pVersion,
    [out] WINBOOL *pvfEqual
  );
};
[
  uuid(3309C901-10A4-11D2-9EEE-006097D2D7CF),
  version(1.0),
  helpstring("Contains methods for managing the buffers, attributes, and headers associated with a packet.")
]
interface IWMSPacket : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetAllBuffers (
    [in] UINT dwMaxNumBuffers,
    [out] WMSBUFFERDESC *pDesc,
    [out] UINT *pdwNumBuffers,
    [in] UINT dwExFlags
  );
  HRESULT __stdcall GetBuffer (
    [in] UINT dwBufferNum,
    [out] interface INSSBuffer **ppBuffer,
    [out] UINT *pdwBufferOffset,
    [out] UINT *pdwBufferLen,
    [out] USHORT *pwFlags,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall InsertBuffer (
    [in] UINT dwBufferNum,
    [in] interface INSSBuffer *pBuffer,
    [in] UINT dwBufferOffset,
    [in] UINT dwBufferLen,
    [in] USHORT wFlags,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall RemoveBuffer (
    [in] UINT dwBufferNum
  );
  HRESULT __stdcall RemoveAllBuffers (void);
  HRESULT __stdcall GetAttribute (
    [in] UINT dwValueName,
    [out] UINT *pdwValue
  );
  HRESULT __stdcall SetAttribute (
    [in] UINT dwValueName,
    [in] UINT dwValue
  );
  HRESULT __stdcall GetExtendedAttribute (
    [in] UINT dwValueName,
    [out] VARIANT *pVariantValue
  );
  HRESULT __stdcall GetExtendedAttributeByIndex (
    [in] UINT dwIndex,
    [out] UINT *pdwValueName,
    [out] VARIANT *pVariantValue
  );
  HRESULT __stdcall SetExtendedAttribute (
    [in] UINT dwValueName,
    [in] VARIANT VariantValue
  );
  HRESULT __stdcall GetExtendedAttributeCount (
    [out] UINT *pdwAttrs
  );
  HRESULT __stdcall CopyAttributes (
    [in] interface IWMSPacket *pDest,
    [in opt] UINT *pdwAttrNames = (UINT) 201326592,
    [in opt] UINT dwNumAttr = (UINT) 201326592,
    [in opt] long fCopyExtAttr = (int) 201326592
  );
  HRESULT __stdcall AppendHeader (
    [in] interface IWMSBufferAllocator *pAlloc,
    [in] UINT dwHeaderLen,
    [in] UCHAR *pbHeader
  );
};
[
  uuid(61103CA4-2033-11D2-9EF1-006097D2D7CF),
  version(1.0),
  helpstring("Provides methods for allocating a buffer.")
]
interface IWMSBufferAllocator : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall AllocateBuffer (
    [in] UINT dwMaxBufferSize,
    [out] interface INSSBuffer **ppBuffer
  );
  HRESULT __stdcall AllocatePageSizeBuffer (
    [in] UINT dwMaxBufferSize,
    [out] interface INSSBuffer **ppBuffer
  );
};
[
  uuid(3309C902-10A4-11D2-9EEE-006097D2D7CF),
  version(1.0),
  helpstring("Contains methods for managing the packets, attributes, and buffers associated with a packet list.")
]
interface IWMSPacketList : IWMSBufferAllocator
{
  [id(1610743808)]
  HRESULT __stdcall GetPacketCount (
    [out] UINT *pdwNumPackets
  );
  HRESULT __stdcall GetPacket (
    [in] UINT dwPacketNum,
    [out] interface IWMSPacket **ppPacket,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall GetAllPackets (
    [in] UINT dwFirstPacket,
    [in] UINT dwMaxNumPackets,
    [out] WMSPACKETDESC *pPacketDesc,
    [out] interface IWMSPacket **ppPacket,
    [out] UINT *pdwDescNum,
    [in] UINT dwExFlags
  );
  HRESULT __stdcall InsertPacket (
    [in] UINT dwPacketNum,
    [in] interface IWMSPacket *pPacket,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall AppendPacket (
    [in] interface IWMSPacket *pPacket,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall RemovePacket (
    [in] UINT dwPacketNum
  );
  HRESULT __stdcall RemoveAllPackets (
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall GetAttribute (
    [in] UINT dwValueName,
    [in] UINT *pdwValue
  );
  HRESULT __stdcall SetAttribute (
    [in] UINT dwValueName,
    [in] UINT dwValue
  );
  HRESULT __stdcall GetStreamSignalParam (
    [out] VARIANT *pParameter
  );
  HRESULT __stdcall SetStreamSignalParam (
    [in] VARIANT *pParameter
  );
  HRESULT __stdcall GetPacketParser (
    [out] interface IWMSPacketParser **ppSource,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall SetPacketParser (
    [in] interface IWMSPacketParser *pSource
  );
  HRESULT __stdcall GetBuffer (
    [out] interface INSSBuffer **ppBuffer,
    [in opt] UINT dwExFlags = (UINT) 201326592
  );
  HRESULT __stdcall SetBuffer (
    [in] interface INSSBuffer *pBuffer
  );
  HRESULT __stdcall SetCompletionCallback (
    [in] interface IWMSPacketListCallback *pCallback
  );
  HRESULT __stdcall GetCompletionCallback (
    [out] interface IWMSPacketListCallback **ppCallback
  );
  HRESULT __stdcall GetExtendedAttribute (
    [in] UINT dwValueName,
    [out] VARIANT *pVariantValue
  );
  HRESULT __stdcall GetExtendedAttributeByIndex (
    [in] UINT dwIndex,
    [out] UINT *pdwValueName,
    [out] VARIANT *pVariantValue
  );
  HRESULT __stdcall SetExtendedAttribute (
    [in] UINT dwValueName,
    [in] VARIANT VariantValue
  );
  HRESULT __stdcall GetExtendedAttributeCount (
    [out] UINT *pdwAttrs
  );
  HRESULT __stdcall ReportStatus (
    [in] UINT dwStatus
  );
  HRESULT __stdcall ClonePacketList (
    [out] interface IWMSPacketList **ppClonedPacketList
  );
  HRESULT __stdcall AllocPacket (
    [out] interface IWMSPacket **ppPacket
  );
};
[
  uuid(8B59F7E1-5411-11D2-9EFF-006097D2D7CF),
  version(1.0),
  helpstring("Provides methods to manipulate individual packets.  This interface is implemented by a media parser plug-in.")
]
interface IWMSPacketParser : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall UpdatePacket (
    [in] interface IWMSPacket *pPacket
  );
  HRESULT __stdcall CombinePackets (
    [in] UINT dwNumInputPackets,
    [in] interface IWMSPacket **pInputPacketArray,
    [in] interface IWMSPacketList *pPacketList,
    [in] UINT dwFlags
  );
};
[
  uuid(49C2A6F1-64B8-11D2-9F0E-006097D2D7CF),
  version(1.0),
  helpstring("Contains a method to respond to the IWMSPacketList::ReportStatus method call.")
]
interface IWMSPacketListCallback : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnReportPacketListStatus (
    [in] interface IWMSPacketList *pBuffer,
    [in] UINT dwStatus
  );
};
[
  uuid(741BFB30-908B-11D2-BEEC-0060082F2054),
  version(1.0)
]
interface INSNetSourceCreatorCallback : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnNetSourceCreated (
    [in] HRESULT hr,
    [in] interface IMediaStream *pNetSource,
    [in] ULONGLONG qwContext
  );
};
[
  uuid(916D43C6-63A6-11D2-8DCF-006097C9A2B2)
]
interface IWMSNamespaceNode : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall SetBinaryValue (
    [in] USHORT fFlags,
    [in] LPWSTR pszRelativeName,
    [in] UINT cbValue,
    [in] UCHAR *pbValue
  );
  HRESULT __stdcall SetBooleanValue (
    [in] USHORT fFlags,
    [in] LPWSTR pszRelativeName,
    [in] long fValue
  );
  HRESULT __stdcall SetInt32Value (
    [in] USHORT fFlags,
    [in] LPWSTR pszRelativeName,
    [in] UINT dwValue,
    [in opt] UCHAR *pbPerfSharedMem = (UCHAR) 0
  );
  HRESULT __stdcall IncrementInt32Value (
    [in] LPWSTR pszRelativeName,
    [in] UINT dwAmount
  );
  HRESULT __stdcall DecrementInt32Value (
    [in] LPWSTR pszRelativeName,
    [in] UINT dwAmount
  );
  HRESULT __stdcall SetInt64Value (
    [in] USHORT fFlags,
    [in] LPWSTR pszRelativeName,
    [in] LONGLONG Value,
    [in opt] UCHAR *pbPerfSharedMem = (UCHAR) 0
  );
  HRESULT __stdcall IncrementInt64Value (
    [in] LPWSTR pszRelativeName,
    [in] LONGLONG amount
  );
  HRESULT __stdcall DecrementInt64Value (
    [in] LPWSTR pszRelativeName,
    [in] LONGLONG amount
  );
  HRESULT __stdcall SetIUnknownValue (
    [in] LPWSTR pszRelativeName,
    [in] IUnknown * punkValue
  );
  HRESULT __stdcall SetStringValue (
    [in] USHORT fFlags,
    [in] LPWSTR pszRelativeName,
    [in] LPWSTR pszValue
  );
  HRESULT __stdcall ClearNodeValue (
    [in] LPWSTR pszRelativeName
  );
  HRESULT __stdcall GetBinaryValue (
    [in] LPWSTR pszRelativeName,
    [in out] UINT *pcbValue,
    [out] UCHAR *pbValue
  );
  HRESULT __stdcall GetBooleanValue (
    [in] LPWSTR pszRelativeName,
    [out] long *pfValue
  );
  HRESULT __stdcall GetBstrValue (
    [in] LPWSTR pszRelativeName,
    [out] BSTR *bstrValue
  );
  HRESULT __stdcall GetInt32Value (
    [in] LPWSTR pszRelativeName,
    [out] UINT *pdwValue
  );
  HRESULT __stdcall GetInt64Value (
    [in] LPWSTR pszRelativeName,
    [out] LONGLONG *pValue
  );
  HRESULT __stdcall GetIUnknownValue (
    [in] LPWSTR pszRelativeName,
    [out] IUnknown **ppunkValue
  );
  HRESULT __stdcall GetStringValue (
    [in] LPWSTR pszRelativeName,
    [in out] UINT *pcchValue,
    [out] LPWSTR pszValue
  );
  HRESULT __stdcall GetFlags (
    [out] USHORT *pwFlags
  );
  HRESULT __stdcall GetShortName (
    [in out] UINT *pcchShortNodeName,
    [out] LPWSTR pszShortNodeName
  );
  HRESULT __stdcall GetLongName (
    [in out] UINT *pcchLongNodeName,
    [out] LPWSTR pszLongNodeName
  );
  HRESULT __stdcall GetNodeByName (
    [in] LPWSTR pszRelativeName,
    [in] long fCreateIfDoesntExist,
    [out] interface IWMSNamespaceNode **ppNode
  );
  HRESULT __stdcall GetParentNode (
    [out] interface IWMSNamespaceNode **ppParentNode
  );
  HRESULT __stdcall GetRootNode (
    [out] interface IWMSNamespaceNode **ppRootNode
  );
  HRESULT __stdcall RenameNode (
    [in] LPWSTR pszRelativeName,
    [in] LPWSTR pszNewNodeName
  );
  HRESULT __stdcall RemoveNode (
    [in] LPWSTR pszRelativeName
  );
  HRESULT __stdcall Flush (void);
  HRESULT __stdcall GlobalWriteLock (void);
  HRESULT __stdcall GlobalWriteUnlock (void);
  HRESULT __stdcall CreateChildNode (
    [in] USHORT fFlags,
    [in] LPWSTR pszChildNodeName,
    [in] interface IWMSNamespaceNode *pInsertBeforeNode,
    [in] interface IWMSNamespaceNode *pNodeToCopy,
    [out] interface IWMSNamespaceNode **ppChildNode
  );
  HRESULT __stdcall GetChildNodeCount (
    [out] UINT *pdwCount
  );
  HRESULT __stdcall GetNodeInfoByIndex (
    [in] UINT dwNodeIndex,
    [out] USHORT *pwNodeFlags,
    [in out] UINT *pcchShortNodeName,
    [out] LPWSTR pszShortNodeName
  );
  HRESULT __stdcall GetNodeByIndex (
    [in] UINT dwNodeIndex,
    [out] interface IWMSNamespaceNode **ppChildNode
  );
  HRESULT __stdcall MoveBeforeNode (
    [in] interface IWMSNamespaceNode *pMoveBeforeNode
  );
  HRESULT __stdcall AdviseOnChange (
    [in] USHORT wOptions,
    [in] ULONGLONG qwContext,
    [in] interface IWMSNamespaceChangeCallback *pCallback,
    [out] ULONGLONG *pqwCookie
  );
  HRESULT __stdcall UnadviseOnChange (
    [in] ULONGLONG qwCookie
  );
  HRESULT __stdcall ExportToFile (
    [in] LPWSTR pwszStartNode,
    [in] LPWSTR pwszFileName,
    [out] UINT *cbWritten
  );
  HRESULT __stdcall ExportToStream (
    [in] LPWSTR pwszStartNode,
    [in] interface IStream *pStream,
    [out] UINT *cbWritten
  );
  HRESULT __stdcall ImportFromFile (
    [in] LPWSTR pwszFileName,
    [in] long fInitializingServer
  );
  HRESULT __stdcall ImportFromStream (
    [in] interface IStream *pStream,
    [in] long fInitializingServer
  );
};
[
  uuid(916D43C8-63A6-11D2-8DCF-006097C9A2B2)
]
interface IWMSNamespaceChangeCallback : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnValueChanged (
    [in] interface IWMSNamespaceNode *pNotifyNode,
    [in] ULONGLONG qwContext,
    [in] interface IWMSNamespaceNode *pChangedValue,
    [in] WMS_NAMESPACE_CHANGE_TYPES changeType
  );
};
[
  uuid(0000000C-0000-0000-C000-000000000046)
]
interface IStream : ISequentialStream
{
  [id(1610743808)]
  HRESULT __stdcall RemoteSeek (
    [in] struct _LARGE_INTEGER dlibMove,
    [in] UINT dwOrigin,
    [out] struct _ULARGE_INTEGER *plibNewPosition
  );
  HRESULT __stdcall SetSize (
    [in] struct _ULARGE_INTEGER libNewSize
  );
  HRESULT __stdcall RemoteCopyTo (
    [in] interface IStream *pstm,
    [in] struct _ULARGE_INTEGER cb,
    [out] struct _ULARGE_INTEGER *pcbRead,
    [out] struct _ULARGE_INTEGER *pcbWritten
  );
  HRESULT __stdcall Commit (
    [in] UINT grfCommitFlags
  );
  HRESULT __stdcall Revert (void);
  HRESULT __stdcall LockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall UnlockRegion (
    [in] struct _ULARGE_INTEGER libOffset,
    [in] struct _ULARGE_INTEGER cb,
    [in] UINT dwLockType
  );
  HRESULT __stdcall Stat (
    [out] struct tagSTATSTG *pstatstg,
    [in] UINT grfStatFlag
  );
  HRESULT __stdcall Clone (
    [out] interface IStream **ppstm
  );
};
[
  uuid(0C733A30-2A1C-11CE-ADE5-00AA0044773D)
]
interface ISequentialStream : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteRead (
    [out] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbRead
  );
  HRESULT __stdcall RemoteWrite (
    [in] UCHAR *pv,
    [in] UINT cb,
    [out] UINT *pcbWritten
  );
};

