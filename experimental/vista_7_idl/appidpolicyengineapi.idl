/* Automated generated idl file <appidpolicyengineapilib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Union record forward declarations.  */
dispinterface IAppIdPolicyHandler;
dispinterface IAppIdMmcPolicyHandler;
dispinterface IAppIdPolicyHelper;

/* Union record forward declarations.  */
coclass AppIdPolicyHandler;
coclass AppIdMmcPolicyHandler;
coclass AppIdPolicyHelper;

/* Enumeration declarations.  */
[
  helpstring("FileType")
]
enum __MIDL___MIDL_itf_appidpolicyengineapi_0000_0000_0001
{
  FILE_TYPE_NOT_SUPPORTED = (int) 201326592,
  FILE_TYPE_EXE = (int) 201326593,
  FILE_TYPE_DLL = (int) 201326594,
  FILE_TYPE_WINDOWS_INSTALLER = (int) 201326595,
  FILE_TYPE_SCRIPT = (int) 201326596
};

/* Type definitions.  */
[
  helpstring("FileType")
]
typedef enum __MIDL___MIDL_itf_appidpolicyengineapi_0000_0000_0001 FILE_TYPE;

[
  uuid(85C3F8F7-CFCE-4259-87FF-CAB1F4521F6E),
  version(1.0),
  helpstring("AppIdPolicyEngineApi 1.0 Type Library")
]
library appidpolicyengineapilib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(F1ED7D4C-F863-4DE6-A1CA-7253EFDEE1F3),
     helpstring("AppIdPolicyHandler Class"),
     cancreate
   ]
   coclass AppIdPolicyHandler
   {
     dispinterface IAppIdPolicyHandler;
   };
   [
     uuid(5971EC44-072A-41B7-8E67-D9E045CC196D),
     helpstring("AppIdMmcPolicyHandler Class"),
     cancreate
   ]
   coclass AppIdMmcPolicyHandler
   {
     dispinterface IAppIdMmcPolicyHandler;
   };
   [
     uuid(0AEA3667-1039-43FF-8D21-B1A162090671),
     helpstring("AppIdPolicyHelper Class"),
     cancreate
   ]
   coclass AppIdPolicyHelper
   {
     dispinterface IAppIdPolicyHelper;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(B6FEA19E-32DD-4367-B5B7-2F5DA140E87D),
     helpstring("IAppIdPolicyHandler Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IAppIdPolicyHandler : IDispatch
   {
     [id(1)]
     HRESULT __stdcall SetPolicy (
       [in] BSTR bstrLdapPath,
       [in] BSTR bstrXmlPolicy
     );
     HRESULT __stdcall GetPolicy (
       [in] BSTR bstrLdapPath,
       [out retval] BSTR *pbstrXmlPolicy
     );
     HRESULT __stdcall GetEffectivePolicy (
       [out retval] BSTR *pbstrXmlPolicy
     );
     HRESULT __stdcall IsFileAllowed (
       [in] BSTR bstrXmlPolicy,
       [in] BSTR bstrFilePath,
       [in] BSTR bstrUserSid,
       [out] struct GUID *pguidResponsibleRuleId,
       [out retval] long *pbStatus
     );
   };
   [
     uuid(B780009A-2622-46E4-A23C-33E8D0990B27),
     helpstring("IAppIdMmcPolicyHandler Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IAppIdMmcPolicyHandler : IDispatch
   {
     [id(1)]
     HRESULT __stdcall Register (
       [in] IUnknown * pGPEInformation,
       [out retval] struct GUID *pguidClientId
     );
     HRESULT __stdcall Unregister (
       [in] struct GUID guidClientId
     );
     HRESULT __stdcall SetPolicy (
       [in] struct GUID guidClientId,
       [in] BSTR bstrXmlPolicy
     );
     HRESULT __stdcall GetPolicy (
       [in] struct GUID guidClientId,
       [out retval] BSTR *pbstrXmlPolicy
     );
   };
   [
     uuid(D500522D-465B-4C83-8008-00C4EC90A859),
     helpstring("IAppIdPolicyHelper Interface"),
     dual,
     nonextensible,
     oleautomation,
     dispatchable
   ]
   dispinterface IAppIdPolicyHelper : IDispatch
   {
     [id(1)]
     HRESULT __stdcall GetFileType (
       [in] BSTR bstrFilePath,
       [out retval] FILE_TYPE *peFileType
     );
     HRESULT __stdcall GetFileRuleCollection (
       [in] FILE_TYPE eFileType,
       [out retval] BSTR *pbstrRuleCollection
     );
     HRESULT __stdcall GetFileExtensions (
       [in] FILE_TYPE eFileType,
       [out retval] BSTR *pbstrFileExtesnions
     );
     HRESULT __stdcall CalculateFileHash (
       [in] BSTR bstrFilePath,
       [out retval] UCHAR ppsabHashData[]*
     );
     HRESULT __stdcall CalculateFilePublisher (
       [in] BSTR bstrFilePath,
       [out] BSTR *pbstrPublisherName,
       [out] BSTR *pbstrProductName,
       [out] BSTR *pbstrBinaryName,
       [out] ULONGLONG *pulBinaryVersion
     );
     HRESULT __stdcall NormalizeFilePath (
       [in] BSTR bstrFilePath,
       [out retval] BSTR *pbstrNormalizedFilePath
     );
     HRESULT __stdcall EncodeFilePublisherInformation (
       [in] BSTR bstrInformation,
       [in] long bIngoreWildCharacters,
       [out retval] BSTR *pbstrEncodedInformation
     );
     HRESULT __stdcall DecodeFilePublisherInformation (
       [in] BSTR bstrInformation,
       [out retval] BSTR *pbstrDecodedInformation
     );
     HRESULT __stdcall CompileRule (
       [in] BSTR bstrXmlRule,
       [out retval] BSTR *pbstrCompiledRule
     );
   };

};

