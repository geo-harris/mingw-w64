/* Automated generated idl file <netconlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface INetConnection;

/* Structure forward declarations.  */
struct tagNETCON_PROPERTIES;

/* Union record forward declarations.  */
dispinterface INetSharingManager;
dispinterface INetSharingPublicConnectionCollection;
dispinterface INetSharingPrivateConnectionCollection;
dispinterface INetSharingConfiguration;
dispinterface INetSharingPortMappingCollection;
dispinterface INetSharingPortMapping;
dispinterface INetSharingPortMappingProps;
dispinterface INetSharingEveryConnectionCollection;
dispinterface INetConnectionProps;

/* Union record forward declarations.  */
coclass NetSharingManager;

/* Enumeration declarations.  */
enum tagSHARINGCONNECTION_ENUM_FLAGS
{
  ICSSC_DEFAULT = (int) 201326592,
  ICSSC_ENABLED = (int) 201326593
};
enum tagNETCON_STATUS
{
  NCS_DISCONNECTED = (int) 201326592,
  NCS_CONNECTING = (int) 201326593,
  NCS_CONNECTED = (int) 201326594,
  NCS_DISCONNECTING = (int) 201326595,
  NCS_HARDWARE_NOT_PRESENT = (int) 201326596,
  NCS_HARDWARE_DISABLED = (int) 201326597,
  NCS_HARDWARE_MALFUNCTION = (int) 201326598,
  NCS_MEDIA_DISCONNECTED = (int) 201326599,
  NCS_AUTHENTICATING = (int) 201326600,
  NCS_AUTHENTICATION_SUCCEEDED = (int) 201326601,
  NCS_AUTHENTICATION_FAILED = (int) 201326602,
  NCS_INVALID_ADDRESS = (int) 201326603,
  NCS_CREDENTIALS_REQUIRED = (int) 201326604
};
enum tagNETCON_MEDIATYPE
{
  NCM_NONE = (int) 201326592,
  NCM_DIRECT = (int) 201326593,
  NCM_ISDN = (int) 201326594,
  NCM_LAN = (int) 201326595,
  NCM_PHONE = (int) 201326596,
  NCM_TUNNEL = (int) 201326597,
  NCM_PPPOE = (int) 201326598,
  NCM_BRIDGE = (int) 201326599,
  NCM_SHAREDACCESSHOST_LAN = (int) 201326600,
  NCM_SHAREDACCESSHOST_RAS = (int) 201326601
};
enum tagSHARINGCONNECTIONTYPE
{
  ICSSHARINGTYPE_PUBLIC = (int) 201326592,
  ICSSHARINGTYPE_PRIVATE = (int) 201326593
};
enum tagICS_TARGETTYPE
{
  ICSTT_NAME = (int) 201326592,
  ICSTT_IPADDRESS = (int) 201326593
};

/* Structure/union declarations.  */
struct tagNETCON_PROPERTIES
{
  struct GUID guidId;
  LPWSTR pszwName;
  LPWSTR pszwDeviceName;
  enum tagNETCON_STATUS Status;
  enum tagNETCON_MEDIATYPE MediaType;
  UINT dwCharacter;
  struct GUID clsidThisObject;
  struct GUID clsidUiObject;
};

[
  uuid(43E734CA-043D-4A70-9A2C-A8F254063D91),
  version(1.0),
  helpstring("NetCon 1.0 Type Library")
]
library netconlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(5C63C1AD-3956-4FF8-8486-40034758315B),
     helpstring("NetSharingManager Class"),
     cancreate
   ]
   coclass NetSharingManager
   {
     dispinterface INetSharingManager;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(C08956B7-1CD3-11D1-B1C5-00805FC1270E),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingManager : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall SharingInstalled (
       [out retval] WINBOOL *pbInstalled
     );
     [propget]
     HRESULT __stdcall EnumPublicConnections (
       [in] enum tagSHARINGCONNECTION_ENUM_FLAGS Flags,
       [out retval] dispinterface INetSharingPublicConnectionCollection **ppColl
     );
     [propget]
     HRESULT __stdcall EnumPrivateConnections (
       [in] enum tagSHARINGCONNECTION_ENUM_FLAGS Flags,
       [out retval] dispinterface INetSharingPrivateConnectionCollection **ppColl
     );
     [id(6), propget]
     HRESULT __stdcall INetSharingConfigurationForINetConnection (
       [in] interface INetConnection *pNetConnection,
       [out retval] dispinterface INetSharingConfiguration **ppNetSharingConfiguration
     );
     [propget]
     HRESULT __stdcall EnumEveryConnection (
       [out retval] dispinterface INetSharingEveryConnectionCollection **ppColl
     );
     [propget]
     HRESULT __stdcall NetConnectionProps (
       [in] interface INetConnection *pNetConnection,
       [out retval] dispinterface INetConnectionProps **ppProps
     );
   };
   [
     uuid(7D7A6355-F372-4971-A149-BFC927BE762A),
     helpstring("INetSharingPublicConnectionCollection Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingPublicConnectionCollection : IDispatch
   {
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pVal
     );
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *pVal
     );
   };
   [
     uuid(38AE69E0-4409-402A-A2CB-E965C727F840),
     helpstring("INetSharingPrivateConnectionCollection Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingPrivateConnectionCollection : IDispatch
   {
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pVal
     );
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *pVal
     );
   };
   [
     uuid(C08956B6-1CD3-11D1-B1C5-00805FC1270E),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingConfiguration : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall SharingEnabled (
       [out retval] WINBOOL *pbEnabled
     );
     [propget]
     HRESULT __stdcall SharingConnectionType (
       [out retval] enum tagSHARINGCONNECTIONTYPE *pType
     );
     HRESULT __stdcall DisableSharing (void);
     HRESULT __stdcall EnableSharing (
       [in] enum tagSHARINGCONNECTIONTYPE Type
     );
     [propget]
     HRESULT __stdcall InternetFirewallEnabled (
       [out retval] WINBOOL *pbEnabled
     );
     HRESULT __stdcall DisableInternetFirewall (void);
     HRESULT __stdcall EnableInternetFirewall (void);
     [propget]
     HRESULT __stdcall EnumPortMappings (
       [in] enum tagSHARINGCONNECTION_ENUM_FLAGS Flags,
       [out retval] dispinterface INetSharingPortMappingCollection **ppColl
     );
     HRESULT __stdcall AddPortMapping (
       [in] BSTR bstrName,
       [in] UCHAR ucIPProtocol,
       [in] USHORT usExternalPort,
       [in] USHORT usInternalPort,
       [in] UINT dwOptions,
       [in] BSTR bstrTargetNameOrIPAddress,
       [in] enum tagICS_TARGETTYPE eTargetType,
       [out retval] dispinterface INetSharingPortMapping **ppMapping
     );
     HRESULT __stdcall RemovePortMapping (
       [in] dispinterface INetSharingPortMapping *pMapping
     );
   };
   [
     uuid(02E4A2DE-DA20-4E34-89C8-AC22275A010B),
     helpstring("INetSharingPortMappingCollection Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingPortMappingCollection : IDispatch
   {
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pVal
     );
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *pVal
     );
   };
   [
     uuid(C08956B1-1CD3-11D1-B1C5-00805FC1270E),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingPortMapping : IDispatch
   {
     [id(1)]
     HRESULT __stdcall Disable (void);
     HRESULT __stdcall Enable (void);
     [propget]
     HRESULT __stdcall Properties (
       [out retval] dispinterface INetSharingPortMappingProps **ppNSPMP
     );
     HRESULT __stdcall Delete (void);
   };
   [
     uuid(24B7E9B5-E38F-4685-851B-00892CF5F940),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingPortMappingProps : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrName
     );
     [propget]
     HRESULT __stdcall IPProtocol (
       [out retval] UCHAR *pucIPProt
     );
     [propget]
     HRESULT __stdcall ExternalPort (
       [out retval] long *pusPort
     );
     [propget]
     HRESULT __stdcall InternalPort (
       [out retval] long *pusPort
     );
     [propget]
     HRESULT __stdcall Options (
       [out retval] long *pdwOptions
     );
     [propget]
     HRESULT __stdcall TargetName (
       [out retval] BSTR *pbstrTargetName
     );
     [propget]
     HRESULT __stdcall TargetIPAddress (
       [out retval] BSTR *pbstrTargetIPAddress
     );
     [propget]
     HRESULT __stdcall Enabled (
       [out retval] WINBOOL *pbool
     );
   };
   [
     uuid(33C4643C-7811-46FA-A89A-768597BD7223),
     helpstring("INetSharingEveryConnectionCollection Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetSharingEveryConnectionCollection : IDispatch
   {
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pVal
     );
     [id(1), propget]
     HRESULT __stdcall Count (
       [out retval] long *pVal
     );
   };
   [
     uuid(F4277C95-CE5B-463D-8167-5662D9BCAA72),
     helpstring("INetConnectionProps Interface"),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface INetConnectionProps : IDispatch
   {
     [id(1), propget]
     HRESULT __stdcall Guid (
       [out retval] BSTR *pbstrGuid
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrName
     );
     [propget]
     HRESULT __stdcall DeviceName (
       [out retval] BSTR *pbstrDeviceName
     );
     [propget]
     HRESULT __stdcall Status (
       [out retval] enum tagNETCON_STATUS *pStatus
     );
     [propget]
     HRESULT __stdcall MediaType (
       [out retval] enum tagNETCON_MEDIATYPE *pMediaType
     );
     [propget]
     HRESULT __stdcall Characteristics (
       [out retval] UINT *pdwFlags
     );
   };

};

/* Interface declarations.  */
[
  uuid(C08956A1-1CD3-11D1-B1C5-00805FC1270E)
]
interface INetConnection : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall Connect (void);
  HRESULT __stdcall Disconnect (void);
  HRESULT __stdcall Delete (void);
  HRESULT __stdcall Duplicate (
    [in] LPWSTR pszwDuplicateName,
    [out] interface INetConnection **ppCon
  );
  HRESULT __stdcall GetProperties (
    [out] struct tagNETCON_PROPERTIES **ppProps
  );
  HRESULT __stdcall GetUiObjectClassId (
    [out] struct GUID *pclsid
  );
  HRESULT __stdcall Rename (
    [in] LPWSTR pszwNewName
  );
};

