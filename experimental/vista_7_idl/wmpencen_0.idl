/* Automated generated idl file <wmencoderlib>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IWMEncFileTransferSource;

/* Union record forward declarations.  */
dispinterface IWMEncSource;
dispinterface IWMEncTransformCollection;
dispinterface IWMEncTransform;
dispinterface IWMEncDataViewCollection;
dispinterface IWMEncVideoSource;
dispinterface IWMEncNetConnectionStats;
dispinterface IWMEncOutputStats;
dispinterface IWMEncFileArchiveStats;
dispinterface IWMEncIndexerStats;
dispinterface IWMEncPostViewCollection;
dispinterface IWMEncBroadcast;
dispinterface IWMEncPushDistribution;
dispinterface IWMEncoder;
dispinterface IWMEncSourceGroupCollection;
dispinterface IWMEncSourceGroup;
dispinterface IWMEncProfile;
dispinterface IWMEncSourcePluginInfoManager;
dispinterface IWMEncPluginInfo;
dispinterface IWMEncTransformPluginInfoManager;
dispinterface IWMEncDisplayInfo;
dispinterface IWMEncAttributes;
dispinterface IWMEncFile;
dispinterface IWMEncStatistics;
dispinterface IWMEncProfileCollection;
dispinterface IWMEncoder2;
dispinterface IWMEncDeviceControlPluginInfoManager;
dispinterface IWMEncContentAnalyzer;
dispinterface IWMDRMContentAuthor;
dispinterface IWMDRMAttributes;
dispinterface IWMDRMProfile;
dispinterface IWMDRMProfileCollection;
dispinterface IWMEncWatermarkCollection;
dispinterface IWMEncFile2;
dispinterface IWMEncSourceGroup2;
dispinterface IWMEncDeviceControlCollection;
dispinterface IWMEncDeviceControl;
dispinterface IWMEncOutputStats2;
dispinterface IWMEncVideoSource2;
dispinterface IWMEncInputCollection;
dispinterface IWMEncAudioSource;
dispinterface IWMEncPushDistributionStats;
dispinterface IWMEncStatistics2;
dispinterface IWMEncAudienceObj;
dispinterface IWMEncFileSet;
dispinterface IWMEncNetConnectionStats2;
dispinterface _IWMEncoderEvents;
dispinterface _IWMEncBasicEditEvents;
dispinterface _IWMEncoderAppEvents;
dispinterface IWMEncBasicEdit;
dispinterface IWMEncProfile2;
dispinterface IWMEncStreamEdit;

/* Union record forward declarations.  */
coclass WMEncoder;
coclass WMEncBasicEdit;
coclass WMEncStreamEdit;
coclass WMEncProfile2;

/* Enumeration declarations.  */
[
  uuid(6FAC4EE6-2936-49F8-8B43-EF6C99A2556C),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_SOURCE_TYPE
{
  WMENC_AUDIO = (int) 201326593,
  WMENC_VIDEO = (int) 201326594,
  WMENC_SCRIPT = (int) 201326596,
  WMENC_FILETRANSFER = (int) 201326600
};
[
  uuid(CC58B614-2837-4FCB-8460-81C91BD25E72),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_CROPPING_MODE
{
  WMENC_CROPPING_ABSOLUTE = (int) 201326592
};
[
  uuid(246C1B73-97B4-4172-BB7C-BB1185E1BDD1),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_VIDEO_OPTIMIZATION
{
  WMENC_VIDEO_STANDARD = (int) 201326593,
  WMENC_VIDEO_DEINTERLACE = (int) 201326594,
  WMENC_VIDEO_INVERSETELECINE = (int) 201326595,
  WMENC_VIDEO_PROCESS_INTERLACED = (int) 201326596,
  WMENC_VIDEO_TELECINE_AUTO = (int) 201326608,
  WMENC_VIDEO_TELECINE_AA_TOP = (int) 201326624,
  WMENC_VIDEO_TELECINE_BB_TOP = (int) 201326640,
  WMENC_VIDEO_TELECINE_BC_TOP = (int) 201326656,
  WMENC_VIDEO_TELECINE_CD_TOP = (int) 201326672,
  WMENC_VIDEO_TELECINE_DD_TOP = (int) 201326688,
  WMENC_VIDEO_TELECINE_AA_BOTTOM = (int) 201326704,
  WMENC_VIDEO_TELECINE_BB_BOTTOM = (int) 201326720,
  WMENC_VIDEO_TELECINE_BC_BOTTOM = (int) 201326736,
  WMENC_VIDEO_TELECINE_CD_BOTTOM = (int) 201326752,
  WMENC_VIDEO_TELECINE_DD_BOTTOM = (int) 201326768,
  WMENC_VIDEO_FLIPPING_VERTICAL = (int) 201326848,
  WMENC_VIDEO_INTERLACED_AUTO = (int) 201330688,
  WMENC_VIDEO_INTERLACED_TOP_FIRST = (int) 201334784,
  WMENC_VIDEO_INTERLACED_BOTTOM_FIRST = (int) 201338880
};
[
  uuid(CEA07703-3938-4240-9184-E7509F0C1BC5),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_PIXELFORMAT_VIDEO
{
  WMENC_PIXELFORMAT_AUTO = (int) 201326593,
  WMENC_PIXELFORMAT_IYUV = (int) 1448433993,
  WMENC_PIXELFORMAT_I420 = (int) 808596553,
  WMENC_PIXELFORMAT_YV12 = (int) 842094169,
  WMENC_PIXELFORMAT_YUY2 = (int) 844715353,
  WMENC_PIXELFORMAT_UYVY = (int) 1498831189,
  WMENC_PIXELFORMAT_YVYU = (int) 1431918169,
  WMENC_PIXELFORMAT_YVU9 = (int) 961893977,
  WMENC_PIXELFORMAT_RGB24 = (int) -466162819,
  WMENC_PIXELFORMAT_RGB32 = (int) -466162818,
  WMENC_PIXELFORMAT_RGB555 = (int) -466162820,
  WMENC_PIXELFORMAT_RGB565 = (int) -466162821,
  WMENC_PIXELFORMAT_RGB8 = (int) -466162822,
  WMENC_PIXELFORMAT_RGB4 = (int) -466162823,
  WMENC_PIXELFORMAT_RGB1 = (int) -466162824
};
[
  uuid(9C98021C-F3D9-43DA-B974-FAF6D4789779),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_BROADCAST_PROTOCOL
{
  WMENC_PROTOCOL_HTTP = (int) 201326593,
  WMENC_PROTOCOL_PUSH_DISTRIBUTION = (int) 201326594
};
[
  uuid(BAA7BBD8-BB33-4C9D-A6AD-8F02688CAC61),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_ARCHIVE_TYPE
{
  WMENC_ARCHIVE_LOCAL = (int) 201326593
};
[
  uuid(28616B03-8C6B-43D9-A432-062D050BAF49),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_ARCHIVE_OPERATION
{
  WMENC_ARCHIVE_START = (int) 201326593,
  WMENC_ARCHIVE_STOP = (int) 201326594,
  WMENC_ARCHIVE_PAUSE = (int) 201326595
};
[
  uuid(59BACE83-919D-4C96-8E0D-5D01BF908BF8),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_AUDIOLEVEL_UNITS
{
  WMENC_AUDIOLEVEL_DB = (int) 201326593,
  WMENC_AUDIOLEVEL_LINEAR = (int) 201326594
};
[
  uuid(6F1A69F0-B4C8-44C6-A5FF-60753F39617D),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_PLUGIN_TYPE
{
  WMENC_PLUGIN_SOURCE = (int) 201326593,
  WMENC_PLUGIN_TRANSFORM = (int) 201326594,
  WMENC_PLUGIN_DEVICECONTROL = (int) 201326595
};
[
  uuid(E0319A38-6103-433F-AA95-B246DF385F8B),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_ENCODER_STATE
{
  WMENC_ENCODER_STARTING = (int) 201326593,
  WMENC_ENCODER_RUNNING = (int) 201326594,
  WMENC_ENCODER_PAUSED = (int) 201326595,
  WMENC_ENCODER_STOPPING = (int) 201326596,
  WMENC_ENCODER_STOPPED = (int) 201326597,
  WMENC_ENCODER_END_PREPROCESS = (int) 201326598,
  WMENC_ENCODER_PAUSING = (int) 201326599
};
[
  uuid(BBBFD01F-5C73-46D0-BF66-12B6B478F989),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_ARCHIVE_STATE
{
  WMENC_ARCHIVE_RUNNING = (int) 201326593,
  WMENC_ARCHIVE_PAUSED = (int) 201326594,
  WMENC_ARCHIVE_STOPPED = (int) 201326595
};
[
  uuid(4489B36B-9185-4D59-BF66-2259D62DDB03),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_INDEXER_STATE
{
  WMENC_INDEXER_RUNNING = (int) 201326593,
  WMENC_INDEXER_STOPPED = (int) 201326594
};
[
  uuid(E9F18119-FE15-437C-9E9D-FD43B3DF1AA1),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_INDEXER_OPERATION
{
  WMENC_INDEXER_STOP = (int) 201326593
};
[
  uuid(408E9F12-F5F0-4057-84E6-D9B1E443BEEB),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_VIDEOCOMPLEXITY
{
  WMENC_DEFAULT_COMPLEXITY = (int) -1,
  WMENC_COMPLEXITY_LEVEL0 = (int) 201326592,
  WMENC_COMPLEXITY_LEVEL20 = (int) 201326612,
  WMENC_COMPLEXITY_LEVEL40 = (int) 201326632,
  WMENC_COMPLEXITY_LEVEL50 = (int) 201326642,
  WMENC_COMPLEXITY_LEVEL60 = (int) 201326652,
  WMENC_COMPLEXITY_LEVEL80 = (int) 201326672,
  WMENC_COMPLEXITY_LEVEL100 = (int) 201326692
};
[
  uuid(2708F179-F93B-4135-BCE2-A0388E8EFF74),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_CONTENT_MODE
{
  WMENC_AUDIOCONTENT_NO_MODE = (int) 201326592,
  WMENC_AUDIOCONTENT_SPEECH_MODE = (int) 201326593,
  WMENC_AUDIOCONTENT_MIXED_MODE = (int) 201326594
};
[
  uuid(9776FD64-B38A-436D-A688-692192908EA2),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_SOURCE_STATE
{
  WMENC_SOURCE_START = (int) 201326593,
  WMENC_SOURCE_STOP = (int) 201326594,
  WMENC_SOURCE_PREPARE = (int) 201326595,
  WMENC_SOURCE_UNPREPARE = (int) 201326596,
  WMENC_START_FILETRANSFER = (int) 201326597,
  WMENC_STOP_FILETRANSFER = (int) 201326598
};
[
  uuid(6C861064-25AB-4D72-BC94-62D8FA78001A),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_DEVICECONTROL_STATE
{
  WMENC_DEVICECONTROL_PLAYING = (int) 201326593,
  WMENC_DEVICECONTROL_PAUSED = (int) 201326594,
  WMENC_DEVICECONTROL_STOPPED = (int) 201326595,
  WMENC_DEVICECONTROL_FASTFORWARDING = (int) 201326596,
  WMENC_DEVICECONTROL_REWINDING = (int) 201326597,
  WMENC_DEVICECONTROL_CUEING = (int) 201326598,
  WMENC_DEVICECONTROL_PREROLLING = (int) 201326599,
  WMENC_DEVICECONTROL_UNSTABLE = (int) 201326601,
  WMENC_DEVICECONTROL_EJECT = (int) 201326602,
  WMENC_DEVICECONTROL_VAR_FORWARD = (int) 201326603,
  WMENC_DEVICECONTROL_VAR_REVERSE = (int) 201326604,
  WMENC_DEVICECONTROL_ENDOFTAPE = (int) 201326605
};
[
  uuid(08ED5B3B-FD75-44E8-A693-9F5A9DD76978),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_BASICEDIT_STATE
{
  WMENC_BASICEDIT_RUNNING = (int) 201326593,
  WMENC_BASICEDIT_STOPPED = (int) 201326594
};
[
  uuid(A8AB8947-3BCD-4EFA-8647-BB2A92859630),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_PROFILE_COMPATIBILITY
{
  WMENC_ENCODER_V8 = (int) 201326592,
  WMENC_ENCODER_V9 = (int) 201326593
};
[
  uuid(DB56C3FB-B487-4C1D-A8C0-13B6C97D1264),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_PROFILE_VBR_MODE
{
  WMENC_PVM_NONE = (int) 201326593,
  WMENC_PVM_PEAK = (int) 201326594,
  WMENC_PVM_UNCONSTRAINED = (int) 201326595,
  WMENC_PVM_BITRATE_BASED = (int) 201326596
};
[
  uuid(0AF69DDB-FA48-40F1-ABC7-0AF925BEA972),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
enum WMENC_PROFILE_BROADCAST_MODE
{
  WMENC_PFM_CUSTOM = (int) 201326593,
  WMENC_PFM_NTSC = (int) 201326594,
  WMENC_PFM_PAL = (int) 201326595
};

/* Type definitions.  */
[
  uuid(EC7FE1D6-EB38-4147-BCA7-3D908A8EA915),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
typedef CY WMENC_LONGLONG;

[
  uuid(149E2513-F9F3-464D-88F2-A0715157F3D7),
  version(1.0),
  helpstring("Not Public.  Internal interface used by Windows Media Player.")
]
library wmencoderlib
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(52E4E90A-F4AF-460A-9E60-FDFB86C9DD5D),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     cancreate
   ]
   coclass WMEncoder
   {
     dispinterface IWMEncoder2;
     dispinterface _IWMEncoderEvents;
   };
   [
     uuid(F9F4D292-87F5-4E2D-98A1-590391932490),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     cancreate
   ]
   coclass WMEncBasicEdit
   {
     dispinterface IWMEncBasicEdit;
     dispinterface _IWMEncBasicEditEvents;
   };
   [
     uuid(1BF18D30-223C-4E0F-9074-C78C1256FD43),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     cancreate
   ]
   coclass WMEncStreamEdit
   {
     dispinterface IWMEncStreamEdit;
     dispinterface _IWMEncBasicEditEvents;
   };
   [
     uuid(BAA94581-C092-425C-B4D3-7B5EE0BAC3C4),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     cancreate
   ]
   coclass WMEncProfile2
   {
     dispinterface IWMEncProfile2;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(3458385A-CE80-4A3B-BE5A-6374C204E3FA),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncSource : IDispatch
   {
     [id(150), propget]
     HRESULT __stdcall Type (
       [out retval] enum WMENC_SOURCE_TYPE *enumType
     );
     HRESULT __stdcall SetInput (
       [in] BSTR bstrInput,
       [in opt] BSTR bstrScheme = L"",
       [in opt] BSTR bstrStreamName = L""
     );
     HRESULT __stdcall GetInput (
       [out] BSTR *bstrStreamName,
       [out] BSTR *bstrScheme,
       [out retval] BSTR *pbstrInput
     );
     [propput]
     HRESULT __stdcall Repeat (
       [in] WINBOOL argNo1
     );
     [id(153), propget]
     HRESULT __stdcall Repeat (
       [out retval] WINBOOL *pbRepeat
     );
     [propget]
     HRESULT __stdcall MarkIn (
       [out retval] long *plMarkIn
     );
     [id(154), propput]
     HRESULT __stdcall MarkIn (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall MarkOut (
       [out retval] long *plMarkOut
     );
     [id(155), propput]
     HRESULT __stdcall MarkOut (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall TransformCollection (
       [out retval] dispinterface IWMEncTransformCollection **ppTransformCollection
     );
     [id(160)]
     HRESULT __stdcall GetTransformPluginCount (
       [out] UINT *pdwCount
     );
     HRESULT __stdcall GetTransformPlugin (
       [in] UINT dwIndex,
       [out] IUnknown **ppUnkTransformPlugin
     );
     [id(157), propget]
     HRESULT __stdcall PreviewCollection (
       [out retval] dispinterface IWMEncDataViewCollection **ppDataViewCollection
     );
     [propget]
     HRESULT __stdcall PostviewCollection (
       [out retval] dispinterface IWMEncDataViewCollection **ppDataViewCollection
     );
     HRESULT __stdcall GetSourcePlugin (
       [out retval] IUnknown **ppUnkPlugin
     );
   };
   [
     uuid(27B06FE5-86D2-4A9D-97CB-772299819F29),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncTransformCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] dispinterface IWMEncTransform **ppTransform
     );
     [id(380)]
     HRESULT __stdcall Add (
       [out retval] dispinterface IWMEncTransform **ppTransform
     );
     HRESULT __stdcall Remove (
       [in] long lIndex
     );
     HRESULT __stdcall RemoveAll (void);
     HRESULT __stdcall Move (
       [in] long lMove,
       [in] long lInFrontOf
     );
   };
   [
     uuid(717C9416-06C3-449A-B030-9947146C2142),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncTransform : IDispatch
   {
     [id(384)]
     HRESULT __stdcall SetInput (
       [in] BSTR bstrInput,
       [in opt] BSTR bstrScheme = L"",
       [in opt] BSTR bstrInitData = L""
     );
     HRESULT __stdcall GetInput (
       [out] BSTR *pbstrScheme,
       [out] BSTR *pbstrInitData,
       [out retval] BSTR *pbstrInput
     );
     HRESULT __stdcall GetTransformPlugin (
       [out retval] IUnknown **ppUnkPlugin
     );
   };
   [
     uuid(0B18559A-1D1B-486F-A178-D3A0DC814B9E),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncDataViewCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out] IUnknown **ppDataView,
       [out retval] long *plStreamCookie
     );
     [id(170)]
     HRESULT __stdcall Add (
       [in] IUnknown * pDataView,
       [out retval] long *plStreamCookie
     );
     HRESULT __stdcall Remove (
       [in] long lStreamCookie
     );
     HRESULT __stdcall RemoveAll (void);
   };
   [
     uuid(DDB5A2A4-AF08-4942-90F3-D46C36DB7731),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncVideoSource : IWMEncSource
   {
     [id(164), propget]
     HRESULT __stdcall CroppingMode (
       [out retval] enum WMENC_CROPPING_MODE *penumCroppingMode
     );
     [id(164), propput]
     HRESULT __stdcall CroppingMode (
       [in] enum WMENC_CROPPING_MODE argNo1
     );
     [propget]
     HRESULT __stdcall CroppingLeftMargin (
       [out retval] long *plLeft
     );
     [id(165), propput]
     HRESULT __stdcall CroppingLeftMargin (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall CroppingTopMargin (
       [out retval] long *plTop
     );
     [id(166), propput]
     HRESULT __stdcall CroppingTopMargin (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall CroppingRightMargin (
       [out retval] long *plRight
     );
     [id(167), propput]
     HRESULT __stdcall CroppingRightMargin (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall CroppingBottomMargin (
       [out retval] long *plBottom
     );
     [id(168), propput]
     HRESULT __stdcall CroppingBottomMargin (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Optimization (
       [out retval] enum WMENC_VIDEO_OPTIMIZATION *penumOptimization
     );
     [id(169), propput]
     HRESULT __stdcall Optimization (
       [in] enum WMENC_VIDEO_OPTIMIZATION argNo1
     );
     [id(163), propget]
     HRESULT __stdcall PixelFormat (
       [out retval] enum WMENC_PIXELFORMAT_VIDEO *penumPixelFormat
     );
     [id(163), propput]
     HRESULT __stdcall PixelFormat (
       [in] enum WMENC_PIXELFORMAT_VIDEO argNo1
     );
   };
   [
     uuid(26A40BF9-F833-494F-A69C-B954C0BB7E63),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncNetConnectionStats : IDispatch
   {
     [id(1260), propget]
     HRESULT __stdcall ClientCount (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall ClientInfo (
       [in] long lIndex,
       [out] enum WMENC_BROADCAST_PROTOCOL *pProtocol,
       [out retval] BSTR *pbstrIP
     );
   };
   [
     uuid(9080AD4E-D4D6-4B85-A4CD-D918949AC7D9),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncOutputStats : IDispatch
   {
     [id(1270), propget]
     HRESULT __stdcall SampleCount (
       [out retval] WMENC_LONGLONG *pqwSampleCount
     );
     [propget]
     HRESULT __stdcall ByteCount (
       [out retval] WMENC_LONGLONG *pqwByteCount
     );
     [propget]
     HRESULT __stdcall DroppedSampleCount (
       [out retval] WMENC_LONGLONG *pqwDroppedSampleCount
     );
     [propget]
     HRESULT __stdcall DroppedByteCount (
       [out retval] WMENC_LONGLONG *pqwDroppedByteCount
     );
     [propget]
     HRESULT __stdcall CurrentBitrate (
       [out retval] long *plCurrentBitrate
     );
     [propget]
     HRESULT __stdcall AverageBitrate (
       [out retval] long *plAverageBitrate
     );
     [propget]
     HRESULT __stdcall ExpectedBitrate (
       [out retval] long *plExpectedBitrate
     );
     [propget]
     HRESULT __stdcall CurrentSampleRate (
       [out retval] long *plCurrentSampleRate
     );
     [propget]
     HRESULT __stdcall AverageSampleRate (
       [out retval] long *plAverageSampleRate
     );
     [propget]
     HRESULT __stdcall ExpectedSampleRate (
       [out retval] long *plExpectedSampleRate
     );
   };
   [
     uuid(7818F8EF-1C2A-4F73-B9F6-2F351C58527E),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncFileArchiveStats : IDispatch
   {
     [id(1280), propget]
     HRESULT __stdcall FileSize (
       [out retval] WMENC_LONGLONG *pqwOutputFileSize
     );
     [propget]
     HRESULT __stdcall FileDuration (
       [out retval] WMENC_LONGLONG *pqwOutputFileDuration
     );
   };
   [
     uuid(73647341-60CC-4D0A-B6F0-04D5BA7BBA52),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncIndexerStats : IDispatch
   {
     [id(1290), propget]
     HRESULT __stdcall FileCount (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall FileName (
       [in] long lIndex,
       [out retval] BSTR *pbstrFileName
     );
     [propget]
     HRESULT __stdcall PercentComplete (
       [out retval] long *plPercent
     );
   };
   [
     uuid(D110DABC-B68F-47CF-B045-47B2EBD7B396),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncPostViewCollection : IWMEncDataViewCollection
   {
     [id(173), propget]
     HRESULT __stdcall ViewBandwidth (
       [out retval] long *plBandwidth
     );
     [id(173), propput]
     HRESULT __stdcall ViewBandwidth (
       [in] long argNo1
     );
   };
   [
     uuid(3EC0A43F-5241-4960-9D6B-7400C9240AD8),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncBroadcast : IDispatch
   {
     [id(1200), propget]
     HRESULT __stdcall PortNumber (
       [in] enum WMENC_BROADCAST_PROTOCOL enumProtocol,
       [out retval] long *piPort
     );
     [id(1200), propput]
     HRESULT __stdcall PortNumber (
       [in] enum WMENC_BROADCAST_PROTOCOL enumProtocol,
       [in] long argNo2
     );
   };
   [
     uuid(2ECAAE47-DE28-4B25-B5ED-DA468CC6B058),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncPushDistribution : IWMEncBroadcast
   {
     [id(1210), propget]
     HRESULT __stdcall ServerName (
       [out retval] BSTR *pbstrServerName
     );
     [id(1210), propput]
     HRESULT __stdcall ServerName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall PublishingPoint (
       [out retval] BSTR *pbstrPublishingPoint
     );
     [id(1211), propput]
     HRESULT __stdcall PublishingPoint (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Template (
       [out retval] BSTR *pbstrTemplate
     );
     [id(1212), propput]
     HRESULT __stdcall Template (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall AutoRemovePublishingPoint (
       [out retval] WINBOOL *pbAutoRemove
     );
     [id(1213), propput]
     HRESULT __stdcall AutoRemovePublishingPoint (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall GenerateMulticastInfoFile (
       [in] BSTR bstrNSCFileName
     );
     HRESULT __stdcall GenerateAnnouncementFile (
       [in] BSTR bstrNSCURL,
       [in] BSTR bstrASXFileName
     );
   };
   [
     uuid(FB329611-55A5-40CB-B0EB-DE087430C40A),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncoder : IDispatch
   {
     [id(1128)]
     HRESULT __stdcall SetLocaleID (
       [in] long lLocaleID
     );
     [id(1101)]
     HRESULT __stdcall Load (
       [in] BSTR bstrFileName
     );
     HRESULT __stdcall Save (
       [in] BSTR bstrFileName
     );
     HRESULT __stdcall Start (void);
     HRESULT __stdcall Stop (void);
     [id(1129), propget]
     HRESULT __stdcall AutoStop (
       [out retval] WINBOOL *pbStop
     );
     [id(1129), propput]
     HRESULT __stdcall AutoStop (
       [in] WINBOOL argNo1
     );
     [id(1121)]
     HRESULT __stdcall Pause (void);
     [id(1123)]
     HRESULT __stdcall PrepareToEncode (
       WINBOOL bPrepare
     );
     [id(1125)]
     HRESULT __stdcall Reset (void);
     [id(1105)]
     HRESULT __stdcall Archive (
       [in] enum WMENC_ARCHIVE_TYPE enumArchiveType,
       [in] enum WMENC_ARCHIVE_OPERATION enumArchiveOp
     );
     HRESULT __stdcall SendScript (
       [in] short iIndex,
       [in] BSTR bstrType,
       [in] BSTR bstrData
     );
     [propget]
     HRESULT __stdcall EnableAutoArchive (
       [out retval] WINBOOL *pbEnableAutoArchive
     );
     [id(1107), propput]
     HRESULT __stdcall EnableAutoArchive (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall RecordingLevel (
       [in] short iIndex,
       [out retval] long *lLevel
     );
     [id(1108), propput]
     HRESULT __stdcall RecordingLevel (
       [in] short iIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall RecordingMute (
       [in] short iIndex,
       [out retval] WINBOOL *pbRecordMute
     );
     [id(1109), propput]
     HRESULT __stdcall RecordingMute (
       [in] short iIndex,
       [in] WINBOOL argNo2
     );
     [id(1134)]
     HRESULT __stdcall GetAudioLevel (
       [in] enum WMENC_AUDIOLEVEL_UNITS units,
       [in] short iIndex,
       [in out] long *plDuration,
       [out] double *pdLMin,
       [out] double *pdLAvg,
       [out] double *pdLMax,
       [out] double *pdRMin,
       [out] double *pdRAvg,
       [out] double *pdRMax
     );
     [id(1110), propget]
     HRESULT __stdcall SourceGroupCollection (
       [out retval] dispinterface IWMEncSourceGroupCollection **ppSourceGroupCollection
     );
     [id(1126), propget]
     HRESULT __stdcall SourcePluginInfoManager (
       [out retval] dispinterface IWMEncSourcePluginInfoManager **ppSourcePluginInfoManager
     );
     [propget]
     HRESULT __stdcall TransformPluginInfoManager (
       [out retval] dispinterface IWMEncTransformPluginInfoManager **ppTransformPluginInfoManager
     );
     [id(1113), propget]
     HRESULT __stdcall DisplayInfo (
       [out retval] dispinterface IWMEncDisplayInfo **ppDisplayInfo
     );
     [propget]
     HRESULT __stdcall Attributes (
       [out retval] dispinterface IWMEncAttributes **ppAttributes
     );
     [propget]
     HRESULT __stdcall Broadcast (
       [out retval] dispinterface IWMEncBroadcast **ppBroadcast
     );
     [propget]
     HRESULT __stdcall File (
       [out retval] dispinterface IWMEncFile **ppFile
     );
     [id(1122), propget]
     HRESULT __stdcall Statistics (
       [out retval] dispinterface IWMEncStatistics **ppStatistics
     );
     [id(1124), propget]
     HRESULT __stdcall ProfileCollection (
       [out retval] dispinterface IWMEncProfileCollection **ppProfileCollection
     );
     [id(1118), propget]
     HRESULT __stdcall RunState (
       [out retval] enum WMENC_ENCODER_STATE *penumState
     );
     [propget]
     HRESULT __stdcall ErrorState (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall ArchiveState (
       [in] enum WMENC_ARCHIVE_TYPE enumType,
       [out retval] enum WMENC_ARCHIVE_STATE *penumArchiveState
     );
     [id(1130), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrName
     );
     [id(1130), propput]
     HRESULT __stdcall Name (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall RemoteAdmin (
       [out retval] WINBOOL *pbRemoteAdmin
     );
     [id(1131), propput]
     HRESULT __stdcall RemoteAdmin (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall GenerateBroadcastInfo (
       [in] BSTR bstrFileName
     );
     [propget]
     HRESULT __stdcall IndexerState (
       [out retval] enum WMENC_INDEXER_STATE *penumIndexerState
     );
     [id(1135), propget]
     HRESULT __stdcall AutoIndex (
       [out retval] WINBOOL *pbAutoIndex
     );
     [id(1135), propput]
     HRESULT __stdcall AutoIndex (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall Indexer (
       [in] enum WMENC_INDEXER_OPERATION enumIndexerOp
     );
   };
   [
     uuid(0D3848AE-7633-4A8A-BF17-D91E3C3DF36B),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncSourceGroupCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] VARIANT var,
       [out retval] dispinterface IWMEncSourceGroup **ppSourceGroup
     );
     [id(102)]
     HRESULT __stdcall Add (
       [in] BSTR bstrName,
       [out retval] dispinterface IWMEncSourceGroup **ppSourceGroup
     );
     HRESULT __stdcall Remove (
       [in] VARIANT var
     );
     [id(100)]
     HRESULT __stdcall Move (
       [in] dispinterface IWMEncSourceGroup *pSourceGroup,
       [in] dispinterface IWMEncSourceGroup *pSourceGroupInfront
     );
     [propget]
     HRESULT __stdcall Active (
       [out retval] dispinterface IWMEncSourceGroup **ppSourceGroup
     );
     [id(101), propput]
     HRESULT __stdcall Active (
       [in] dispinterface IWMEncSourceGroup *argNo1
     );
   };
   [
     uuid(5EDCA4F2-1533-47B6-A090-3000CE270313),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncSourceGroup : IDispatch
   {
     [id(110), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrName
     );
     [id(110), propput]
     HRESULT __stdcall Name (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall SourceCount (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [out retval] short *iSourceCount
     );
     [propget]
     HRESULT __stdcall Source (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [in] short iIndex,
       [out retval] dispinterface IWMEncSource **ppSource
     );
     HRESULT __stdcall AddSource (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [out retval] dispinterface IWMEncSource **ppSource
     );
     HRESULT __stdcall RemoveSource (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [in] VARIANT var
     );
     [id(116), propget]
     HRESULT __stdcall Profile (
       [out retval] dispinterface IWMEncProfile **ppProfile
     );
     [id(116), propput]
     HRESULT __stdcall Profile (
       [in] VARIANT argNo1
     );
     [id(118), propget]
     HRESULT __stdcall AudienceCollection (
       [out retval] IDispatch **ppAudienceCollection
     );
     [propget]
     HRESULT __stdcall AutoArchive (
       [in] enum WMENC_ARCHIVE_TYPE enumArchiveType,
       [out retval] enum WMENC_ARCHIVE_OPERATION *penumArchiveOp
     );
     [id(119), propput]
     HRESULT __stdcall AutoArchive (
       [in] enum WMENC_ARCHIVE_TYPE enumArchiveType,
       [in] enum WMENC_ARCHIVE_OPERATION argNo2
     );
     HRESULT __stdcall AutoSetFileSource (
       [in] BSTR bstrFileName
     );
     HRESULT __stdcall PrepareToEncode (
       WINBOOL bPrepare
     );
     [propget]
     HRESULT __stdcall GroupTransformCollection (
       [out retval] dispinterface IWMEncTransformCollection **ppTransformCollection
     );
     [id(124)]
     HRESULT __stdcall GetGroupTransformPluginCount (
       [out] UINT *pdwCount
     );
     HRESULT __stdcall GetGroupTransformPlugin (
       [in] UINT dwIndex,
       [out] IUnknown **ppUnkPlugin
     );
   };
   [
     uuid(E39EB002-1D73-46C7-8016-8DB03CF2D7B7),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncProfile : IDispatch
   {
     [id(350), propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *bstrName
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *bstrDescription
     );
     [propget]
     HRESULT __stdcall MediaCount (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [out retval] short *piCount
     );
     [id(354), propget]
     HRESULT __stdcall MultipleBitrate (
       [out retval] WINBOOL *pbMBR
     );
     [id(353), propget]
     HRESULT __stdcall AudienceCollection (
       [out retval] IDispatch **ppAudienceCollection
     );
     [id(355), propget]
     HRESULT __stdcall MaxPacketSize (
       [out retval] long *plMaxPacketSize
     );
     [id(355), propput]
     HRESULT __stdcall MaxPacketSize (
       [in] long argNo1
     );
   };
   [
     uuid(656FF2AE-50B5-47FA-A14F-AD0262D104B4),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncSourcePluginInfoManager : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long iIndex,
       [out retval] dispinterface IWMEncPluginInfo **ppPluginInfo
     );
     [id(731)]
     HRESULT __stdcall Refresh (void);
   };
   [
     uuid(04D7282A-7321-482B-997D-65684D805B16),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncPluginInfo : IDispatch
   {
     [id(700), propget]
     HRESULT __stdcall SchemeType (
       [out retval] BSTR *pbstrSchemeType
     );
     [propget]
     HRESULT __stdcall CLSID (
       [out retval] BSTR *pbstrCLSID
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrName
     );
     [propget]
     HRESULT __stdcall MediaType (
       [out retval] enum WMENC_SOURCE_TYPE *penumMediaType
     );
     [propget]
     HRESULT __stdcall PluginType (
       [out retval] enum WMENC_PLUGIN_TYPE *penumType
     );
     [propget]
     HRESULT __stdcall Copyright (
       [out retval] BSTR *pbstrCopyright
     );
     [propget]
     HRESULT __stdcall InfoURL (
       [out retval] BSTR *pbstrInfoURL
     );
     [propget]
     HRESULT __stdcall Resources (
       [out retval] WINBOOL *pbResources
     );
     [id(712), propget]
     HRESULT __stdcall Exclusive (
       [out retval] WINBOOL *pbExclusive
     );
     [id(708), propget]
     HRESULT __stdcall PropertyPage (
       [out retval] WINBOOL *pbProppage
     );
     [id(714), propget]
     HRESULT __stdcall TransformFlags (
       [out retval] short *piFlags
     );
     [id(713), propget]
     HRESULT __stdcall Hidden (
       [out retval] WINBOOL *pbHidden
     );
     [id(10), propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] BSTR *pbstrResource
     );
   };
   [
     uuid(FEA6CCFF-EF5A-4177-9967-7F1998954B9A),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncTransformPluginInfoManager : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long iIndex,
       [out retval] dispinterface IWMEncPluginInfo **ppPluginInfo
     );
     [id(730)]
     HRESULT __stdcall Refresh (void);
   };
   [
     uuid(F5D0DE6A-E71A-48B3-8C7A-349441AF20E2),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncDisplayInfo : IDispatch
   {
     [id(500), propget]
     HRESULT __stdcall Title (
       [out retval] BSTR *pbstrTitle
     );
     [id(500), propput]
     HRESULT __stdcall Title (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Author (
       [out retval] BSTR *pbstrAuthor
     );
     [id(501), propput]
     HRESULT __stdcall Author (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Copyright (
       [out retval] BSTR *pbstrCopyright
     );
     [id(502), propput]
     HRESULT __stdcall Copyright (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Rating (
       [out retval] BSTR *pbstrRating
     );
     [id(503), propput]
     HRESULT __stdcall Rating (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrDesc
     );
     [id(504), propput]
     HRESULT __stdcall Description (
       [in] BSTR argNo1
     );
   };
   [
     uuid(2600BCCE-C01B-4D57-A478-671BA800622B),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncAttributes : IDispatch
   {
     [id(10), propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out] BSTR *pbstrName,
       [out retval] VARIANT *pVarValue
     );
     [id(511)]
     HRESULT __stdcall Add (
       [in] BSTR bstrName,
       [in] VARIANT varValue
     );
     HRESULT __stdcall Remove (
       [in] VARIANT var
     );
     HRESULT __stdcall RemoveAll (void);
   };
   [
     uuid(08B41711-6A27-45CD-A6B4-3E58C7229541),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncFile : IDispatch
   {
     [id(600), propget]
     HRESULT __stdcall LocalFileName (
       [out retval] BSTR *pbstrFileName
     );
     [id(600), propput]
     HRESULT __stdcall LocalFileName (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall RemoteFileName (
       [out retval] BSTR *pbstrFileName
     );
     [id(601), propput]
     HRESULT __stdcall RemoteFileName (
       [in] BSTR argNo1
     );
   };
   [
     uuid(236EC4A7-0694-47EE-A5DF-CFCE6F649EF0),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncStatistics : IDispatch
   {
     [id(1252), propget]
     HRESULT __stdcall EncodingTime (
       [out retval] WMENC_LONGLONG *plTime
     );
     [id(1250), propget]
     HRESULT __stdcall WMFOutputStats (
       [out retval] IDispatch **ppStats
     );
     [propget]
     HRESULT __stdcall StreamOutputStats (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [in] short iMediaIndex,
       [in] short iStreamIndex,
       [out retval] IDispatch **pStats
     );
     [id(1253), propget]
     HRESULT __stdcall NetConnectionStats (
       [out retval] IDispatch **ppDispNetConnectionStats
     );
     [propget]
     HRESULT __stdcall FileArchiveStats (
       [out retval] IDispatch **ppFileArchiveStats
     );
     [propget]
     HRESULT __stdcall StreamOutputCount (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [in] short iMediaIndex,
       [out retval] short *pStreamOutputCount
     );
     [propget]
     HRESULT __stdcall IndexerStats (
       [out retval] IDispatch **ppIndexerStats
     );
   };
   [
     uuid(E8AC8522-9108-4DE1-9CFD-3D169380AD66),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncProfileCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(13), propget]
     HRESULT __stdcall ProfileDirectory (
       [out retval] BSTR *bstrDirectory
     );
     [id(13), propput]
     HRESULT __stdcall ProfileDirectory (
       [in] BSTR argNo1
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out retval] dispinterface IWMEncProfile **ppProfile
     );
     [id(330)]
     HRESULT __stdcall Refresh (void);
   };
   [
     uuid(F44CF135-76FD-482A-93EA-A2F186FC26E8),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncoder2 : IWMEncoder
   {
     [id(1138), propget]
     HRESULT __stdcall DeviceControlPluginInfoManager (
       [out retval] dispinterface IWMEncDeviceControlPluginInfoManager **ppDeviceControlPluginInfoManager
     );
     [propget]
     HRESULT __stdcall ContentAnalyzer (
       [out retval] dispinterface IWMEncContentAnalyzer **ppContentAnalyzer
     );
     HRESULT __stdcall InsertCleanpoint (void);
     [id(1144), propget]
     HRESULT __stdcall SynchronizeOperation (
       [out retval] WINBOOL *pbSyncOp
     );
     [id(1144), propput]
     HRESULT __stdcall SynchronizeOperation (
       [in] WINBOOL argNo1
     );
     [id(1137), propget]
     HRESULT __stdcall EncoderDRMContentAuthor (
       [out retval] dispinterface IWMDRMContentAuthor **ppEncoderDRMAuthor
     );
     [id(1141), propget]
     HRESULT __stdcall WatermarkCollection (
       [in] enum WMENC_SOURCE_TYPE enumSourceType,
       [out retval] dispinterface IWMEncWatermarkCollection **ppWatermarks
     );
     HRESULT __stdcall GetWatermark (
       [in] enum WMENC_SOURCE_TYPE enumSourceType,
       [in] short iIndex,
       [out] VARIANT *pvarConfigFile,
       [out] VARIANT *pvarCLSID,
       [out retval] BSTR *pbstrWatermarkName
     );
     HRESULT __stdcall SetWatermark (
       [in] enum WMENC_SOURCE_TYPE enumSourceType,
       [in] short iIndex,
       [in] BSTR bstrWaterMarkName,
       [in] BSTR bstrCLSID,
       [in] BSTR bstrConfigFile
     );
     [id(1145)]
     HRESULT __stdcall Flush (void);
     [propget]
     HRESULT __stdcall EnableTimecode (
       [out retval] WINBOOL *pfTimecode
     );
     [id(1146), propput]
     HRESULT __stdcall EnableTimecode (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall PreserveSourceTimecode (
       [out retval] WINBOOL *pfSourceTimecode
     );
     [id(1147), propput]
     HRESULT __stdcall PreserveSourceTimecode (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall StartingTimecode (
       [out retval] long *plTimecode
     );
     [id(1148), propput]
     HRESULT __stdcall StartingTimecode (
       [in] long argNo1
     );
     [id(1150), propget]
     HRESULT __stdcall TimecodeFrameRate (
       [out retval] long *plFrameRate
     );
     [id(1150), propput]
     HRESULT __stdcall TimecodeFrameRate (
       [in] long argNo1
     );
     [id(1149), propget]
     HRESULT __stdcall VideoComplexity (
       [out retval] enum WMENC_VIDEOCOMPLEXITY *penumVideoComplexity
     );
     [id(1149), propput]
     HRESULT __stdcall VideoComplexity (
       [in] enum WMENC_VIDEOCOMPLEXITY argNo1
     );
   };
   [
     uuid(79278B82-499C-47CA-AE05-7620444CB4A4),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncDeviceControlPluginInfoManager : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long iIndex,
       [out retval] dispinterface IWMEncPluginInfo **ppPluginInfo
     );
     [id(390)]
     HRESULT __stdcall Refresh (void);
   };
   [
     uuid(578DD4CD-0FE4-4FA8-8363-768BB183434D),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncContentAnalyzer : IDispatch
   {
     [id(1550), propget]
     HRESULT __stdcall SourceGroup (
       [out retval] dispinterface IWMEncSourceGroup **ppSourceGroup
     );
     [id(1550), propput]
     HRESULT __stdcall SourceGroup (
       [in] dispinterface IWMEncSourceGroup *argNo1
     );
     HRESULT __stdcall Start (void);
     HRESULT __stdcall Stop (void);
     HRESULT __stdcall Property (
       [in] enum WMENC_SOURCE_TYPE enumType,
       [in] short iIndex,
       [in] BSTR bstrProperty,
       [out retval] VARIANT *pVarValue
     );
   };
   [
     uuid(EF015DE4-52BE-464A-922E-9D72318B4B3B),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMDRMContentAuthor : IDispatch
   {
     [id(1500)]
     HRESULT __stdcall SetSessionDRMProfile (
       [in] BSTR bstrProfileID,
       [in out] VARIANT *pvartrKID
     );
     HRESULT __stdcall GetSessionDRMProfile (
       [out] VARIANT *pvar,
       [out retval] BSTR *pbstrKID
     );
     [id(1508), propget]
     HRESULT __stdcall ContentID (
       [out retval] BSTR *pbstrCID
     );
     [id(1508), propput]
     HRESULT __stdcall ContentID (
       [in] BSTR argNo1
     );
     [id(1502), propget]
     HRESULT __stdcall Attributes (
       [out retval] dispinterface IWMDRMAttributes **ppAttributes
     );
     [id(1507)]
     HRESULT __stdcall CreateDRMProfile (
       [in] BSTR bstrProviderURL,
       [in] BSTR bstrSignaturePrivKey,
       [in] BSTR bstrSignatureCrt,
       [in] BSTR bstrSignatureLicSrvCert,
       [in] BSTR bstrSignatureRootCert,
       [out] VARIANT *pbstrProfileID,
       [out] VARIANT *pvarSeed,
       [out retval] BSTR *pbstrPubKey
     );
     [id(1503)]
     HRESULT __stdcall GetDRMProfile (
       [in] BSTR bstrProfileID,
       [out retval] dispinterface IWMDRMProfile **ppDRMProfile
     );
     HRESULT __stdcall RemoveDRMProfile (
       [in] BSTR bstrProfileID
     );
     HRESULT __stdcall ImportDRMProfile (
       [in] BSTR bstrPassword,
       [in] BSTR bstrFile
     );
     HRESULT __stdcall ExportDRMProfile (
       [in] BSTR bstrProfileID,
       [in] BSTR bstrPassword,
       [in] BSTR bstrFile
     );
     [id(1509)]
     HRESULT __stdcall GenerateKeyID (
       [out retval] BSTR *pbstrKID
     );
     HRESULT __stdcall GenerateContentID (
       [out retval] BSTR *pbstrCID
     );
     [propget]
     HRESULT __stdcall DRMProfileCollection (
       [out retval] dispinterface IWMDRMProfileCollection **ppUnkDRMProfiles
     );
   };
   [
     uuid(FD1AD79C-BA8C-4772-B367-6D2826F8DDF3),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMDRMAttributes : IDispatch
   {
     [id(10), propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long Index,
       [out] VARIANT *pvarName,
       [out retval] VARIANT *pVarValue
     );
     [id(1533), propget]
     HRESULT __stdcall Name (
       [in] long lIndex,
       [out retval] BSTR *pbstrName
     );
     [propget]
     HRESULT __stdcall Value (
       [in] VARIANT var,
       [out retval] VARIANT *pVarValue
     );
     [id(1530)]
     HRESULT __stdcall Add (
       [in] BSTR bstrName,
       [in] VARIANT varValue
     );
     HRESULT __stdcall Remove (
       [in] VARIANT var
     );
     HRESULT __stdcall RemoveAll (void);
   };
   [
     uuid(DD358D0C-FE25-438F-9164-0B92A639A954),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMDRMProfile : IDispatch
   {
     [id(1520), propget]
     HRESULT __stdcall ID (
       [out retval] BSTR *pbstrProfileID
     );
     [propget]
     HRESULT __stdcall ProviderURL (
       [out retval] BSTR *pbstrProviderURL
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *pbstrProfileName
     );
     [id(1522), propput]
     HRESULT __stdcall Name (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *pbstrProfileDesc
     );
     [id(1523), propput]
     HRESULT __stdcall Description (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall LicenseAcquisitionURL (
       [out retval] BSTR *pbstrLAINFO
     );
     [id(1524), propput]
     HRESULT __stdcall LicenseAcquisitionURL (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall V1LicenseAcquisitionURL (
       [out retval] BSTR *pbstrLAINFO
     );
     [id(1525), propput]
     HRESULT __stdcall V1LicenseAcquisitionURL (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall Attributes (
       [out retval] dispinterface IWMDRMAttributes **ppAttributes
     );
     HRESULT __stdcall Update (void);
     [propget]
     HRESULT __stdcall ContentRevocation (
       [out retval] BSTR *pbstrContentRevocation
     );
   };
   [
     uuid(04CBDD29-D4AF-4D0B-B822-BFA2FC0F2FEE),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMDRMProfileCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] VARIANT var,
       [out retval] dispinterface IWMDRMProfile **ppDRMProfile
     );
   };
   [
     uuid(B9820836-AAFA-4A76-9693-97DE06F204F0),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncWatermarkCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long iIndex,
       [out] VARIANT *pvarCLSID,
       [out retval] BSTR *pbstrName
     );
   };
   [
     uuid(272FE476-BD07-40D1-9FE3-320CF4C2910E),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncFile2 : IWMEncFile
   {
     [id(602), propget]
     HRESULT __stdcall FileDuration (
       [out retval] WMENC_LONGLONG *plTime
     );
     [id(602), propput]
     HRESULT __stdcall FileDuration (
       [in] WMENC_LONGLONG argNo1
     );
     [propget]
     HRESULT __stdcall FileSize (
       [out retval] WMENC_LONGLONG *pqwOutputFileSize
     );
     [id(603), propput]
     HRESULT __stdcall FileSize (
       [in] WMENC_LONGLONG argNo1
     );
   };
   [
     uuid(EFD3A9F8-8E22-40F7-9896-031A6EC3F486),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncSourceGroup2 : IWMEncSourceGroup
   {
     [id(126), propget]
     HRESULT __stdcall DeviceControlCollection (
       [out retval] dispinterface IWMEncDeviceControlCollection **ppDeviceControlCollection
     );
     HRESULT __stdcall GetAutoRollover (
       [out] VARIANT *pvar,
       [out retval] BSTR *pbstrSourceGroupName
     );
     HRESULT __stdcall SetAutoRollover (
       [in] long lRolloverTime,
       [in] BSTR bstrSourceGroupName
     );
   };
   [
     uuid(C40AA274-56ED-4BD2-9A52-9B0475D7EC71),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncDeviceControlCollection : IDispatch
   {
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] dispinterface IWMEncDeviceControl **ppDeviceControl
     );
     [id(395)]
     HRESULT __stdcall Add (
       [out retval] dispinterface IWMEncDeviceControl **ppDeviceControl
     );
     HRESULT __stdcall Remove (
       [in] long lIndex
     );
     HRESULT __stdcall RemoveAll (void);
   };
   [
     uuid(6CD3861F-A4A4-4E32-8307-8B1630EF6BC4),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncDeviceControl : IDispatch
   {
     [id(391)]
     HRESULT __stdcall SetInput (
       [in] BSTR bstrInput,
       [in opt] BSTR bstrScheme = L"",
       [in opt] BSTR bstrInitData = L""
     );
     HRESULT __stdcall GetInput (
       [out] VARIANT *pbstrScheme,
       [out] VARIANT *pbstrInitData,
       [out retval] BSTR *pbstrInput
     );
     HRESULT __stdcall GetDeviceControlPlugin (
       [out retval] IUnknown **ppUnkPlugin
     );
   };
   [
     uuid(992977EC-ADD6-4BE4-87C2-AC029DEB82E9),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncOutputStats2 : IWMEncOutputStats
   {
     [id(1283), propget]
     HRESULT __stdcall Property (
       [in] BSTR bstrProperty,
       [out retval] VARIANT *pvValue
     );
   };
   [
     uuid(7B4D2729-E961-4626-90BC-6B5A5593F4EB),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncVideoSource2 : IWMEncVideoSource
   {
     [id(183), propget]
     HRESULT __stdcall Width (
       [out retval] long *plWidth
     );
     [id(183), propput]
     HRESULT __stdcall Width (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall Height (
       [out retval] long *plHeight
     );
     [id(184), propput]
     HRESULT __stdcall Height (
       [in] long argNo1
     );
     [propget]
     HRESULT __stdcall PixelAspectRatioX (
       [out retval] short *piRatioX
     );
     [id(185), propput]
     HRESULT __stdcall PixelAspectRatioX (
       [in] short argNo1
     );
     [propget]
     HRESULT __stdcall PixelAspectRatioY (
       [out retval] short *piRatioY
     );
     [id(186), propput]
     HRESULT __stdcall PixelAspectRatioY (
       [in] short argNo1
     );
     [propget]
     HRESULT __stdcall PreProcessPass (
       [out retval] short *piPassesCount
     );
     [id(187), propput]
     HRESULT __stdcall PreProcessPass (
       [in] short argNo1
     );
     [id(175)]
     HRESULT __stdcall EnumerateInputs (
       [out retval] dispinterface IWMEncInputCollection **ppInputCol
     );
     [propput]
     HRESULT __stdcall Input (
       [in] short argNo1
     );
     [propput]
     HRESULT __stdcall Channel (
       [in] short argNo1
     );
     [propput]
     HRESULT __stdcall Country (
       [in] long argNo1
     );
     [propput]
     HRESULT __stdcall TVType (
       [in] short argNo1
     );
     [propput]
     HRESULT __stdcall TVFormat (
       [in] long argNo1
     );
     [id(176), propget]
     HRESULT __stdcall Input (
       [out retval] short *piSourceID
     );
     [propget]
     HRESULT __stdcall Channel (
       [out retval] short *piChannelNum
     );
     [propget]
     HRESULT __stdcall Country (
       [out retval] long *plCountry
     );
     [propget]
     HRESULT __stdcall TVType (
       [out retval] short *piTunerInputType
     );
     [propget]
     HRESULT __stdcall TVFormat (
       [out retval] long *plAnalogVideoStandard
     );
     [id(193), propget]
     HRESULT __stdcall ChannelMin (
       [out retval] long *plChannelMin
     );
     [propget]
     HRESULT __stdcall ChannelMax (
       [out retval] long *plChannelMax
     );
     [id(188), propget]
     HRESULT __stdcall Duration (
       [out retval] long *plDuration
     );
   };
   [
     uuid(5C32008D-7940-4F6C-94A8-9FD2F8C285B1),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncInputCollection : IDispatch
   {
     [id(0)]
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out retval] BSTR *pretval
     );
     [id(9), propget]
     HRESULT __stdcall length (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(-4), propget, restricted]
     HRESULT __stdcall _NewEnum (
       [out retval] IUnknown **pIUnknown
     );
   };
   [
     uuid(E15EE1CA-B248-4D6C-A90B-F117197E9EF0),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncAudioSource : IWMEncSource
   {
     [id(191), propget]
     HRESULT __stdcall ContentMode (
       [out retval] enum WMENC_CONTENT_MODE *penumMode
     );
     [id(191), propput]
     HRESULT __stdcall ContentMode (
       [in] enum WMENC_CONTENT_MODE argNo1
     );
     [id(190), propget]
     HRESULT __stdcall ContentEDL (
       [out retval] BSTR *pbstrEDL
     );
     [id(190), propput]
     HRESULT __stdcall ContentEDL (
       [in] BSTR argNo1
     );
     [id(192), propget]
     HRESULT __stdcall PreProcessPass (
       [out retval] short *piPassesCount
     );
     [id(192), propput]
     HRESULT __stdcall PreProcessPass (
       [in] short argNo1
     );
     [id(188), propget]
     HRESULT __stdcall Duration (
       [out retval] long *plDuration
     );
   };
   [
     uuid(7B44F3DF-772C-49D6-ACB2-0603F1C11930),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncPushDistributionStats : IDispatch
   {
     [id(1295), propget]
     HRESULT __stdcall Property (
       [in] BSTR bstrProperty,
       [out retval] VARIANT *pvarProperty
     );
   };
   [
     uuid(CF213FD7-BD24-4902-B9E4-CF7702C5D105),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncStatistics2 : IWMEncStatistics
   {
     [id(1257), propget]
     HRESULT __stdcall PushDistributionStats (
       [out retval] IDispatch **ppDispPushDistributionStats
     );
   };
   [
     uuid(87F5BFB1-71A8-4F83-9431-B7129973B8F8),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncAudienceObj : IDispatch
   {
     [id(3000), propget]
     HRESULT __stdcall Selected (
       [out retval] WINBOOL *pfSelected
     );
     [id(3000), propput]
     HRESULT __stdcall Selected (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall TotalBitrate (
       [out retval] long *plBitrate
     );
     [id(3022), propget]
     HRESULT __stdcall TotalPeakBitrate (
       [out retval] long *plPeakBitrate
     );
     [id(3002), propget]
     HRESULT __stdcall AudioCodec (
       [in] short iRenderSiteIndex,
       [out retval] long *plCodecIndex
     );
     [id(3002), propput]
     HRESULT __stdcall AudioCodec (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall AudioBitrate (
       [in] short iRenderSiteIndex,
       [out retval] long *plBitrate
     );
     [propget]
     HRESULT __stdcall AudioFormat (
       [in] short iRenderSiteIndex,
       [out retval] long *plFormatIndex
     );
     [id(3004), propput]
     HRESULT __stdcall AudioFormat (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     HRESULT __stdcall SetAudioConfig (
       [in] short iRenderSiteIndex,
       [in] short nChannels,
       [in] long nSamplesPerSec,
       [in] long lBitrate,
       [in] short wBitsPerSample
     );
     [id(3020), propget]
     HRESULT __stdcall AudioPeakBitrate (
       [in] short iRenderSiteIndex,
       [out retval] long *plBitrate
     );
     [id(3020), propput]
     HRESULT __stdcall AudioPeakBitrate (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall AudioBufferMax (
       [in] short iRenderSiteIndex,
       [out retval] long *plBMax
     );
     [id(3021), propput]
     HRESULT __stdcall AudioBufferMax (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [id(3006), propget]
     HRESULT __stdcall VideoCodec (
       [in] short iRenderSiteIndex,
       [out retval] long *plCodecIndex
     );
     [id(3006), propput]
     HRESULT __stdcall VideoCodec (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoBitrate (
       [in] short iRenderSiteIndex,
       [out retval] long *plBitrate
     );
     [id(3007), propput]
     HRESULT __stdcall VideoBitrate (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoPeakBitrate (
       [in] short iRenderSiteIndex,
       [out retval] long *plBitrate
     );
     [id(3008), propput]
     HRESULT __stdcall VideoPeakBitrate (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoWidth (
       [in] short iRenderSiteIndex,
       [out retval] long *plWidth
     );
     [id(3009), propput]
     HRESULT __stdcall VideoWidth (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoHeight (
       [in] short iRenderSiteIndex,
       [out retval] long *plHeight
     );
     [id(3010), propput]
     HRESULT __stdcall VideoHeight (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoFPS (
       [in] short iRenderSiteIndex,
       [out retval] long *plFPS
     );
     [id(3011), propput]
     HRESULT __stdcall VideoFPS (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoKeyFrameDistance (
       [in] short iRenderSiteIndex,
       [out retval] WMENC_LONGLONG *pllKFS
     );
     [id(3012), propput]
     HRESULT __stdcall VideoKeyFrameDistance (
       [in] short iRenderSiteIndex,
       [in] WMENC_LONGLONG argNo2
     );
     [propget]
     HRESULT __stdcall VideoImageSharpness (
       [in] short iRenderSiteIndex,
       [out retval] long *plIQuality
     );
     [id(3013), propput]
     HRESULT __stdcall VideoImageSharpness (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoCompressionQuality (
       [in] short iRenderSiteIndex,
       [out retval] long *plCQuality
     );
     [id(3014), propput]
     HRESULT __stdcall VideoCompressionQuality (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoBufferSize (
       [in] short iRenderSiteIndex,
       [out retval] long *plBS
     );
     [id(3015), propput]
     HRESULT __stdcall VideoBufferSize (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall VideoBufferMax (
       [in] short iRenderSiteIndex,
       [out retval] long *plBMax
     );
     [id(3016), propput]
     HRESULT __stdcall VideoBufferMax (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall ScriptBitrate (
       [in] short iRenderSiteIndex,
       [out retval] long *plBitrate
     );
     [id(3017), propput]
     HRESULT __stdcall ScriptBitrate (
       [in] short iRenderSiteIndex,
       [in] long argNo2
     );
     [propget]
     HRESULT __stdcall StreamBitrate (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSiteIndex,
       [out retval] long *plBitrate
     );
     [id(3018), propput]
     HRESULT __stdcall StreamBitrate (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSiteIndex,
       [in] long argNo3
     );
     [propget]
     HRESULT __stdcall Property (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSiteIndex,
       [in] BSTR bstrProperty,
       [out retval] VARIANT *pvarProperty
     );
     [id(3019), propput]
     HRESULT __stdcall Property (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSiteIndex,
       [in] BSTR bstrProperty,
       [in] VARIANT argNo4
     );
   };
   [
     uuid(0C92143F-E5E7-4B7C-8F4F-9BA6ED370410),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncFileSet : IDispatch
   {
     [id(10), propget]
     HRESULT __stdcall Count (
       [out retval] long *plCount
     );
     [id(0)]
     HRESULT __stdcall Item (
       [in] long lIndex,
       [out] VARIANT *pvarFileName,
       [out retval] BSTR *pbstrFileURL
     );
     [id(2600)]
     HRESULT __stdcall Add (
       [in] BSTR bstrFileName,
       [in] BSTR bstrFileURL
     );
     HRESULT __stdcall Remove (
       [in] long lIndex
     );
     HRESULT __stdcall RemoveAll (void);
     [id(2618)]
     HRESULT __stdcall Move (
       [in] long lMove,
       [in] long lInFrontOf
     );
     HRESULT __stdcall SetInput (
       [in] long lIndex,
       [in] BSTR bstrFileName,
       [in] BSTR bstrURL
     );
     [id(2604), propget]
     HRESULT __stdcall Time (
       [out retval] WMENC_LONGLONG *pllSendTime
     );
     [id(2604), propput]
     HRESULT __stdcall Time (
       [in] WMENC_LONGLONG argNo1
     );
   };
   [
     uuid(5DD6F6BF-E691-4143-BAD1-0AD72B02F1A2),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncNetConnectionStats2 : IWMEncNetConnectionStats
   {
     [id(1262), propget]
     HRESULT __stdcall HostURL (
       [out retval] BSTR *pbstrHostURL
     );
   };
   [
     uuid(D053A996-2652-41DA-95F4-225493F338F1),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dispatchable
   ]
   dispinterface _IWMEncoderEvents
   {
     [id(1150)]
     HRESULT __stdcall OnStateChange (
       [in] enum WMENC_ENCODER_STATE enumState
     );
     HRESULT __stdcall OnError (
       [in] long hResult
     );
     HRESULT __stdcall OnArchiveStateChange (
       [in] enum WMENC_ARCHIVE_TYPE enumArchive,
       [in] enum WMENC_ARCHIVE_STATE enumState
     );
     HRESULT __stdcall OnConfigChange (
       [in] long hResult,
       [in] BSTR bstr
     );
     HRESULT __stdcall OnClientConnect (
       [in] enum WMENC_BROADCAST_PROTOCOL protocol,
       [in] BSTR bstr
     );
     HRESULT __stdcall OnClientDisconnect (
       [in] enum WMENC_BROADCAST_PROTOCOL protocol,
       [in] BSTR bstr
     );
     HRESULT __stdcall OnSourceStateChange (
       [in] enum WMENC_SOURCE_STATE enumState,
       [in] enum WMENC_SOURCE_TYPE enumType,
       [in] short iIndex,
       [in] BSTR bstrSourceGroup
     );
     [id(1159)]
     HRESULT __stdcall OnDeviceControlStateChange (
       [in] enum WMENC_DEVICECONTROL_STATE enumState,
       [in] BSTR bstrName,
       [in] BSTR bstrScheme
     );
     [id(1157)]
     HRESULT __stdcall OnIndexerStateChange (
       [in] enum WMENC_INDEXER_STATE enumIndexerState,
       [in] BSTR bstrFile
     );
     HRESULT __stdcall OnAcquireCredentials (
       [in] BSTR bstrRealm,
       [in] BSTR bstrSite,
       [in out] VARIANT *pvarUser,
       [in out] VARIANT *pvarPassword,
       [in out] VARIANT *plFlags
     );
     [id(1160)]
     HRESULT __stdcall OnClientDNSNameResolved (
       [in] BSTR bstrIpAddr,
       [in] BSTR bstrDNSName
     );
   };
   [
     uuid(6219711D-F686-43CA-AE1E-CFC8EC2A94D2),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dispatchable
   ]
   dispinterface _IWMEncBasicEditEvents
   {
     [id(2520)]
     HRESULT __stdcall OnStateChange (
       [in] enum WMENC_BASICEDIT_STATE enumState
     );
     HRESULT __stdcall OnError (
       [in] long hResult
     );
   };
   [
     uuid(32B8ECC9-2901-11D3-8FB8-00C04F6109B7),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dispatchable
   ]
   dispinterface _IWMEncoderAppEvents
   {
   };
   [
     uuid(ED6A5F34-B618-4DDA-9A1E-90BC0B600C20),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncBasicEdit : IDispatch
   {
     [id(2500), propget]
     HRESULT __stdcall MediaFile (
       [out retval] BSTR *pbstrMediaFileName
     );
     [id(2500), propput]
     HRESULT __stdcall MediaFile (
       [in] BSTR argNo1
     );
     [id(2511), propget]
     HRESULT __stdcall OutputFile (
       [out retval] BSTR *pbstrOutputFileName
     );
     [id(2511), propput]
     HRESULT __stdcall OutputFile (
       [in] BSTR argNo1
     );
     [id(2501), propget]
     HRESULT __stdcall ConfigFile (
       [out retval] BSTR *pbstrConfigXMLFileName
     );
     [id(2501), propput]
     HRESULT __stdcall ConfigFile (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall MarkIn (
       [out retval] WMENC_LONGLONG *pllMarkIn
     );
     [id(2502), propput]
     HRESULT __stdcall MarkIn (
       [in] WMENC_LONGLONG argNo1
     );
     [propget]
     HRESULT __stdcall MarkOut (
       [out retval] WMENC_LONGLONG *pllMarkOut
     );
     [id(2503), propput]
     HRESULT __stdcall MarkOut (
       [in] WMENC_LONGLONG argNo1
     );
     [id(2509), propget]
     HRESULT __stdcall Index (
       [out retval] WINBOOL *pfIndex
     );
     [id(2509), propput]
     HRESULT __stdcall Index (
       [in] WINBOOL argNo1
     );
     [id(2504)]
     HRESULT __stdcall SaveConfigFile (
       [in] BSTR bstrConfigXMLFileName
     );
     HRESULT __stdcall SaveProfile (
       [in] BSTR bstrProfileFileName
     );
     [id(2512), propget]
     HRESULT __stdcall Profile (
       [out retval] dispinterface IWMEncProfile2 **ppIWMEncProfile2
     );
     [id(2506)]
     HRESULT __stdcall Start (void);
     HRESULT __stdcall Stop (void);
     [propget]
     HRESULT __stdcall RunState (
       [out retval] enum WMENC_BASICEDIT_STATE *penumState
     );
     [id(2510), propget]
     HRESULT __stdcall Duration (
       [out retval] WMENC_LONGLONG *pllDuration
     );
     [id(2513), propget]
     HRESULT __stdcall ErrorState (
       [out retval] long *plResult
     );
     [propget]
     HRESULT __stdcall ProgressPercent (
       [out retval] long *plProgressPercent
     );
   };
   [
     uuid(34995131-427C-40B5-877B-4A9B6F3CA758),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncProfile2 : IWMEncProfile
   {
     [id(3051), propget]
     HRESULT __stdcall ContentType (
       [out retval] long *plSrcType
     );
     [id(3051), propput]
     HRESULT __stdcall ContentType (
       [in] long argNo1
     );
     HRESULT __stdcall LoadFromIWMProfile (
       [in] IUnknown * pUnkProfile
     );
     HRESULT __stdcall LoadFromFile (
       [in] BSTR bstrFileName
     );
     HRESULT __stdcall LoadFromMemory (
       [in] BSTR bstrData
     );
     HRESULT __stdcall SaveToIWMProfile (
       [out retval] IUnknown **pUnkProfile
     );
     HRESULT __stdcall SaveToFile (
       [in] BSTR bstrFileName
     );
     HRESULT __stdcall SaveToMemory (
       [out retval] BSTR *pbstrData
     );
     HRESULT __stdcall Clone (
       [in] dispinterface IWMEncProfile2 *pObj
     );
     HRESULT __stdcall Clear (void);
     [propget]
     HRESULT __stdcall AudienceCount (
       [out retval] long *plCount
     );
     [propget]
     HRESULT __stdcall Audience (
       [in] long lIndex,
       [out retval] dispinterface IWMEncAudienceObj **ppAudience
     );
     HRESULT __stdcall AddAudience (
       [in] long lBitrate,
       [out retval] dispinterface IWMEncAudienceObj **ppAudience
     );
     HRESULT __stdcall DeleteAudience (
       [in] long lIndex
     );
     [id(3065), propget]
     HRESULT __stdcall ValidateMode (
       [out retval] WINBOOL *pfValidate
     );
     [id(3065), propput]
     HRESULT __stdcall ValidateMode (
       [in] WINBOOL argNo1
     );
     HRESULT __stdcall Validate (void);
     [propget]
     HRESULT __stdcall CompatibilityMode (
       [out retval] enum WMENC_PROFILE_COMPATIBILITY *penumCompat
     );
     [id(3067), propput]
     HRESULT __stdcall CompatibilityMode (
       [in] enum WMENC_PROFILE_COMPATIBILITY argNo1
     );
     [propget]
     HRESULT __stdcall VBRMode (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSite,
       [out retval] enum WMENC_PROFILE_VBR_MODE *penumVBR
     );
     [id(3068), propput]
     HRESULT __stdcall VBRMode (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSite,
       [in] enum WMENC_PROFILE_VBR_MODE argNo3
     );
     [propput]
     HRESULT __stdcall ProfileName (
       [in] BSTR argNo1
     );
     [id(3069), propget]
     HRESULT __stdcall ProfileName (
       [out retval] BSTR *pbstrName
     );
     [propput]
     HRESULT __stdcall ProfileDescription (
       [in] BSTR argNo1
     );
     [id(3070), propget]
     HRESULT __stdcall ProfileDescription (
       [out retval] BSTR *pbstrDescription
     );
     [id(3080), propget]
     HRESULT __stdcall AudioCodecCount (
       [out retval] long *plAudioCodecCount
     );
     [id(3071)]
     HRESULT __stdcall EnumAudioCodec (
       [in] long lCodecIndex,
       [out] VARIANT *pvarName,
       [out retval] long *lFormatTag
     );
     [id(3081), propget]
     HRESULT __stdcall AudioFormatCount (
       [in] long lCodecIndex,
       [out retval] long *plAudioFormatCount
     );
     [id(3072)]
     HRESULT __stdcall EnumAudioFormat (
       [in] long lCodecIndex,
       [in] long lFormatIndex,
       [out] VARIANT *pvarName,
       [out] VARIANT *pvarSamplingRate,
       [out] VARIANT *pvarNChannels,
       [out] VARIANT *pvarBitsPerSample,
       [out retval] long *plBitrate
     );
     [id(3082), propget]
     HRESULT __stdcall VideoCodecCount (
       [out retval] long *plVideoCodecCount
     );
     [id(3073)]
     HRESULT __stdcall EnumVideoCodec (
       [in] long lCodecIndex,
       [out] VARIANT *pvarName,
       [out retval] long *lFourCC
     );
     HRESULT __stdcall GetCodecIndexFromFourCC (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] long lFourCC,
       [out retval] long *plIndex
     );
     HRESULT __stdcall GetCodecFourCCFromIndex (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] long lIndex,
       [out retval] long *plFourCC
     );
     [id(3085), propget]
     HRESULT __stdcall LanguageCount (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSite,
       [out retval] long *plLanguageCount
     );
     [propget]
     HRESULT __stdcall Language (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSite,
       [in] long lLanguageIndex,
       [out retval] long *lcidLanguage
     );
     HRESULT __stdcall AddLanguage (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSite,
       [in] long lcidLanguage
     );
     HRESULT __stdcall RemoveLanguage (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] short iRenderSite,
       [in] long lcidLanguage
     );
     [id(3076), propget]
     HRESULT __stdcall BroadcastMode (
       [out retval] enum WMENC_PROFILE_BROADCAST_MODE *penumBroadcastMode
     );
     [id(3076), propput]
     HRESULT __stdcall BroadcastMode (
       [in] enum WMENC_PROFILE_BROADCAST_MODE argNo1
     );
     HRESULT __stdcall DetectCompatibility (
       [out retval] enum WMENC_PROFILE_COMPATIBILITY *penumCompat
     );
     HRESULT __stdcall Merge (
       [in] dispinterface IWMEncProfile2 *pWMEncProfileObj
     );
     HRESULT __stdcall Compare (
       [in] dispinterface IWMEncProfile2 *pCompObj,
       [out] WINBOOL *pfSubset,
       [out retval] WINBOOL *pfEqual
     );
     [id(3083), propget]
     HRESULT __stdcall InterlaceMode (
       [in] short iRenderSiteIndex,
       [out retval] WINBOOL *pfInterlaceMode
     );
     [id(3083), propput]
     HRESULT __stdcall InterlaceMode (
       [in] short iRenderSiteIndex,
       [in] WINBOOL argNo2
     );
     [propget]
     HRESULT __stdcall NonSquarePixelMode (
       [in] short iRenderSiteIndex,
       [out retval] WINBOOL *pfNonSquarePixelMode
     );
     [id(3084), propput]
     HRESULT __stdcall NonSquarePixelMode (
       [in] short iRenderSiteIndex,
       [in] WINBOOL argNo2
     );
     [id(3089), propget]
     HRESULT __stdcall EnableTimecode (
       [in] short iRenderSiteIndex,
       [out retval] WINBOOL *pfTimecode
     );
     [id(3089), propput]
     HRESULT __stdcall EnableTimecode (
       [in] short iRenderSiteIndex,
       [in] WINBOOL argNo2
     );
     [propget]
     HRESULT __stdcall MinPacketSize (
       [out retval] long *plMinPacketSize
     );
     [id(3090), propput]
     HRESULT __stdcall MinPacketSize (
       [in] long argNo1
     );
   };
   [
     uuid(FBBC528B-D265-414E-B584-84A15FF8CF8B),
     helpstring("Not Public.  Internal interface used by Windows Media Player."),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IWMEncStreamEdit : IDispatch
   {
     [id(2680), propget]
     HRESULT __stdcall OutputFile (
       [out retval] BSTR *pbstrOutputFile
     );
     [id(2680), propput]
     HRESULT __stdcall OutputFile (
       [in] BSTR argNo1
     );
     HRESULT __stdcall AddStream (
       [in] BSTR bstrInputFile,
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] long lInputAudienceIndex,
       [in] short iInputRenderSite,
       [in] long lInputLangId,
       [in] long lOutputAudienceIndex,
       [in] short iOutputRenderSite
     );
     HRESULT __stdcall RemoveAllStreams (void);
     HRESULT __stdcall Validate (void);
     HRESULT __stdcall Start (void);
     HRESULT __stdcall Stop (void);
     [id(2687), propget]
     HRESULT __stdcall OutputProfile (
       [out retval] dispinterface IWMEncProfile2 **ppIWMEncProfile2
     );
     [id(2686), propget]
     HRESULT __stdcall RunState (
       [out retval] enum WMENC_BASICEDIT_STATE *penumState
     );
     [id(2688)]
     HRESULT __stdcall GetStream (
       [in] enum WMENC_SOURCE_TYPE enumSrcType,
       [in] long lOutputAudienceIndex,
       [in] short iOutputRenderSite,
       [in] long lcidLang,
       [out] VARIANT *pvarInputFile,
       [out] VARIANT *pvarInputAudienceIndex,
       [out retval] short *piInputRenderSite
     );
     [propget]
     HRESULT __stdcall ProgressPercent (
       [out retval] long *plProgressPercent
     );
   };

};

/* Interface declarations.  */
[
  uuid(2CC1A314-08B6-4CC2-8913-62DA2B05173F),
  helpstring("IWMEncFileTransferSource Interface"),
  dispatchable
]
interface IWMEncFileTransferSource : IDispatch
{
  [id(10), propget]
  HRESULT __stdcall Count (
    [out retval] long *plCount
  );
  [id(0)]
  HRESULT __stdcall Item (
    [in] long lIndex,
    [out retval] dispinterface IWMEncFileSet **ppEntry
  );
  [id(2610)]
  HRESULT __stdcall Add (
    [out retval] dispinterface IWMEncFileSet **ppHTMLDataGroup
  );
  HRESULT __stdcall Remove (
    [in] long lIndex
  );
  HRESULT __stdcall RemoveAll (void);
  HRESULT __stdcall Move (
    [in] long lMove,
    [in] long lInFrontOf
  );
  [propget]
  HRESULT __stdcall UserDrivenMode (
    [out retval] WINBOOL *pfSendMode
  );
  [id(2614), propput]
  HRESULT __stdcall UserDrivenMode (
    [in] WINBOOL argNo1
  );
  HRESULT __stdcall Send (
    [in] dispinterface IWMEncFileSet *pIWMEncFileSet
  );
  HRESULT __stdcall Abort (void);
  [propget]
  HRESULT __stdcall State (
    [out retval] enum WMENC_SOURCE_STATE *penumSourceState
  );
  [id(2620), propget]
  HRESULT __stdcall Active (
    [out retval] dispinterface IWMEncFileSet **ppIWMEncFileSet
  );
};

