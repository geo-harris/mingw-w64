/* Automated generated idl file <feeds>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Union record forward declarations.  */
dispinterface IFeedsManager;
dispinterface IFeedsEnum;
dispinterface IFeedFolder;
dispinterface IFeedFolderEvents;
dispinterface IFeed;
dispinterface IFeed2;
dispinterface IFeedEvents;
dispinterface IFeedItem;
dispinterface IFeedItem2;
dispinterface IFeedEnclosure;

/* Union record forward declarations.  */
coclass FeedsManager;
coclass FeedFolderWatcher;
coclass FeedWatcher;

/* Enumeration declarations.  */
enum FEEDS_BACKGROUNDSYNC_ACTION
{
  FBSA_DISABLE = (int) 201326592,
  FBSA_ENABLE = (int) 201326593,
  FBSA_RUNNOW = (int) 201326594
};
enum FEEDS_BACKGROUNDSYNC_STATUS
{
  FBSS_DISABLED = (int) 201326592,
  FBSS_ENABLED = (int) 201326593
};
enum FEEDS_EVENTS_SCOPE
{
  FES_ALL = (int) 201326592,
  FES_SELF_ONLY = (int) 201326593,
  FES_SELF_AND_CHILDREN_ONLY = (int) 201326594
};
enum FEEDS_EVENTS_MASK
{
  FEM_FOLDEREVENTS = (int) 201326593,
  FEM_FEEDEVENTS = (int) 201326594
};
enum FEEDS_DOWNLOAD_ERROR
{
  FDE_NONE = (int) 201326592,
  FDE_DOWNLOAD_FAILED = (int) 201326593,
  FDE_INVALID_FEED_FORMAT = (int) 201326594,
  FDE_NORMALIZATION_FAILED = (int) 201326595,
  FDE_PERSISTENCE_FAILED = (int) 201326596,
  FDE_DOWNLOAD_BLOCKED = (int) 201326597,
  FDE_CANCELED = (int) 201326598,
  FDE_UNSUPPORTED_AUTH = (int) 201326599,
  FDE_BACKGROUND_DOWNLOAD_DISABLED = (int) 201326600,
  FDE_NOT_EXIST = (int) 201326601,
  FDE_UNSUPPORTED_MSXML = (int) 201326602,
  FDE_UNSUPPORTED_DTD = (int) 201326603,
  FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED = (int) 201326604,
  FDE_ACCESS_DENIED = (int) 201326605,
  FDE_AUTH_FAILED = (int) 201326606,
  FDE_INVALID_AUTH = (int) 201326607
};
enum FEEDS_XML_SORT_PROPERTY
{
  FXSP_NONE = (int) 201326592,
  FXSP_PUBDATE = (int) 201326593,
  FXSP_DOWNLOADTIME = (int) 201326594
};
enum FEEDS_XML_SORT_ORDER
{
  FXSO_NONE = (int) 201326592,
  FXSO_ASCENDING = (int) 201326593,
  FXSO_DESCENDING = (int) 201326594
};
enum FEEDS_XML_FILTER_FLAGS
{
  FXFF_ALL = (int) 201326592,
  FXFF_UNREAD = (int) 201326593,
  FXFF_READ = (int) 201326594
};
enum FEEDS_XML_INCLUDE_FLAGS
{
  FXIF_NONE = (int) 201326592,
  FXIF_CF_EXTENSIONS = (int) 201326593
};
enum FEEDS_SYNC_SETTING
{
  FSS_DEFAULT = (int) 201326592,
  FSS_INTERVAL = (int) 201326593,
  FSS_MANUAL = (int) 201326594,
  FSS_SUGGESTED = (int) 201326595
};
enum FEEDS_DOWNLOAD_STATUS
{
  FDS_NONE = (int) 201326592,
  FDS_PENDING = (int) 201326593,
  FDS_DOWNLOADING = (int) 201326594,
  FDS_DOWNLOADED = (int) 201326595,
  FDS_DOWNLOAD_FAILED = (int) 201326596
};

[
  uuid(9CDCD9C9-BC40-41C6-89C5-230466DB0BD0),
  version(2.0),
  helpstring("Microsoft Feeds")
]
library feeds
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(FAEB54C4-F66F-4806-83A0-805299F5E3AD),
     helpstring("Exposes methods to access the System Feed List."),
     cancreate
   ]
   coclass FeedsManager
   {
     dispinterface IFeedsManager;
   };
   [
     uuid(281001ED-7765-4CB0-84AF-E9B387AF01FF),
     helpstring("Exposes event handlers for System Feed List folder events."),
     hidden
   ]
   coclass FeedFolderWatcher
   {
     dispinterface IFeedFolderEvents;
   };
   [
     uuid(18A6737B-F433-4687-89BC-A1B4DFB9F123),
     helpstring("Exposes event handlers for feed events."),
     hidden
   ]
   coclass FeedWatcher
   {
     dispinterface IFeedEvents;
   };

   /* Dispatch interface declarations.  */
   [
     uuid(A74029CC-1F1A-4906-88F0-810638D86591),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedsManager : IDispatch
   {
     [id(4096), propget]
     HRESULT __stdcall RootFolder (
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall IsSubscribed (
       [in] BSTR feedUrl,
       [out retval] WINBOOL *subscribed
     );
     HRESULT __stdcall ExistsFeed (
       [in] BSTR feedPath,
       [out retval] WINBOOL *exists
     );
     HRESULT __stdcall GetFeed (
       [in] BSTR feedPath,
       [out retval] IDispatch **disp
     );
     [id(4104)]
     HRESULT __stdcall GetFeedByUrl (
       [in] BSTR feedUrl,
       [out retval] IDispatch **disp
     );
     [id(4100)]
     HRESULT __stdcall ExistsFolder (
       [in] BSTR folderPath,
       [out retval] WINBOOL *exists
     );
     HRESULT __stdcall GetFolder (
       [in] BSTR folderPath,
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall DeleteFeed (
       [in] BSTR feedPath
     );
     HRESULT __stdcall DeleteFolder (
       [in] BSTR folderPath
     );
     [id(4105)]
     HRESULT __stdcall BackgroundSync (
       [in] enum FEEDS_BACKGROUNDSYNC_ACTION action
     );
     [propget]
     HRESULT __stdcall BackgroundSyncStatus (
       [out retval] enum FEEDS_BACKGROUNDSYNC_STATUS *status
     );
     [propget]
     HRESULT __stdcall DefaultInterval (
       [out retval] long *minutes
     );
     [id(4107), propput]
     HRESULT __stdcall DefaultInterval (
       [in] long argNo1
     );
     HRESULT __stdcall AsyncSyncAll (void);
     HRESULT __stdcall Normalize (
       [in] BSTR feedXmlIn,
       [out retval] BSTR *feedXmlOut
     );
     [propget]
     HRESULT __stdcall ItemCountLimit (
       [out retval] long *ItemCountLimit
     );
   };
   [
     uuid(E3CD0028-2EED-4C60-8FAE-A3225309A836),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedsEnum : IDispatch
   {
     [id(8192), propget]
     HRESULT __stdcall Count (
       [out retval] long *Count
     );
     HRESULT __stdcall Item (
       [in] long index,
       [out retval] IDispatch **disp
     );
     [id(-4), propget, restricted, hidden]
     HRESULT __stdcall _NewEnum (
       [out retval] interface IEnumVARIANT **enumVar
     );
   };
   [
     uuid(81F04AD1-4194-4D7D-86D6-11813CEC163C),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedFolder : IDispatch
   {
     [id(12288), propget]
     HRESULT __stdcall Feeds (
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall Subfolders (
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall CreateFeed (
       [in] BSTR feedName,
       [in] BSTR feedUrl,
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall CreateSubfolder (
       [in] BSTR folderName,
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall ExistsFeed (
       [in] BSTR feedName,
       [out retval] WINBOOL *exists
     );
     HRESULT __stdcall GetFeed (
       [in] BSTR feedName,
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall ExistsSubfolder (
       [in] BSTR folderName,
       [out retval] WINBOOL *exists
     );
     HRESULT __stdcall GetSubfolder (
       [in] BSTR folderName,
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall Delete (void);
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *folderName
     );
     HRESULT __stdcall Rename (
       [in] BSTR folderName
     );
     [propget]
     HRESULT __stdcall Path (
       [out retval] BSTR *folderPath
     );
     HRESULT __stdcall Move (
       [in] BSTR newParentPath
     );
     [propget]
     HRESULT __stdcall Parent (
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall IsRoot (
       [out retval] WINBOOL *IsRoot
     );
     [propget]
     HRESULT __stdcall TotalUnreadItemCount (
       [out retval] long *Count
     );
     [propget]
     HRESULT __stdcall TotalItemCount (
       [out retval] long *Count
     );
     HRESULT __stdcall GetWatcher (
       [in] enum FEEDS_EVENTS_SCOPE scope,
       [in] enum FEEDS_EVENTS_MASK mask,
       [out retval] IDispatch **disp
     );
   };
   [
     uuid(20A59FA6-A844-4630-9E98-175F70B4D55B),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedFolderEvents : IDispatch
   {
     [id(28672)]
     HRESULT __stdcall Error (void);
     HRESULT __stdcall FolderAdded (
       [in] BSTR Path
     );
     HRESULT __stdcall FolderDeleted (
       [in] BSTR Path
     );
     HRESULT __stdcall FolderRenamed (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FolderMovedFrom (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FolderMovedTo (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FolderItemCountChanged (
       [in] BSTR Path,
       [in] long itemCountType
     );
     HRESULT __stdcall FeedAdded (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedDeleted (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedRenamed (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FeedUrlChanged (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedMovedFrom (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FeedMovedTo (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FeedDownloading (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedDownloadCompleted (
       [in] BSTR Path,
       [in] enum FEEDS_DOWNLOAD_ERROR Error
     );
     HRESULT __stdcall FeedItemCountChanged (
       [in] BSTR Path,
       [in] long itemCountType
     );
   };
   [
     uuid(F7F915D8-2EDE-42BC-98E7-A5D05063A757),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeed : IDispatch
   {
     [id(16384)]
     HRESULT __stdcall Xml (
       [in] long Count,
       [in] enum FEEDS_XML_SORT_PROPERTY sortProperty,
       [in] enum FEEDS_XML_SORT_ORDER sortOrder,
       [in] enum FEEDS_XML_FILTER_FLAGS filterFlags,
       [in] enum FEEDS_XML_INCLUDE_FLAGS includeFlags,
       [out retval] BSTR *Xml
     );
     [propget]
     HRESULT __stdcall Name (
       [out retval] BSTR *Name
     );
     HRESULT __stdcall Rename (
       [in] BSTR Name
     );
     [propget]
     HRESULT __stdcall Url (
       [out retval] BSTR *feedUrl
     );
     [id(16387), propput]
     HRESULT __stdcall Url (
       [in] BSTR argNo1
     );
     [propget]
     HRESULT __stdcall LocalId (
       [out retval] BSTR *feedGuid
     );
     [propget]
     HRESULT __stdcall Path (
       [out retval] BSTR *Path
     );
     HRESULT __stdcall Move (
       [in] BSTR newParentPath
     );
     [propget]
     HRESULT __stdcall Parent (
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall LastWriteTime (
       [out retval] DATE *lastWrite
     );
     HRESULT __stdcall Delete (void);
     HRESULT __stdcall Download (void);
     HRESULT __stdcall AsyncDownload (void);
     HRESULT __stdcall CancelAsyncDownload (void);
     [id(16398), propget]
     HRESULT __stdcall SyncSetting (
       [out retval] enum FEEDS_SYNC_SETTING *SyncSetting
     );
     [id(16398), propput]
     HRESULT __stdcall SyncSetting (
       [in] enum FEEDS_SYNC_SETTING argNo1
     );
     [id(16397), propget]
     HRESULT __stdcall Interval (
       [out retval] long *minutes
     );
     [id(16397), propput]
     HRESULT __stdcall Interval (
       [in] long argNo1
     );
     [id(16399), propget]
     HRESULT __stdcall LastDownloadTime (
       [out retval] DATE *lastDownload
     );
     [propget]
     HRESULT __stdcall LocalEnclosurePath (
       [out retval] BSTR *Path
     );
     [propget]
     HRESULT __stdcall Items (
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall GetItem (
       [in] long itemId,
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall Title (
       [out retval] BSTR *Title
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *Description
     );
     [propget]
     HRESULT __stdcall Link (
       [out retval] BSTR *homePage
     );
     [propget]
     HRESULT __stdcall Image (
       [out retval] BSTR *imageUrl
     );
     [propget]
     HRESULT __stdcall LastBuildDate (
       [out retval] DATE *LastBuildDate
     );
     [propget]
     HRESULT __stdcall PubDate (
       [out retval] DATE *lastPopulateDate
     );
     [propget]
     HRESULT __stdcall Ttl (
       [out retval] long *Ttl
     );
     [propget]
     HRESULT __stdcall Language (
       [out retval] BSTR *Language
     );
     [propget]
     HRESULT __stdcall Copyright (
       [out retval] BSTR *Copyright
     );
     [id(16422), propget]
     HRESULT __stdcall MaxItemCount (
       [out retval] long *Count
     );
     [id(16422), propput]
     HRESULT __stdcall MaxItemCount (
       [in] long argNo1
     );
     [id(16412), propget]
     HRESULT __stdcall DownloadEnclosuresAutomatically (
       [out retval] WINBOOL *DownloadEnclosuresAutomatically
     );
     [id(16412), propput]
     HRESULT __stdcall DownloadEnclosuresAutomatically (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall DownloadStatus (
       [out retval] enum FEEDS_DOWNLOAD_STATUS *status
     );
     [propget]
     HRESULT __stdcall LastDownloadError (
       [out retval] enum FEEDS_DOWNLOAD_ERROR *Error
     );
     HRESULT __stdcall Merge (
       [in] BSTR feedXml,
       [in] BSTR feedUrl
     );
     [propget]
     HRESULT __stdcall DownloadUrl (
       [out retval] BSTR *feedUrl
     );
     [propget]
     HRESULT __stdcall IsList (
       [out retval] WINBOOL *IsList
     );
     HRESULT __stdcall MarkAllItemsRead (void);
     HRESULT __stdcall GetWatcher (
       [in] enum FEEDS_EVENTS_SCOPE scope,
       [in] enum FEEDS_EVENTS_MASK mask,
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall UnreadItemCount (
       [out retval] long *Count
     );
     [propget]
     HRESULT __stdcall ItemCount (
       [out retval] long *Count
     );
   };
   [
     uuid(33F2EA09-1398-4AB9-B6A4-F94B49D0A42E),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeed2 : IFeed
   {
     [id(16423)]
     HRESULT __stdcall GetItemByEffectiveId (
       [in] long itemEffectiveId,
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall LastItemDownloadTime (
       [out retval] DATE *LastItemDownloadTime
     );
     [propget]
     HRESULT __stdcall Username (
       [out retval] BSTR *Username
     );
     [propget]
     HRESULT __stdcall Password (
       [out retval] BSTR *Password
     );
     HRESULT __stdcall SetCredentials (
       [in] BSTR Username,
       [in] BSTR Password
     );
     HRESULT __stdcall ClearCredentials (void);
   };
   [
     uuid(ABF35C99-0681-47EA-9A8C-1436A375A99E),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedEvents : IDispatch
   {
     [id(32768)]
     HRESULT __stdcall Error (void);
     HRESULT __stdcall FeedDeleted (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedRenamed (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FeedUrlChanged (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedMoved (
       [in] BSTR Path,
       [in] BSTR oldPath
     );
     HRESULT __stdcall FeedDownloading (
       [in] BSTR Path
     );
     HRESULT __stdcall FeedDownloadCompleted (
       [in] BSTR Path,
       [in] enum FEEDS_DOWNLOAD_ERROR Error
     );
     [id(28687)]
     HRESULT __stdcall FeedItemCountChanged (
       [in] BSTR Path,
       [in] long itemCountType
     );
   };
   [
     uuid(0A1E6CAD-0A47-4DA2-A13D-5BAAA5C8BD4F),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedItem : IDispatch
   {
     [id(20480)]
     HRESULT __stdcall Xml (
       [in] enum FEEDS_XML_INCLUDE_FLAGS includeFlags,
       [out retval] BSTR *Xml
     );
     [propget]
     HRESULT __stdcall Title (
       [out retval] BSTR *Title
     );
     [propget]
     HRESULT __stdcall Link (
       [out retval] BSTR *linkUrl
     );
     [propget]
     HRESULT __stdcall Guid (
       [out retval] BSTR *itemGuid
     );
     [propget]
     HRESULT __stdcall Description (
       [out retval] BSTR *Description
     );
     [propget]
     HRESULT __stdcall PubDate (
       [out retval] DATE *PubDate
     );
     [propget]
     HRESULT __stdcall Comments (
       [out retval] BSTR *Comments
     );
     [propget]
     HRESULT __stdcall Author (
       [out retval] BSTR *Author
     );
     [propget]
     HRESULT __stdcall Enclosure (
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall IsRead (
       [out retval] WINBOOL *IsRead
     );
     [id(20489), propput]
     HRESULT __stdcall IsRead (
       [in] WINBOOL argNo1
     );
     [propget]
     HRESULT __stdcall LocalId (
       [out retval] long *itemId
     );
     [propget]
     HRESULT __stdcall Parent (
       [out retval] IDispatch **disp
     );
     HRESULT __stdcall Delete (void);
     [propget]
     HRESULT __stdcall DownloadUrl (
       [out retval] BSTR *itemUrl
     );
     [propget]
     HRESULT __stdcall LastDownloadTime (
       [out retval] DATE *lastDownload
     );
     [propget]
     HRESULT __stdcall Modified (
       [out retval] DATE *Modified
     );
   };
   [
     uuid(79AC9EF4-F9C1-4D2B-A50B-A7FFBA4DCF37),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedItem2 : IFeedItem
   {
     [id(20496), propget]
     HRESULT __stdcall EffectiveId (
       [out retval] long *EffectiveId
     );
   };
   [
     uuid(361C26F7-90A4-4E67-AE09-3A36A546436A),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface IFeedEnclosure : IDispatch
   {
     [id(24576), propget]
     HRESULT __stdcall Url (
       [out retval] BSTR *enclosureUrl
     );
     [propget]
     HRESULT __stdcall Type (
       [out retval] BSTR *mimeType
     );
     [propget]
     HRESULT __stdcall Length (
       [out retval] long *Length
     );
     HRESULT __stdcall AsyncDownload (void);
     HRESULT __stdcall CancelAsyncDownload (void);
     [propget]
     HRESULT __stdcall DownloadStatus (
       [out retval] enum FEEDS_DOWNLOAD_STATUS *status
     );
     [propget]
     HRESULT __stdcall LastDownloadError (
       [out retval] enum FEEDS_DOWNLOAD_ERROR *Error
     );
     [propget]
     HRESULT __stdcall LocalPath (
       [out retval] BSTR *LocalPath
     );
     [propget]
     HRESULT __stdcall Parent (
       [out retval] IDispatch **disp
     );
     [propget]
     HRESULT __stdcall DownloadUrl (
       [out retval] BSTR *enclosureUrl
     );
     [propget]
     HRESULT __stdcall DownloadMimeType (
       [out retval] BSTR *mimeType
     );
     HRESULT __stdcall RemoveFile (void);
     HRESULT __stdcall SetFile (
       [in] BSTR DownloadUrl,
       [in] BSTR downloadFilePath,
       [in] BSTR DownloadMimeType,
       [in] BSTR enclosureFilename
     );
   };

};

