/* Automated generated idl file <timep>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IContentProxy;
interface ITIMEContentPlayerSite;

/* Union record forward declarations.  */
dispinterface ITIMEMediaPlayerOld;
dispinterface TIMEMediaPlayerEvents;
dispinterface ITIMEMediaNative;
dispinterface _MediaPlayerEvents;

/* Enumeration declarations.  */
[
  helpstring("ActiveMovie Readiness State")
]
enum __MIDL___MIDL_itf_MediaPrivate_0001_0049_0001
{
  amvUninitialized = (int) 201326592,
  amvLoading = (int) 201326593,
  amvInteractive = (int) 201326595,
  amvComplete = (int) 201326596
};
enum fireEvent
{
  OnShow = (int) 201326592,
  OnHide = (int) 201326593
};

/* Type definitions.  */
[
  helpstring("ActiveMovie Readiness State")
]
typedef enum __MIDL___MIDL_itf_MediaPrivate_0001_0049_0001 ReadyStateConstants;

[
  uuid(CE210C64-596E-4355-85D0-106FB35F920F),
  version(1.0)
]
library timep
{
  importlib("stdole2.tlb");

   /* Dispatch interface declarations.  */
   [
     uuid(E6FAA0B2-69FE-11D2-B259-00A0C90D6111),
     dual,
     oleautomation,
     dispatchable
   ]
   dispinterface ITIMEMediaPlayerOld : IDispatch
   {
     [id(1610743808)]
     HRESULT __stdcall Init (void);
     HRESULT __stdcall clipBegin (
       [in] VARIANT varClipBegin
     );
     HRESULT __stdcall clipEnd (
       [in] VARIANT varClipEnd
     );
     HRESULT __stdcall begin (void);
     HRESULT __stdcall end (void);
     HRESULT __stdcall resume (void);
     HRESULT __stdcall pause (void);
     HRESULT __stdcall tick (void);
     [propput]
     HRESULT __stdcall CurrentTime (
       [in] double argNo1
     );
     [id(1610743816), propget]
     HRESULT __stdcall CurrentTime (
       [out retval] double *dblCurrentTime
     );
     [id(1610743818), propput]
     HRESULT __stdcall src (
       [in] BSTR argNo1
     );
     [id(1610743818), propget]
     HRESULT __stdcall src (
       [out retval] BSTR *pbstrURL
     );
     [id(1610743820), propput]
     HRESULT __stdcall repeat (
       [in] long argNo1
     );
     [id(1610743820), propget]
     HRESULT __stdcall repeat (
       [out retval] long *ltime
     );
     [id(1610743822)]
     HRESULT __stdcall cue (void);
   };
   [
     uuid(4539E412-7813-11D2-B25F-00A0C90D6111),
     hidden,
     dispatchable
   ]
   dispinterface TIMEMediaPlayerEvents
   {
     [id(2305)]
     void __stdcall onbegin (void);
     void __stdcall onend (void);
     void __stdcall onresume (void);
     void __stdcall onpause (void);
     void __stdcall onmediaready (void);
     [id(2311)]
     void __stdcall onmedialoadfailed (void);
   };
   [
     uuid(3E3535C0-445B-4EF4-8A38-4D379CBC9828),
     dual,
     oleautomation
   ]
   dispinterface ITIMEMediaNative : IUnknown
   {
     [id(5633), hidden]
     HRESULT __stdcall seekActiveTrack (
       [in] double dblSeekTime
     );
     [propget, hidden]
     HRESULT __stdcall activeTrackTime (
       [out retval] double *dblActiveTrackTime
     );
   };
   [
     uuid(2D3A4C40-E711-11D0-94AB-0080C74C7E95),
     helpstring("Event interface for Windows Media Player control"),
     hidden,
     dispatchable
   ]
   dispinterface _MediaPlayerEvents
   {
     [id(1505)]
     void __stdcall DVDNotify (
       [in] long EventCode,
       [in] long EventParam1,
       [in] long EventParam2
     );
     [id(3002)]
     void __stdcall EndOfStream (
       [in] long Result
     );
     [id(-602)]
     void __stdcall KeyDown (
       [in] short KeyCode,
       [in] short ShiftState
     );
     [id(-604)]
     void __stdcall KeyUp (
       [in] short KeyCode,
       [in] short ShiftState
     );
     void __stdcall KeyPress (
       [in] short CharacterCode
     );
     [id(-606)]
     void __stdcall MouseMove (
       [in] short Button,
       [in] short ShiftState,
       [in] OLE_XPOS_PIXELS x,
       [in] OLE_YPOS_PIXELS y
     );
     void __stdcall MouseDown (
       [in] short Button,
       [in] short ShiftState,
       [in] OLE_XPOS_PIXELS x,
       [in] OLE_YPOS_PIXELS y
     );
     [id(-607)]
     void __stdcall MouseUp (
       [in] short Button,
       [in] short ShiftState,
       [in] OLE_XPOS_PIXELS x,
       [in] OLE_YPOS_PIXELS y
     );
     [id(-600)]
     void __stdcall Click (
       [in] short Button,
       [in] short ShiftState,
       [in] OLE_XPOS_PIXELS x,
       [in] OLE_YPOS_PIXELS y
     );
     [id(-601)]
     void __stdcall DblClick (
       [in] short Button,
       [in] short ShiftState,
       [in] OLE_XPOS_PIXELS x,
       [in] OLE_YPOS_PIXELS y
     );
     [id(3011)]
     void __stdcall OpenStateChange (
       [in] long OldState,
       [in] long NewState
     );
     void __stdcall PlayStateChange (
       [in] long OldState,
       [in] long NewState
     );
     [id(3001)]
     void __stdcall ScriptCommand (
       [in] BSTR scType,
       [in] BSTR Param
     );
     [id(3003)]
     void __stdcall Buffering (
       [in] WINBOOL Start
     );
     [id(3010)]
     void __stdcall Error (void);
     [id(3006)]
     void __stdcall MarkerHit (
       [in] long MarkerNum
     );
     [id(3009)]
     void __stdcall Warning (
       [in] long WarningType,
       [in] long Param,
       [in] BSTR Description
     );
     [id(3008)]
     void __stdcall NewStream (void);
     [id(3004)]
     void __stdcall Disconnect (
       [in] long Result
     );
     [id(2)]
     void __stdcall PositionChange (
       [in] double oldPosition,
       [in] double newPosition
     );
     [id(51)]
     void __stdcall DisplayModeChange (void);
     [id(-609)]
     void __stdcall ReadyStateChange (
       [in] ReadyStateConstants ReadyState
     );
   };

};

/* Interface declarations.  */
[
  uuid(EF508011-C806-4356-8492-D15E616F6F37)
]
interface IContentProxy : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall OnCreatedPlayer (void);
  HRESULT __stdcall fireEvent (
    enum fireEvent event
  );
  HRESULT __stdcall detachPlayer (void);
};
[
  uuid(911A444E-B951-43EA-B3AA-17EFC2879831)
]
interface ITIMEContentPlayerSite : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetEventRelaySite (
    IUnknown **ppiEventRelaySite
  );
};

