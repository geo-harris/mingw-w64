/* Automated generated idl file <mbnapi>.
 * Generated by genidl tool (c) 2009, 2010 Mingw-w64 project.
 */

/* Interface forward declarations.  */
interface IMbnInterface;
interface IMbnSubscriberInformation;
interface IMbnConnection;
interface IMbnInterfaceEvents;
interface IMbnSignal;
interface IMbnSignalEvents;
interface IMbnPinManager;
interface IMbnPin;
interface IMbnPinManagerEvents;
interface IMbnPinEvents;
interface IMbnRegistration;
interface IMbnRegistrationEvents;
interface IMbnConnectionContext;
interface IMbnConnectionContextEvents;
interface IMbnConnectionEvents;
interface IMbnConnectionProfileManager;
interface IMbnConnectionProfile;
interface IMbnConnectionProfileEvents;
interface IMbnSmsConfiguration;
interface IMbnSmsReadMsgPdu;
interface IMbnSmsReadMsgTextCdma;
interface IMbnSms;
interface IMbnSmsEvents;
interface IMbnServiceActivation;
interface IMbnServiceActivationEvents;
interface IMbnVendorSpecificOperation;
interface IMbnVendorSpecificEvents;
interface IMbnInterfaceManager;
interface IMbnInterfaceManagerEvents;
interface IMbnConnectionManager;
interface IMbnConnectionManagerEvents;
interface IMbnConnectionProfileManagerEvents;
interface IMbnRadio;
interface IMbnRadioEvents;
interface IConnectionPointContainer;
interface IEnumConnectionPoints;
interface IConnectionPoint;
interface IEnumConnections;

/* Structure forward declarations.  */
struct MBN_INTERFACE_CAPS;
struct MBN_PROVIDER;
struct MBN_PIN_INFO;
struct MBN_CONTEXT;
struct MBN_SMS_FILTER;
struct MBN_SMS_STATUS_INFO;
struct tagCONNECTDATA;

/* Union record forward declarations.  */
coclass MbnConnectionProfileManager;
coclass MbnInterfaceManager;
coclass MbnConnectionManager;

/* Enumeration declarations.  */
[
  uuid(DCBBBAB6-6002-4BBB-AAEE-338E368AF6FA),
  version(1.0),
  helpstring("Supported cellular technology classes")
]
enum MBN_CELLULAR_CLASS
{
  MBN_CELLULAR_CLASS_NONE = (int) 201326592,
  MBN_CELLULAR_CLASS_GSM = (int) 201326593,
  MBN_CELLULAR_CLASS_CDMA = (int) 201326594
};
[
  uuid(83A34F4C-BDC4-11DC-A8A8-001321F1405F),
  version(1.0)
]
enum MBN_DATA_CLASS
{
  MBN_DATA_CLASS_NONE = (int) 201326592,
  MBN_DATA_CLASS_GPRS = (int) 201326593,
  MBN_DATA_CLASS_EDGE = (int) 201326594,
  MBN_DATA_CLASS_UMTS = (int) 201326596,
  MBN_DATA_CLASS_HSDPA = (int) 201326600,
  MBN_DATA_CLASS_HSUPA = (int) 201326608,
  MBN_DATA_CLASS_LTE = (int) 201326624,
  MBN_DATA_CLASS_1XRTT = (int) 201392128,
  MBN_DATA_CLASS_1XEVDO = (int) 201457664,
  MBN_DATA_CLASS_1XEVDO_REVA = (int) 201588736,
  MBN_DATA_CLASS_1XEVDV = (int) 201850880,
  MBN_DATA_CLASS_3XRTT = (int) 202375168,
  MBN_DATA_CLASS_1XEVDO_REVB = (int) 203423744,
  MBN_DATA_CLASS_UMB = (int) 205520896,
  MBN_DATA_CLASS_CUSTOM = (int) -2147483648
};
[
  uuid(5DB6A98B-BDC5-11DC-A8A8-001321F1405F),
  version(1.0)
]
enum MBN_BAND_CLASS
{
  MBN_BAND_CLASS_NONE = (int) 201326592,
  MBN_BAND_CLASS_0 = (int) 201326593,
  MBN_BAND_CLASS_I = (int) 201326594,
  MBN_BAND_CLASS_II = (int) 201326596,
  MBN_BAND_CLASS_III = (int) 201326600,
  MBN_BAND_CLASS_IV = (int) 201326608,
  MBN_BAND_CLASS_V = (int) 201326624,
  MBN_BAND_CLASS_VI = (int) 201326656,
  MBN_BAND_CLASS_VII = (int) 201326720,
  MBN_BAND_CLASS_VIII = (int) 201326848,
  MBN_BAND_CLASS_IX = (int) 201327104,
  MBN_BAND_CLASS_X = (int) 201327616,
  MBN_BAND_CLASS_XI = (int) 201328640,
  MBN_BAND_CLASS_XII = (int) 201330688,
  MBN_BAND_CLASS_XIII = (int) 201334784,
  MBN_BAND_CLASS_XIV = (int) 201342976,
  MBN_BAND_CLASS_XV = (int) 201359360,
  MBN_BAND_CLASS_XVI = (int) 201392128,
  MBN_BAND_CLASS_XVII = (int) 201457664,
  MBN_BAND_CLASS_CUSTOM = (int) -2147483648
};
[
  uuid(DCBBBAB6-6012-4BBB-AAEE-338E368AF6FA),
  version(1.0),
  helpstring("Voice classes")
]
enum MBN_VOICE_CLASS
{
  MBN_VOICE_CLASS_NONE = (int) 201326592,
  MBN_VOICE_CLASS_NO_VOICE = (int) 201326593,
  MBN_VOICE_CLASS_SEPARATE_VOICE_DATA = (int) 201326594,
  MBN_VOICE_CLASS_SIMULTANEOUS_VOICE_DATA = (int) 201326595
};
[
  uuid(2308C1F7-BDC8-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("CTRL Caps")
]
enum MBN_CTRL_CAPS
{
  MBN_CTRL_CAPS_NONE = (int) 201326592,
  MBN_CTRL_CAPS_REG_MANUAL = (int) 201326593,
  MBN_CTRL_CAPS_HW_RADIO_SWITCH = (int) 201326594,
  MBN_CTRL_CAPS_CDMA_MOBILE_IP = (int) 201326596,
  MBN_CTRL_CAPS_CDMA_SIMPLE_IP = (int) 201326600,
  MBN_CTRL_CAPS_PROTECT_UNIQUEID = (int) 201326608
};
[
  uuid(E4096459-BDC8-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("SMS Caps")
]
enum MBN_SMS_CAPS
{
  MBN_SMS_CAPS_NONE = (int) 201326592,
  MBN_SMS_CAPS_PDU_RECEIVE = (int) 201326593,
  MBN_SMS_CAPS_PDU_SEND = (int) 201326594,
  MBN_SMS_CAPS_TEXT_RECEIVE = (int) 201326596,
  MBN_SMS_CAPS_TEXT_SEND = (int) 201326600
};
[
  uuid(59C235E7-BDC9-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Interface Caps Constants Type")
]
enum MBN_INTERFACE_CAPS_CONSTANTS
{
  MBN_DEVICEID_LEN = (int) 201326610,
  MBN_MANUFACTURER_LEN = (int) 201326624,
  MBN_MODEL_LEN = (int) 201326624,
  MBN_FIRMWARE_LEN = (int) 201326624
};
[
  uuid(DCBBBAB6-6003-4BBB-AAEE-338E368AF6FA),
  version(1.0),
  helpstring("Device Ready states")
]
enum MBN_READY_STATE
{
  MBN_READY_STATE_OFF = (int) 201326592,
  MBN_READY_STATE_INITIALIZED = (int) 201326593,
  MBN_READY_STATE_SIM_NOT_INSERTED = (int) 201326594,
  MBN_READY_STATE_BAD_SIM = (int) 201326595,
  MBN_READY_STATE_FAILURE = (int) 201326596,
  MBN_READY_STATE_NOT_ACTIVATED = (int) 201326597,
  MBN_READY_STATE_DEVICE_LOCKED = (int) 201326598,
  MBN_READY_STATE_DEVICE_BLOCKED = (int) 201326599
};
[
  uuid(6E1348BB-BDCB-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Provider States")
]
enum MBN_PROVIDER_STATE
{
  MBN_PROVIDER_STATE_NONE = (int) 201326592,
  MBN_PROVIDER_STATE_HOME = (int) 201326593,
  MBN_PROVIDER_STATE_FORBIDDEN = (int) 201326594,
  MBN_PROVIDER_STATE_PREFERRED = (int) 201326596,
  MBN_PROVIDER_STATE_VISIBLE = (int) 201326600,
  MBN_PROVIDER_STATE_REGISTERED = (int) 201326608
};
[
  uuid(934092FD-BDCB-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Provider Constants Type")
]
enum MBN_PROVIDER_CONSTANTS
{
  MBN_PROVIDERNAME_LEN = (int) 201326612,
  MBN_PROVIDERID_LEN = (int) 201326598
};
[
  uuid(42FAAC0B-BDCC-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Signal Constants Type")
]
enum MBN_SIGNAL_CONSTANTS
{
  MBN_RSSI_DEFAULT = (int) -1,
  MBN_RSSI_DISABLE = (int) 201326592,
  MBN_RSSI_UNKNOWN = (int) 201326691,
  MBN_ERROR_RATE_UNKNOWN = (int) 201326691
};
[
  uuid(DCBBBAB6-6005-4BBB-AAEE-338E368AF6FA),
  version(1.0),
  helpstring("Device Pin (Password) types")
]
enum MBN_PIN_TYPE
{
  MBN_PIN_TYPE_NONE = (int) 201326592,
  MBN_PIN_TYPE_CUSTOM = (int) 201326593,
  MBN_PIN_TYPE_PIN1 = (int) 201326594,
  MBN_PIN_TYPE_PIN2 = (int) 201326595,
  MBN_PIN_TYPE_DEVICE_SIM_PIN = (int) 201326596,
  MBN_PIN_TYPE_DEVICE_FIRST_SIM_PIN = (int) 201326597,
  MBN_PIN_TYPE_NETWORK_PIN = (int) 201326598,
  MBN_PIN_TYPE_NETWORK_SUBSET_PIN = (int) 201326599,
  MBN_PIN_TYPE_SVC_PROVIDER_PIN = (int) 201326600,
  MBN_PIN_TYPE_CORPORATE_PIN = (int) 201326601,
  MBN_PIN_TYPE_SUBSIDY_LOCK = (int) 201326602
};
[
  uuid(BD8A2871-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Pin modes")
]
enum MBN_PIN_MODE
{
  MBN_PIN_MODE_ENABLED = (int) 201326593,
  MBN_PIN_MODE_DISABLED = (int) 201326594
};
[
  uuid(C2A93665-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Pin Formats")
]
enum MBN_PIN_FORMAT
{
  MBN_PIN_FORMAT_NONE = (int) 201326592,
  MBN_PIN_FORMAT_NUMERIC = (int) 201326593,
  MBN_PIN_FORMAT_ALPHANUMERIC = (int) 201326594
};
[
  uuid(C75E76F5-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Pin Constants Type")
]
enum MBN_PIN_CONSTANTS
{
  MBN_ATTEMPTS_REMAINING_UNKNOWN = (int) -1,
  MBN_PIN_LENGTH_UNKNOWN = (int) -1
};
[
  uuid(D11BD29D-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Pin States")
]
enum MBN_PIN_STATE
{
  MBN_PIN_STATE_NONE = (int) 201326592,
  MBN_PIN_STATE_ENTER = (int) 201326593,
  MBN_PIN_STATE_UNBLOCK = (int) 201326594
};
[
  uuid(D5F1726B-BDCE-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Registration Constants")
]
enum MBN_REGISTRATION_CONSTANTS
{
  MBN_ROAMTEXT_LEN = (int) 201326656,
  MBN_CDMA_DEFAULT_PROVIDER_ID = (int) 201326592
};
[
  uuid(DCBBBAB6-6009-4BBB-AAEE-338E368AF6FA),
  version(1.0),
  helpstring("Network Registration States")
]
enum MBN_REGISTER_STATE
{
  MBN_REGISTER_STATE_NONE = (int) 201326592,
  MBN_REGISTER_STATE_DEREGISTERED = (int) 201326593,
  MBN_REGISTER_STATE_SEARCHING = (int) 201326594,
  MBN_REGISTER_STATE_HOME = (int) 201326595,
  MBN_REGISTER_STATE_ROAMING = (int) 201326596,
  MBN_REGISTER_STATE_PARTNER = (int) 201326597,
  MBN_REGISTER_STATE_DENIED = (int) 201326598
};
[
  uuid(D7F73F35-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Registration modes")
]
enum MBN_REGISTER_MODE
{
  MBN_REGISTER_MODE_NONE = (int) 201326592,
  MBN_REGISTER_MODE_AUTOMATIC = (int) 201326593,
  MBN_REGISTER_MODE_MANUAL = (int) 201326594
};
[
  uuid(0E62803F-BDD0-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Context Constants Type")
]
enum MBN_CONTEXT_CONSTANTS
{
  MBN_ACCESSSTRING_LEN = (int) 201326692,
  MBN_USERNAME_LEN = (int) 201326847,
  MBN_PASSWORD_LEN = (int) 201326847,
  MBN_CONTEXT_ID_APPEND = (int) -1
};
[
  uuid(E24B42EF-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Authentication Protocol Types")
]
enum MBN_AUTH_PROTOCOL
{
  MBN_AUTH_PROTOCOL_NONE = (int) 201326592,
  MBN_AUTH_PROTOCOL_PAP = (int) 201326593,
  MBN_AUTH_PROTOCOL_CHAP = (int) 201326594,
  MBN_AUTH_PROTOCOL_MSCHAPV2 = (int) 201326595
};
[
  uuid(E6A360B9-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Compression Mode")
]
enum MBN_COMPRESSION
{
  MBN_COMPRESSION_NONE = (int) 201326592,
  MBN_COMPRESSION_ENABLE = (int) 201326593
};
[
  uuid(EB4731EB-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Connection Context Types")
]
enum MBN_CONTEXT_TYPE
{
  MBN_CONTEXT_TYPE_NONE = (int) 201326592,
  MBN_CONTEXT_TYPE_INTERNET = (int) 201326593,
  MBN_CONTEXT_TYPE_VPN = (int) 201326594,
  MBN_CONTEXT_TYPE_VOICE = (int) 201326595,
  MBN_CONTEXT_TYPE_VIDEO_SHARE = (int) 201326596,
  MBN_CONTEXT_TYPE_CUSTOM = (int) 201326597
};
[
  uuid(EFB7C00D-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Activation States")
]
enum MBN_ACTIVATION_STATE
{
  MBN_ACTIVATION_STATE_NONE = (int) 201326592,
  MBN_ACTIVATION_STATE_ACTIVATED = (int) 201326593,
  MBN_ACTIVATION_STATE_ACTIVATING = (int) 201326594,
  MBN_ACTIVATION_STATE_DEACTIVATED = (int) 201326595,
  MBN_ACTIVATION_STATE_DEACTIVATING = (int) 201326596
};
[
  uuid(F601E1EB-BDCD-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Connection Modes")
]
enum MBN_CONNECTION_MODE
{
  MBN_CONNECTION_MODE_PROFILE = (int) 201326592,
  MBN_CONNECTION_MODE_TMP_PROFILE = (int) 201326593
};
[
  uuid(6D8846E5-BDD1-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Voice Call States")
]
enum MBN_VOICE_CALL_STATE
{
  MBN_VOICE_CALL_STATE_NONE = (int) 201326592,
  MBN_VOICE_CALL_STATE_IN_PROGRESS = (int) 201326593,
  MBN_VOICE_CALL_STATE_HANGUP = (int) 201326594
};
[
  version(1.0),
  helpstring("SMS Constants Type")
]
enum MBN_SMS_CONSTANTS
{
  MBN_MESSAGE_INDEX_NONE = (int) 201326592,
  MBN_CDMA_SHORT_MSG_SIZE_UNKNOWN = (int) 201326592,
  MBN_CDMA_SHORT_MSG_SIZE_MAX = (int) 201326752
};
[
  uuid(FC208FC1-BDE5-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("Message Status Types")
]
enum MBN_MSG_STATUS
{
  MBN_MSG_STATUS_NEW = (int) 201326592,
  MBN_MSG_STATUS_OLD = (int) 201326593,
  MBN_MSG_STATUS_DRAFT = (int) 201326594,
  MBN_MSG_STATUS_SENT = (int) 201326595
};
[
  uuid(29912B29-BDD4-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("SMS CDMA Language Types")
]
enum MBN_SMS_CDMA_LANG
{
  MBN_SMS_CDMA_LANG_NONE = (int) 201326592,
  MBN_SMS_CDMA_LANG_ENGLISH = (int) 201326593,
  MBN_SMS_CDMA_LANG_FRENCH = (int) 201326594,
  MBN_SMS_CDMA_LANG_SPANISH = (int) 201326595,
  MBN_SMS_CDMA_LANG_JAPANESE = (int) 201326596,
  MBN_SMS_CDMA_LANG_KOREAN = (int) 201326597,
  MBN_SMS_CDMA_LANG_CHINESE = (int) 201326598,
  MBN_SMS_CDMA_LANG_HEBREW = (int) 201326599
};
[
  uuid(7F8E74CB-BDD4-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("SMS CDMA Encoding Types")
]
enum MBN_SMS_CDMA_ENCODING
{
  MBN_SMS_CDMA_ENCODING_OCTET = (int) 201326592,
  MBN_SMS_CDMA_ENCODING_EPM = (int) 201326593,
  MBN_SMS_CDMA_ENCODING_7BIT_ASCII = (int) 201326594,
  MBN_SMS_CDMA_ENCODING_IA5 = (int) 201326595,
  MBN_SMS_CDMA_ENCODING_UNICODE = (int) 201326596,
  MBN_SMS_CDMA_ENCODING_SHIFT_JIS = (int) 201326597,
  MBN_SMS_CDMA_ENCODING_KOREAN = (int) 201326598,
  MBN_SMS_CDMA_ENCODING_LATIN_HEBREW = (int) 201326599,
  MBN_SMS_CDMA_ENCODING_LATIN = (int) 201326600,
  MBN_SMS_CDMA_ENCODING_GSM_7BIT = (int) 201326601
};
[
  uuid(0D42B514-BDDC-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("SMS Flags Types")
]
enum MBN_SMS_FLAG
{
  MBN_SMS_FLAG_ALL = (int) 201326592,
  MBN_SMS_FLAG_INDEX = (int) 201326593,
  MBN_SMS_FLAG_NEW = (int) 201326594,
  MBN_SMS_FLAG_OLD = (int) 201326595,
  MBN_SMS_FLAG_SENT = (int) 201326596,
  MBN_SMS_FLAG_DRAFT = (int) 201326597
};
[
  uuid(8098009D-BDDC-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("SMS Status Flags Types")
]
enum MBN_SMS_STATUS_FLAG
{
  MBN_SMS_FLAG_NONE = (int) 201326592,
  MBN_SMS_FLAG_MESSAGE_STORE_FULL = (int) 201326593,
  MBN_SMS_FLAG_NEW_MESSAGE = (int) 201326594
};
[
  uuid(4B0FE227-3709-41E2-8A78-E98C0CD0CB09),
  version(1.0),
  helpstring("SMS Format")
]
enum MBN_SMS_FORMAT
{
  MBN_SMS_FORMAT_NONE = (int) 201326592,
  MBN_SMS_FORMAT_PDU = (int) 201326593,
  MBN_SMS_FORMAT_TEXT = (int) 201326594
};
[
  uuid(532A3FE4-BDE6-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("MBN Radio")
]
enum MBN_RADIO
{
  MBN_RADIO_OFF = (int) 201326592,
  MBN_RADIO_ON = (int) 201326593
};

/* Structure/union declarations.  */
[
  uuid(CD1A4B17-BDC9-11DC-A8A8-001321F1405F)
]
struct MBN_INTERFACE_CAPS
{
  enum MBN_CELLULAR_CLASS cellularClass;
  enum MBN_VOICE_CLASS voiceClass;
  UINT dataClass;
  BSTR customDataClass;
  UINT gsmBandClass;
  UINT cdmaBandClass;
  BSTR customBandClass;
  UINT smsCaps;
  UINT controlCaps;
  BSTR deviceID;
  BSTR manufacturer;
  BSTR model;
  BSTR firmwareInfo;
};
[
  uuid(DCBBBAB6-9005-4BBB-AAEE-338E368AF6FA)
]
struct MBN_PROVIDER
{
  BSTR providerID;
  UINT providerState;
  BSTR providerName;
  UINT dataClass;
};
[
  uuid(DCBBBAB6-9006-4BBB-AAEE-338E368AF6FA)
]
struct MBN_PIN_INFO
{
  enum MBN_PIN_STATE pinState;
  enum MBN_PIN_TYPE pinType;
  UINT attemptsRemaining;
};
[
  uuid(FE1F7B6F-BDCD-11DC-A8A8-001321F1405F)
]
struct MBN_CONTEXT
{
  UINT contextID;
  enum MBN_CONTEXT_TYPE contextType;
  BSTR accessString;
  BSTR userName;
  BSTR password;
  enum MBN_COMPRESSION compression;
  enum MBN_AUTH_PROTOCOL authType;
};
[
  uuid(406BFD60-BDDC-11DC-A8A8-001321F1405F)
]
struct MBN_SMS_FILTER
{
  enum MBN_SMS_FLAG flag;
  UINT messageIndex;
};
[
  uuid(1F6E9CA3-BDE6-11DC-A8A8-001321F1405F)
]
struct MBN_SMS_STATUS_INFO
{
  UINT flag;
  UINT messageIndex;
};
struct tagCONNECTDATA
{
  IUnknown * pUnk;
  UINT dwCookie;
};

/* Type definitions.  */
[
  uuid(130C65D3-BDD3-11DC-A8A8-001321F1405F),
  version(1.0),
  helpstring("SMS Constants Type")
]
typedef enum MBN_SMS_CONSTANTS WWAEXT_SMS_CONSTANTS;

[
  uuid(DCBBBAB6-0001-4BBB-AAEE-338E368AF6FA),
  version(1.0),
  helpstring("Definition: UCM Extension API for MBN Type Library")
]
library mbnapi
{
  importlib("stdole2.tlb");

   /* CoClass declarations.  */
   [
     uuid(BDFEE05A-4418-11DD-90ED-001C257CCFF1),
     cancreate
   ]
   coclass MbnConnectionProfileManager
   {
     interface IConnectionPointContainer;
     interface IMbnConnectionProfileManager;
   };
   [
     uuid(BDFEE05B-4418-11DD-90ED-001C257CCFF1),
     cancreate
   ]
   coclass MbnInterfaceManager
   {
     interface IConnectionPointContainer;
     interface IMbnInterfaceManager;
   };
   [
     uuid(BDFEE05C-4418-11DD-90ED-001C257CCFF1),
     cancreate
   ]
   coclass MbnConnectionManager
   {
     interface IConnectionPointContainer;
     interface IMbnConnectionManager;
   };

};

/* Interface declarations.  */
[
  uuid(DCBBBAB6-2001-4BBB-AAEE-338E368AF6FA),
  helpstring("Get/set the runtime configuration of a Wireless WAN interface"),
  nonextensible,
  oleautomation
]
interface IMbnInterface : IUnknown
{
  [id(5134), propget]
  HRESULT __stdcall InterfaceID (
    [out retval] BSTR *InterfaceID
  );
  [id(264)]
  HRESULT __stdcall GetInterfaceCapability (
    [out retval] struct MBN_INTERFACE_CAPS *interfaceCaps
  );
  [id(1292)]
  HRESULT __stdcall GetSubscriberInformation (
    [out retval] interface IMbnSubscriberInformation **subscriberInformation
  );
  [id(265)]
  HRESULT __stdcall GetReadyState (
    [out retval] enum MBN_READY_STATE *readyState
  );
  [id(262)]
  HRESULT __stdcall InEmergencyMode (
    [out retval] WINBOOL *emergencyMode
  );
  HRESULT __stdcall GetHomeProvider (
    [out retval] struct MBN_PROVIDER *homeProvider
  );
  [id(1033)]
  HRESULT __stdcall GetPreferredProviders (
    [out retval] struct MBN_PROVIDER preferredProviders[]*
  );
  [id(1283)]
  HRESULT __stdcall SetPreferredProviders (
    [in] struct MBN_PROVIDER preferredProviders[],
    [out] UINT *requestID
  );
  [id(1293)]
  HRESULT __stdcall GetVisibleProviders (
    [out] UINT *age,
    [out retval] struct MBN_PROVIDER visibleProviders[]*
  );
  [id(1282)]
  HRESULT __stdcall ScanNetwork (
    [out] UINT *requestID
  );
  [id(5378)]
  HRESULT __stdcall GetConnection (
    [out retval] interface IMbnConnection **mbnConnection
  );
};
[
  uuid(459ECC43-BCF5-11DC-A8A8-001321F1405F),
  helpstring("Subcriber information"),
  nonextensible,
  oleautomation
]
interface IMbnSubscriberInformation : IUnknown
{
  [id(1294), propget]
  HRESULT __stdcall SubscriberID (
    [out retval] BSTR *SubscriberID
  );
  [propget]
  HRESULT __stdcall SimIccID (
    [out retval] BSTR *SimIccID
  );
  [id(1537), propget]
  HRESULT __stdcall TelephoneNumbers (
    [out retval] BSTR TelephoneNumbers[]*
  );
};
[
  uuid(DCBBBAB6-200D-4BBB-AAEE-338E368AF6FA),
  helpstring("Get/Set Wireless WAN connection information"),
  nonextensible,
  oleautomation
]
interface IMbnConnection : IUnknown
{
  [id(5135), propget]
  HRESULT __stdcall ConnectionID (
    [out retval] BSTR *ConnectionID
  );
  [id(5377), propget]
  HRESULT __stdcall InterfaceID (
    [out retval] BSTR *InterfaceID
  );
  [id(258)]
  HRESULT __stdcall Connect (
    [in] enum MBN_CONNECTION_MODE connectionMode,
    [in] LPWSTR strProfile,
    [out] UINT *requestID
  );
  [id(261)]
  HRESULT __stdcall Disconnect (
    [out] UINT *requestID
  );
  [id(259)]
  HRESULT __stdcall GetConnectionState (
    [out] enum MBN_ACTIVATION_STATE *ConnectionState,
    [out] BSTR *ProfileName
  );
  [id(1540)]
  HRESULT __stdcall GetVoiceCallState (
    [out retval] enum MBN_VOICE_CALL_STATE *voiceCallState
  );
  HRESULT __stdcall GetActivationNetworkError (
    [out retval] UINT *networkError
  );
};
[
  uuid(DCBBBAB6-2002-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnInterface"),
  nonextensible,
  oleautomation
]
interface IMbnInterfaceEvents : IUnknown
{
  [id(514)]
  HRESULT __stdcall OnInterfaceCapabilityAvailable (
    [in] interface IMbnInterface *newInterface
  );
  [id(777)]
  HRESULT __stdcall OnSubscriberInformationChange (
    [in] interface IMbnInterface *newInterface
  );
  [id(515)]
  HRESULT __stdcall OnReadyStateChange (
    [in] interface IMbnInterface *newInterface
  );
  [id(271)]
  HRESULT __stdcall OnEmergencyModeChange (
    [in] interface IMbnInterface *newInterface
  );
  [id(513)]
  HRESULT __stdcall OnHomeProviderAvailable (
    [in] interface IMbnInterface *newInterface
  );
  [id(524)]
  HRESULT __stdcall OnPreferredProvidersChange (
    [in] interface IMbnInterface *newInterface
  );
  [id(771)]
  HRESULT __stdcall OnSetPreferredProvidersComplete (
    [in] interface IMbnInterface *newInterface,
    [in] UINT requestID,
    [in] HRESULT status
  );
  [id(770)]
  HRESULT __stdcall OnScanNetworkComplete (
    [in] interface IMbnInterface *newInterface,
    [in] UINT requestID,
    [in] HRESULT status
  );
};
[
  uuid(DCBBBAB6-2003-4BBB-AAEE-338E368AF6FA),
  helpstring("Get/set the Wireless WAN device signal quality information"),
  nonextensible,
  oleautomation
]
interface IMbnSignal : IUnknown
{
  [id(1290)]
  HRESULT __stdcall GetSignalStrength (
    [out retval] UINT *signalStrength
  );
  [id(1288)]
  HRESULT __stdcall GetSignalError (
    [out retval] UINT *signalError
  );
};
[
  uuid(DCBBBAB6-2004-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnSignal"),
  nonextensible,
  oleautomation
]
interface IMbnSignalEvents : IUnknown
{
  [id(776)]
  HRESULT __stdcall OnSignalStateChange (
    [in] interface IMbnSignal *newInterface
  );
};
[
  uuid(DCBBBAB6-2005-4BBB-AAEE-338E368AF6FA),
  helpstring("Manages different device passwords"),
  nonextensible,
  oleautomation
]
interface IMbnPinManager : IUnknown
{
  [id(1028)]
  HRESULT __stdcall GetPinList (
    [out retval] interface IMbnPin *pinList[]*
  );
  [id(1025)]
  HRESULT __stdcall GetPin (
    [in] enum MBN_PIN_TYPE pinType,
    [out retval] interface IMbnPin **pin
  );
  [id(1031)]
  HRESULT __stdcall GetPinState (
    [out] UINT *requestID
  );
};
[
  uuid(DCBBBAB6-2007-4BBB-AAEE-338E368AF6FA),
  helpstring("Pin-related functionality"),
  nonextensible,
  oleautomation
]
interface IMbnPin : IUnknown
{
  [id(1032), propget]
  HRESULT __stdcall pinType (
    [out retval] enum MBN_PIN_TYPE *pinType
  );
  [id(782), propget]
  HRESULT __stdcall PinFormat (
    [out retval] enum MBN_PIN_FORMAT *PinFormat
  );
  [id(1027), propget]
  HRESULT __stdcall PinLengthMin (
    [out retval] UINT *PinLengthMin
  );
  [id(1026), propget]
  HRESULT __stdcall PinLengthMax (
    [out retval] UINT *PinLengthMax
  );
  [id(1030), propget]
  HRESULT __stdcall PinMode (
    [out retval] enum MBN_PIN_MODE *PinMode
  );
  [id(779)]
  HRESULT __stdcall Enable (
    [in] LPWSTR pin,
    [out] UINT *requestID
  );
  [id(778)]
  HRESULT __stdcall Disable (
    [in] LPWSTR pin,
    [out] UINT *requestID
  );
  [id(780)]
  HRESULT __stdcall Enter (
    [in] LPWSTR pin,
    [out] UINT *requestID
  );
  HRESULT __stdcall Change (
    [in] LPWSTR pin,
    [in] LPWSTR newPin,
    [out] UINT *requestID
  );
  [id(783)]
  HRESULT __stdcall Unblock (
    [in] LPWSTR puk,
    [in] LPWSTR newPin,
    [out] UINT *requestID
  );
  [id(1029)]
  HRESULT __stdcall GetPinManager (
    [out retval] interface IMbnPinManager **pinManager
  );
};
[
  uuid(DCBBBAB6-2006-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnPinManager"),
  nonextensible,
  oleautomation
]
interface IMbnPinManagerEvents : IUnknown
{
  [id(521)]
  HRESULT __stdcall OnPinListAvailable (
    [in] interface IMbnPinManager *pinManager
  );
  HRESULT __stdcall OnGetPinStateComplete (
    [in] interface IMbnPinManager *pinManager,
    [in] struct MBN_PIN_INFO pinInfo,
    [in] UINT requestID,
    [in] HRESULT status
  );
};
[
  uuid(DCBBBAB6-2008-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnPin"),
  nonextensible,
  oleautomation
]
interface IMbnPinEvents : IUnknown
{
  [id(519)]
  HRESULT __stdcall OnEnableComplete (
    [in] interface IMbnPin *pin,
    [in] struct MBN_PIN_INFO *pinInfo,
    [in] UINT requestID,
    [in] HRESULT status
  );
  [id(518)]
  HRESULT __stdcall OnDisableComplete (
    [in] interface IMbnPin *pin,
    [in] struct MBN_PIN_INFO *pinInfo,
    [in] UINT requestID,
    [in] HRESULT status
  );
  [id(520)]
  HRESULT __stdcall OnEnterComplete (
    [in] interface IMbnPin *pin,
    [in] struct MBN_PIN_INFO *pinInfo,
    [in] UINT requestID,
    [in] HRESULT status
  );
  [id(517)]
  HRESULT __stdcall OnChangeComplete (
    [in] interface IMbnPin *pin,
    [in] struct MBN_PIN_INFO *pinInfo,
    [in] UINT requestID,
    [in] HRESULT status
  );
  [id(523)]
  HRESULT __stdcall OnUnblockComplete (
    [in] interface IMbnPin *pin,
    [in] struct MBN_PIN_INFO *pinInfo,
    [in] UINT requestID,
    [in] HRESULT status
  );
};
[
  uuid(DCBBBAB6-2009-4BBB-AAEE-338E368AF6FA),
  helpstring("Get/Set Wireless WAN network registration mode"),
  nonextensible,
  oleautomation
]
interface IMbnRegistration : IUnknown
{
  [id(1039)]
  HRESULT __stdcall GetRegisterState (
    [out retval] enum MBN_REGISTER_STATE *registerState
  );
  [id(1038)]
  HRESULT __stdcall GetRegisterMode (
    [out retval] enum MBN_REGISTER_MODE *registerMode
  );
  [id(1035)]
  HRESULT __stdcall GetProviderID (
    [out retval] BSTR *providerID
  );
  HRESULT __stdcall GetProviderName (
    [out retval] BSTR *providerName
  );
  [id(1281)]
  HRESULT __stdcall GetRoamingText (
    [out retval] BSTR *roamingText
  );
  [id(257)]
  HRESULT __stdcall GetAvailableDataClasses (
    [out retval] UINT *availableDataClasses
  );
  [id(260)]
  HRESULT __stdcall GetCurrentDataClass (
    [out retval] UINT *currentDataClass
  );
  [id(1538)]
  HRESULT __stdcall GetRegistrationNetworkError (
    [out retval] UINT *registrationNetworkError
  );
  HRESULT __stdcall GetPacketAttachNetworkError (
    [out retval] UINT *packetAttachNetworkError
  );
  [id(1286)]
  HRESULT __stdcall SetRegisterMode (
    [in] enum MBN_REGISTER_MODE registerMode,
    [in] LPWSTR providerID,
    [in] UINT dataClass,
    [out] UINT *requestID
  );
};
[
  uuid(DCBBBAB6-200A-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnRegistration"),
  nonextensible,
  oleautomation
]
interface IMbnRegistrationEvents : IUnknown
{
  [id(527)]
  HRESULT __stdcall OnRegisterModeAvailable (
    [in] interface IMbnRegistration *newInterface
  );
  [id(769)]
  HRESULT __stdcall OnRegisterStateChange (
    [in] interface IMbnRegistration *newInterface
  );
  [id(526)]
  HRESULT __stdcall OnPacketServiceStateChange (
    [in] interface IMbnRegistration *newInterface
  );
  [id(774)]
  HRESULT __stdcall OnSetRegisterModeComplete (
    [in] interface IMbnRegistration *newInterface,
    [in] UINT requestID,
    [in] HRESULT status
  );
};
[
  uuid(DCBBBAB6-200B-4BBB-AAEE-338E368AF6FA),
  helpstring("Get/Set Wireless WAN network information"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionContext : IUnknown
{
  [id(1034)]
  HRESULT __stdcall GetProvisionedContexts (
    [out retval] struct MBN_CONTEXT provisionedContexts[]*
  );
  [id(1284)]
  HRESULT __stdcall SetProvisionedContext (
    [in] struct MBN_CONTEXT provisionedContexts,
    [in] LPWSTR providerID,
    [out] UINT *requestID
  );
};
[
  uuid(DCBBBAB6-200C-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnNetwork"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionContextEvents : IUnknown
{
  [id(525)]
  HRESULT __stdcall OnProvisionedContextListChange (
    [in] interface IMbnConnectionContext *newInterface
  );
  [id(772)]
  HRESULT __stdcall OnSetProvisionedContextComplete (
    [in] interface IMbnConnectionContext *newInterface,
    [in] UINT requestID,
    [in] HRESULT status
  );
};
[
  uuid(DCBBBAB6-200E-4BBB-AAEE-338E368AF6FA),
  helpstring("Notifications on IMbnConnection"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionEvents : IUnknown
{
  [id(268)]
  HRESULT __stdcall OnConnectComplete (
    [in] interface IMbnConnection *newConnection,
    [in] UINT requestID,
    [in] HRESULT status
  );
  [id(270)]
  HRESULT __stdcall OnDisconnectComplete (
    [in] interface IMbnConnection *newConnection,
    [in] UINT reqeustID,
    [in] HRESULT status
  );
  [id(269)]
  HRESULT __stdcall OnConnectStateChange (
    [in] interface IMbnConnection *newConnection
  );
  [id(1542)]
  HRESULT __stdcall OnVoiceCallStateChange (
    [in] interface IMbnConnection *newConnection
  );
};
[
  uuid(DCBBBAB6-200F-4BBB-AAEE-338E368AF6FA),
  helpstring("Create a new connection profile or enumerate existing profiles"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionProfileManager : IUnknown
{
  [id(1543)]
  HRESULT __stdcall GetConnectionProfiles (
    [in] interface IMbnInterface *mbnInterface,
    [out retval] interface IMbnConnectionProfile *connectionProfiles[]*
  );
  HRESULT __stdcall GetConnectionProfile (
    [in] interface IMbnInterface *mbnInterface,
    [in] LPWSTR ProfileName,
    [out retval] interface IMbnConnectionProfile **connectionProfile
  );
  [id(4869)]
  HRESULT __stdcall CreateConnectionProfile (
    [in] LPWSTR xmlProfile
  );
};
[
  uuid(DCBBBAB6-2010-4BBB-AAEE-338E368AF6FA),
  helpstring("Retrieves Connection parameters"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionProfile : IUnknown
{
  [id(2049)]
  HRESULT __stdcall GetProfileXmlData (
    [out retval] BSTR *profileData
  );
  HRESULT __stdcall UpdateProfile (
    [in] LPWSTR strProfile
  );
  [id(5123)]
  HRESULT __stdcall Delete (void);
};
[
  uuid(DCBBBAB6-2011-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnConnectionProfile"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionProfileEvents : IUnknown
{
  [id(2051)]
  HRESULT __stdcall OnProfileUpdate (
    [in] interface IMbnConnectionProfile *newProfile
  );
};
[
  uuid(DCBBBAB6-2012-4BBB-AAEE-338E368AF6FA),
  helpstring("SMS Configuration interface"),
  nonextensible,
  oleautomation
]
interface IMbnSmsConfiguration : IUnknown
{
  [id(2052), propget]
  HRESULT __stdcall ServiceCenterAddress (
    [out retval] BSTR *scAddress
  );
  [id(2052), propput]
  HRESULT __stdcall ServiceCenterAddress (
    [in] LPWSTR argNo1
  );
  [id(2054), propget]
  HRESULT __stdcall MaxMessageIndex (
    [out retval] UINT *index
  );
  [propget]
  HRESULT __stdcall CdmaShortMsgSize (
    [out retval] UINT *shortMsgSize
  );
  [id(2053), propget]
  HRESULT __stdcall SmsFormat (
    [out retval] enum MBN_SMS_FORMAT *SmsFormat
  );
  [id(2053), propput]
  HRESULT __stdcall SmsFormat (
    [in] enum MBN_SMS_FORMAT argNo1
  );
};
[
  uuid(DCBBBAB6-2013-4BBB-AAEE-338E368AF6FA),
  helpstring("Represents SMS read in the PDU format"),
  nonextensible,
  oleautomation
]
interface IMbnSmsReadMsgPdu : IUnknown
{
  [id(2056), propget]
  HRESULT __stdcall index (
    [out retval] UINT *index
  );
  [propget]
  HRESULT __stdcall status (
    [out retval] enum MBN_MSG_STATUS *status
  );
  [id(2307), propget]
  HRESULT __stdcall PduData (
    [out retval] BSTR *PduData
  );
  [id(2311), propget]
  HRESULT __stdcall Message (
    [out retval] UCHAR Message[]*
  );
};
[
  uuid(DCBBBAB6-2014-4BBB-AAEE-338E368AF6FA),
  helpstring("Represents SMS read from CDMA device"),
  nonextensible,
  oleautomation
]
interface IMbnSmsReadMsgTextCdma : IUnknown
{
  [id(2056), propget]
  HRESULT __stdcall index (
    [out retval] UINT *index
  );
  [propget]
  HRESULT __stdcall status (
    [out retval] enum MBN_MSG_STATUS *status
  );
  [id(2309), propget]
  HRESULT __stdcall Address (
    [out retval] BSTR *Address
  );
  [propget]
  HRESULT __stdcall Timestamp (
    [out retval] BSTR *Timestamp
  );
  [id(2312), propget]
  HRESULT __stdcall EncodingID (
    [out retval] enum MBN_SMS_CDMA_ENCODING *EncodingID
  );
  [propget]
  HRESULT __stdcall LanguageID (
    [out retval] enum MBN_SMS_CDMA_LANG *LanguageID
  );
  [id(4097), propget]
  HRESULT __stdcall SizeInCharacters (
    [out retval] UINT *SizeInCharacters
  );
  [id(2311), propget]
  HRESULT __stdcall Message (
    [out retval] UCHAR Message[]*
  );
};
[
  uuid(DCBBBAB6-2015-4BBB-AAEE-338E368AF6FA),
  helpstring("Use to send/recieve SMS"),
  nonextensible,
  oleautomation
]
interface IMbnSms : IUnknown
{
  [id(4099)]
  HRESULT __stdcall GetSmsConfiguration (
    [out retval] interface IMbnSmsConfiguration **smsConfiguration
  );
  HRESULT __stdcall SetSmsConfiguration (
    [in] interface IMbnSmsConfiguration *smsConfiguration,
    [out] UINT *requestID
  );
  [id(4873)]
  HRESULT __stdcall SmsSendPdu (
    [in] LPWSTR PduData,
    [in] UCHAR size,
    [out] UINT *requestID
  );
  [id(5121)]
  HRESULT __stdcall SmsSendCdma (
    [in] LPWSTR Address,
    [in] enum MBN_SMS_CDMA_ENCODING encoding,
    [in] enum MBN_SMS_CDMA_LANG language,
    [in] UINT SizeInCharacters,
    [in] UCHAR Message[],
    [out] UINT *requestID
  );
  [id(5384)]
  HRESULT __stdcall SmsSendCdmaPdu (
    [in] UCHAR Message[],
    [out] UINT *requestID
  );
  [id(4104)]
  HRESULT __stdcall SmsRead (
    [in] struct MBN_SMS_FILTER *smsFilter,
    [in] enum MBN_SMS_FORMAT SmsFormat,
    [out] UINT *requestID
  );
  HRESULT __stdcall SmsDelete (
    [in] struct MBN_SMS_FILTER *smsFilter,
    [out] UINT *requestID
  );
  [id(4609)]
  HRESULT __stdcall GetSmsStatus (
    [out] struct MBN_SMS_STATUS_INFO *smsStatusInfo
  );
};
[
  uuid(DCBBBAB6-2016-4BBB-AAEE-338E368AF6FA),
  helpstring("Notification on IMbnSms"),
  nonextensible,
  oleautomation
]
interface IMbnSmsEvents : IUnknown
{
  [id(4610)]
  HRESULT __stdcall OnSmsConfigurationChange (
    [in] interface IMbnSms *sms
  );
  HRESULT __stdcall OnSetSmsConfigurationComplete (
    [in] interface IMbnSms *sms,
    [in] UINT requestID,
    [in] HRESULT status
  );
  HRESULT __stdcall OnSmsSendComplete (
    [in] interface IMbnSms *sms,
    [in] UINT requestID,
    [in] HRESULT status
  );
  HRESULT __stdcall OnSmsReadComplete (
    [in] interface IMbnSms *sms,
    [in] enum MBN_SMS_FORMAT SmsFormat,
    [in] IUnknown *readMsgs[],
    [in] WINBOOL moreMsgs,
    [in] UINT requestID,
    [in] HRESULT status
  );
  HRESULT __stdcall OnSmsNewClass0Message (
    [in] interface IMbnSms *sms,
    [in] enum MBN_SMS_FORMAT SmsFormat,
    [in] IUnknown *readMsgs[]
  );
  HRESULT __stdcall OnSmsDeleteComplete (
    [in] interface IMbnSms *sms,
    [in] UINT requestID,
    [in] HRESULT status
  );
  HRESULT __stdcall OnSmsStatusChange (
    [in] interface IMbnSms *sms
  );
};
[
  uuid(DCBBBAB6-2017-4BBB-AAEE-338E368AF6FA),
  helpstring("Provides a pass through interface for cellular service activation operation"),
  nonextensible,
  oleautomation
]
interface IMbnServiceActivation : IUnknown
{
  [id(4617)]
  HRESULT __stdcall Activate (
    [in] UCHAR vendorSpecificData[],
    [out] UINT *requestID
  );
};
[
  uuid(DCBBBAB6-2018-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnServiceActivation interface"),
  nonextensible,
  oleautomation
]
interface IMbnServiceActivationEvents : IUnknown
{
  [id(4865)]
  HRESULT __stdcall OnActivationComplete (
    [in] interface IMbnServiceActivation *serviceActivation,
    [in] UCHAR vendorSpecificData[],
    [in] UINT requestID,
    [in] HRESULT status,
    [in] UINT networkError
  );
};
[
  uuid(DCBBBAB6-2019-4BBB-AAEE-338E368AF6FA),
  helpstring("Provides support for passing Vendor specific request to the MBN device drivers"),
  nonextensible,
  oleautomation
]
interface IMbnVendorSpecificOperation : IUnknown
{
  [id(4867)]
  HRESULT __stdcall SetVendorSpecific (
    [in] UCHAR vendorSpecificData[],
    [out] UINT *requestID
  );
};
[
  uuid(DCBBBAB6-201A-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnVendorSpecificOperation interface"),
  nonextensible,
  oleautomation
]
interface IMbnVendorSpecificEvents : IUnknown
{
  [id(4868)]
  HRESULT __stdcall OnEventNotification (
    [in] interface IMbnVendorSpecificOperation *vendorOperation,
    [in] UCHAR vendorSpecificData[]
  );
  [id(4872)]
  HRESULT __stdcall OnSetVendorSpecificComplete (
    [in] interface IMbnVendorSpecificOperation *vendorOperation,
    [in] UCHAR vendorSpecificData[],
    [in] UINT requestID
  );
};
[
  uuid(DCBBBAB6-201B-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnInterfaceManager interface"),
  nonextensible,
  oleautomation
]
interface IMbnInterfaceManager : IUnknown
{
  [id(5124)]
  HRESULT __stdcall GetInterface (
    [in] LPWSTR InterfaceID,
    [out retval] interface IMbnInterface **mbnInterface
  );
  HRESULT __stdcall GetInterfaces (
    [out retval] interface IMbnInterface *mbnInterfaces[]*
  );
};
[
  uuid(DCBBBAB6-201C-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnInterfaceManagerEvents interface"),
  nonextensible,
  oleautomation
]
interface IMbnInterfaceManagerEvents : IUnknown
{
  [id(5128)]
  HRESULT __stdcall OnInterfaceArrival (
    [in] interface IMbnInterface *newInterface
  );
  HRESULT __stdcall OnInterfaceRemoval (
    [in] interface IMbnInterface *oldInterface
  );
};
[
  uuid(DCBBBAB6-201D-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnInterfaceManager interface"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionManager : IUnknown
{
  [id(5126)]
  HRESULT __stdcall GetConnection (
    [in] LPWSTR ConnectionID,
    [out retval] interface IMbnConnection **mbnConnection
  );
  HRESULT __stdcall GetConnections (
    [out retval] interface IMbnConnection *mbnConnections[]*
  );
};
[
  uuid(DCBBBAB6-201E-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnConnectionManagerEvents interface"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionManagerEvents : IUnknown
{
  [id(5130)]
  HRESULT __stdcall OnConnectionArrival (
    [in] interface IMbnConnection *newConnection
  );
  HRESULT __stdcall OnConnectionRemoval (
    [in] interface IMbnConnection *oldConnection
  );
};
[
  uuid(DCBBBAB6-201F-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnProfileManagerEvents interface"),
  nonextensible,
  oleautomation
]
interface IMbnConnectionProfileManagerEvents : IUnknown
{
  [id(5132)]
  HRESULT __stdcall OnConnectionProfileArrival (
    [in] interface IMbnConnectionProfile *newConnectionProfile
  );
  HRESULT __stdcall OnConnectionProfileRemoval (
    [in] interface IMbnConnectionProfile *oldConnectionProfile
  );
};
[
  uuid(DCCCCAB6-201F-4BBB-AAEE-338E368AF6FA),
  helpstring("IMbnRadio interface"),
  nonextensible,
  oleautomation
]
interface IMbnRadio : IUnknown
{
  [id(5379), propget]
  HRESULT __stdcall SoftwareRadioState (
    [out retval] enum MBN_RADIO *SoftwareRadioState
  );
  [propget]
  HRESULT __stdcall HardwareRadioState (
    [out retval] enum MBN_RADIO *HardwareRadioState
  );
  HRESULT __stdcall SetSoftwareRadioState (
    [in] enum MBN_RADIO radioState,
    [out] UINT *requestID
  );
};
[
  uuid(DCDDDAB6-201F-4BBB-AAEE-338E368AF6FA),
  helpstring("Events on IMbnRadioEvents interface"),
  nonextensible,
  oleautomation
]
interface IMbnRadioEvents : IUnknown
{
  [id(5382)]
  HRESULT __stdcall OnRadioStateChange (
    [in] interface IMbnRadio *newInterface
  );
  HRESULT __stdcall OnSetSoftwareRadioStateComplete (
    [in] interface IMbnRadio *newInterface,
    [in] UINT requestID,
    [in] HRESULT status
  );
};
[
  uuid(B196B284-BAB4-101A-B69C-00AA00341D07)
]
interface IConnectionPointContainer : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall EnumConnectionPoints (
    [out] interface IEnumConnectionPoints **ppEnum
  );
  HRESULT __stdcall FindConnectionPoint (
    [in] struct GUID *riid,
    [out] interface IConnectionPoint **ppCP
  );
};
[
  uuid(B196B285-BAB4-101A-B69C-00AA00341D07)
]
interface IEnumConnectionPoints : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteNext (
    [in] UINT cConnections,
    [out] interface IConnectionPoint **ppCP,
    [out] UINT *pcFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT cConnections
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumConnectionPoints **ppEnum
  );
};
[
  uuid(B196B286-BAB4-101A-B69C-00AA00341D07)
]
interface IConnectionPoint : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall GetConnectionInterface (
    [out] struct GUID *pIID
  );
  HRESULT __stdcall GetConnectionPointContainer (
    [out] interface IConnectionPointContainer **ppCPC
  );
  HRESULT __stdcall Advise (
    [in] IUnknown * pUnkSink,
    [out] UINT *pdwCookie
  );
  HRESULT __stdcall Unadvise (
    [in] UINT dwCookie
  );
  HRESULT __stdcall EnumConnections (
    [out] interface IEnumConnections **ppEnum
  );
};
[
  uuid(B196B287-BAB4-101A-B69C-00AA00341D07)
]
interface IEnumConnections : IUnknown
{
  [id(1610678272)]
  HRESULT __stdcall RemoteNext (
    [in] UINT cConnections,
    [out] struct tagCONNECTDATA *rgcd,
    [out] UINT *pcFetched
  );
  HRESULT __stdcall Skip (
    [in] UINT cConnections
  );
  HRESULT __stdcall Reset (void);
  HRESULT __stdcall Clone (
    [out] interface IEnumConnections **ppEnum
  );
};

