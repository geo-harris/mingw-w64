#ifndef _INC_IKETYPES
#define _INC_IKETYPES
#include <windows.h>
#include <fwptypes.h>

#if (_WIN32_WINNT >= 0x0600)

typedef enum IKEEXT_EM_SA_STATE_ {
  IKEEXT_EM_SA_STATE_NONE,
  IKEEXT_EM_SA_STATE_SENT_ATTS,
  IKEEXT_EM_SA_STATE_SSPI_SENT,
  IKEEXT_EM_SA_STATE_AUTH_COMPLETE,
  IKEEXT_EM_SA_STATE_FINAL,
  IKEEXT_EM_SA_STATE_COMPLETE,
  IKEEXT_EM_SA_STATE_MAX 
} IKEEXT_EM_SA_STATE;

typedef enum IKEEXT_SA_ROLE_ {
  IKEEXT_SA_ROLE_INITIATOR,
  IKEEXT_SA_ROLE_RESPONDER,
  IKEEXT_SA_ROLE_MAX 
} IKEEXT_SA_ROLE;

typedef enum IKEEXT_AUTHENTICATION_METHOD_TYPE_ {
  IKEEXT_PRESHARED_KEY,
  IKEEXT_CERTIFICATE,
  IKEEXT_KERBEROS,
  IKEEXT_ANONYMOUS,
  IKEEXT_SSL,
  IKEEXT_NTLM_V2,
  IKEEXT_IPV6_CGA,
  IKEEXT_CERTIFICATE_ECDSA_P256,
  IKEEXT_CERTIFICATE_ECDSA_P384,
  IKEEXT_SSL_ECDSA_P256,
  IKEEXT_SSL_ECDSA_P384,
  IKEEXT_EAP,
  IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX 
} IKEEXT_AUTHENTICATION_METHOD_TYPE;

typedef enum IKEEXT_KEY_MODULE_TYPE_ {
  IKEEXT_KEY_MODULE_IKE,
  IKEEXT_KEY_MODULE_AUTHIP,
  IKEEXT_KEY_MODULE_IKEV2,
  IKEEXT_KEY_MODULE_MAX 
} IKEEXT_KEY_MODULE_TYPE;

typedef enum IKEEXT_MM_SA_STATE_ {
  IKEEXT_MM_SA_STATE_NONE,
  IKEEXT_MM_SA_STATE_SA_SENT,
  IKEEXT_MM_SA_STATE_SSPI_SENT,
  IKEEXT_MM_SA_STATE_FINAL,
  IKEEXT_MM_SA_STATE_FINAL_SENT,
  IKEEXT_MM_SA_STATE_COMPLETE,
  IKEEXT_MM_SA_STATE_MAX 
} IKEEXT_MM_SA_STATE;

typedef enum IKEEXT_QM_SA_STATE_ {
  IKEEXT_QM_SA_STATE_NONE,
  IKEEXT_QM_SA_STATE_INITIAL,
  IKEEXT_QM_SA_STATE_FINAL,
  IKEEXT_QM_SA_STATE_COMPLETE,
  IKEEXT_QM_SA_STATE_MAX 
} IKEEXT_QM_SA_STATE;

typedef enum IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE_ {
  IKEEXT_IMPERSONATION_NONE,
  IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL,
  IKEEXT_IMPERSONATION_MAX 
} IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE;

typedef enum IKEEXT_CERT_CONFIG_TYPE_ {
  IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST,
  IKEEXT_CERT_CONFIG_ENTERPRISE_STORE,
  IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE,
  IKEEXT_CERT_CONFIG_UNSPECIFIED,
  IKEEXT_CERT_CONFIG_TYPE_MAX 
} IKEEXT_CERT_CONFIG_TYPE;

typedef enum IKEEXT_CIPHER_TYPE_ {
  IKEEXT_CIPHER_DES,
  IKEEXT_CIPHER_3DES,
  IKEEXT_CIPHER_AES_128,
  IKEEXT_CIPHER_AES_192,
  IKEEXT_CIPHER_AES_256,
  IKEEXT_CIPHER_TYPE_MAX 
} IKEEXT_CIPHER_TYPE;

typedef enum IKEEXT_INTEGRITY_TYPE_ {
  IKEEXT_INTEGRITY_MD5,
  IKEEXT_INTEGRITY_SHA1,
  IKEEXT_INTEGRITY_SHA_256,
  IKEEXT_INTEGRITY_SHA_384,
  IKEEXT_INTEGRITY_TYPE_MAX 
} IKEEXT_INTEGRITY_TYPE;

typedef enum IKEEXT_DH_GROUP_ {
  IKEEXT_DH_GROUP_NONE,
  IKEEXT_DH_GROUP_1,
  IKEEXT_DH_GROUP_2,
  IKEEXT_DH_GROUP_2048,
  IKEEXT_DH_ECP_256,
  IKEEXT_DH_ECP_384,
  IKEEXT_DH_GROUP_MAX 
} IKEEXT_DH_GROUP;

typedef struct IKEEXT_CERT_ROOT_CONFIG0_ {
  FWP_BYTE_BLOB certData;
  UINT32        flags;
} IKEEXT_CERT_ROOT_CONFIG0;

typedef struct IKEEXT_EM_POLICY0_ {
  UINT32                                   numAuthenticationMethods;
  IKEEXT_AUTHENTICATION_METHOD0            *authenticationMethods;
  IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
} IKEEXT_EM_POLICY0;

typedef struct IKEEXT_KERBEROS_AUTHENTICATION0_ {
  UINT32 flags;
} IKEEXT_KERBEROS_AUTHENTICATION0;

typedef struct IKEEXT_NTLM_V2_AUTHENTICATION0_ {
  UINT32 flags;
} IKEEXT_NTLM_V2_AUTHENTICATION0;

typedef struct IKEEXT_IPV6_CGA_AUTHENTICATION0_ {
  wchar_t          *keyContainerName;
  wchar_t          *cspName;
  UINT32           cspType;
  FWP_BYTE_ARRAY16 cgaModifier;
  BYTE             cgaCollisionCount;
} IKEEXT_IPV6_CGA_AUTHENTICATION0;

typedef struct IKEEXT_PRESHARED_KEY_AUTHENTICATION0__ {
  FWP_BYTE_BLOB presharedKey;
} IKEEXT_PRESHARED_KEY_AUTHENTICATION0;

typedef struct IKEEXT_AUTHENTICATION_METHOD0_ {
  IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
  union DUMMYUNIONNAME {
    IKEEXT_PRESHARED_KEY_AUTHENTICATION0 presharedKeyAuthentication;
    IKEEXT_CERTIFICATE_AUTHENTICATION0   certificateAuthentication;
    IKEEXT_KERBEROS_AUTHENTICATION0      kerberosAuthentication;
    IKEEXT_NTLM_V2_AUTHENTICATION0       ntlmV2Authentication;
    IKEEXT_CERTIFICATE_AUTHENTICATION0   sslAuthentication;
    IKEEXT_IPV6_CGA_AUTHENTICATION0      cgaAuthentication;
    ;      // case(IKEEXT_ANONYMOUS)
  } ;
} IKEEXT_AUTHENTICATION_METHOD0;

typedef struct IKEEXT_CERTIFICATE_AUTHENTICATION0_ {
  IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
  union {
    struct {
      UINT32                   inboundRootArraySize;
      IKEEXT_CERT_ROOT_CONFIG0 *inboundRootArray;
    } ;
    IKEEXT_CERT_ROOT_CONFIG0 *inboundEnterpriseStoreConfig;
    IKEEXT_CERT_ROOT_CONFIG0 *inboundTrustedRootStoreConfig;
  } ;
  IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
  union {
    struct {
      UINT32                   outboundRootArraySize;
      IKEEXT_CERT_ROOT_CONFIG0 *outboundRootArray;
    } ;
    IKEEXT_CERT_ROOT_CONFIG0 *outboundEnterpriseStoreConfig;
    IKEEXT_CERT_ROOT_CONFIG0 *outboundTrustedRootStoreConfig;
  } ;
  UINT32                  flags;
} IKEEXT_CERTIFICATE_AUTHENTICATION0;

typedef struct IKEEXT_POLICY0_ {
  UINT32                                   softExpirationTime;
  UINT32                                   numAuthenticationMethods;
  IKEEXT_AUTHENTICATION_METHOD0            *authenticationMethods;
  IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
  UINT32                                   numIkeProposals;
  IKEEXT_PROPOSAL0                         *ikeProposals;
  UINT32                                   flags;
  UINT32                                   maxDynamicFilters;
} IKEEXT_POLICY0;

typedef struct IKEEXT_INTEGRITY_ALGORITHM0_ {
  IKEEXT_INTEGRITY_TYPE algoIdentifier;
} IKEEXT_INTEGRITY_ALGORITHM0;

typedef struct IKEEXT_CIPHER_ALGORITHM0_ {
  IKEEXT_CIPHER_TYPE algoIdentifier;
  UINT32             keyLen;
  UINT32             rounds;
} IKEEXT_CIPHER_ALGORITHM0;

typedef struct IKEEXT_PROPOSAL0_ {
  IKEEXT_CIPHER_ALGORITHM0    cipherAlgorithm;
  IKEEXT_INTEGRITY_ALGORITHM0 integrityAlgorithm;
  UINT32                      maxLifetimeSeconds;
  IKEEXT_DH_GROUP             dhGroup;
  UINT32                      quickModeLimit;
} IKEEXT_PROPOSAL0;

#endif /*(_WIN32_WINNT >= 0x0600)*/
#endif /*_INC_IKETYPES*/
