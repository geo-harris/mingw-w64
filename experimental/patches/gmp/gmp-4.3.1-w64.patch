this patch applies to gmp-4.3.1.  this is already in the
gmp development tree but not in the gmp-4.3 branch.

Notes:
the changes to 'configure' are not included because the
buildbot seems to do autoconf, already.  however, changes
to the generated file 'config.in' are included.

# HG changeset patch
# User Torbjorn Granlund <tege@gmplib.org>
# Date 1252935940 -7200
# Node ID 54f1b4ef7c7cff1437aed25a137269bb808eb84f
# Parent  568147bd9e53d8244a40d45ae6755def8d6e00d4
Initial mingw64 support.

2009-09-14  Torbjorn Granlund  <tege@gmplib.org>

	* configure.in: Handle mingw64.
	* gmp-impl.h (gmp_intptr_t): Declare.
	* tests/amd64check.c (calling_conventions_values): Use CNST_LIMB.
	* tests/memory.c: Use gmp_intptr_t; print pointers using C90 "%p".
	* tests/misc.c: Use gmp_intptr_t.
	* tests/mpq/t-get_str.c: Print pointers using C90 "%p".

--- gcc/gmp/config.in	2009-05-12 09:12:46.000000000 +0300
+++ gcc/gmp/config.in	2009-09-14 19:00:30.000000000 +0300
@@ -161,6 +161,9 @@
 /* Define to 1 if the system has the type `intmax_t'. */
 #undef HAVE_INTMAX_T
 
+/* Define to 1 if the system has the type `intptr_t'. */
+#undef HAVE_INTPTR_T
+
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
@@ -459,6 +462,9 @@
 /* The size of a `unsigned short', as computed by sizeof. */
 #undef SIZEOF_UNSIGNED_SHORT
 
+/* The size of a `void *', as computed by sizeof. */
+#undef SIZEOF_VOID_P
+
 /* Define to 1 if sscanf requires writable inputs */
 #undef SSCANF_WRITABLE_INPUT
 

--- gcc/gmp/configure.in	Wed Aug 12 17:26:19 2009 +0200
+++ gcc/gmp/configure.in	Mon Sep 14 15:45:40 2009 +0200
@@ -1467,14 +1467,6 @@
         SPEED_CYCLECOUNTER_OBJ_64=x86_64.lo
         cyclecounter_size_64=2
 
-        case $host in
-          *-*-solaris*)
-            # Sun cc.
-            cclist_64="$cclist_64 cc"
-            cc_64_cflags="-xO3 -m64"
-            ;;
-        esac
-
 	case $host_cpu in
 	  athlon64 | x86_64)
 	    abilist="64 32"
@@ -1494,6 +1486,20 @@
 	    path_64="x86_64/atom x86_64"
 	    ;;
 	esac
+
+        case $host in
+          *-*-solaris*)
+            # Sun cc.
+            cclist_64="$cclist_64 cc"
+            cc_64_cflags="-xO3 -m64"
+            ;;
+	  *-*-mingw*)
+    	    limb_64=longlong
+    	    path_64=""	# Windows amd64 calling conventions are *different*
+    	    # Silence many pedantic warnings for w64.  FIXME.
+    	    gcc_64_cflags="$gcc_64_cflags -std=gnu99"
+            ;;
+        esac
 	;;
     esac
     ;;
@@ -3099,6 +3105,8 @@
 # of any sensible system.  In a generic C build, grepping LONG_BIT out of
 # <limits.h> might be an alternative, for maximum portability.
 #
+AC_CHECK_TYPES(intptr_t)
+AC_CHECK_SIZEOF(void *)
 AC_CHECK_SIZEOF(unsigned short)
 AC_CHECK_SIZEOF(unsigned)
 AC_CHECK_SIZEOF(unsigned long)
--- gcc/gmp/gmp-impl.h	Wed Aug 12 17:26:19 2009 +0200
+++ gcc/gmp/gmp-impl.h	Mon Sep 14 15:45:40 2009 +0200
@@ -198,6 +198,14 @@
 #endif
 
 
+/* gmp_intptr_t, for pointer to integer casts */
+#if HAVE_INTPTR_T
+typedef intptr_t            gmp_intptr_t;
+#else /* fallback */
+typedef size_t              gmp_intptr_t;
+#endif
+
+
 /* const and signed must match __gmp_const and __gmp_signed, so follow the
    decision made for those in gmp.h.    */
 #if ! __GMP_HAVE_CONST
--- gcc/gmp/tests/amd64check.c	Wed Aug 12 17:26:19 2009 +0200
+++ gcc/gmp/tests/amd64check.c	Mon Sep 14 15:45:40 2009 +0200
@@ -25,18 +25,18 @@
 
 /* Vector if constants and register values.  We use one vector to allow access
    via a base pointer, very beneficial for the PIC-enabled amd64call.asm.  */
-long calling_conventions_values[23] =
+mp_limb_t calling_conventions_values[23] =
 {
-  0x1234567887654321L,		/* want_rbx */
-  0x89ABCDEFFEDCBA98L,		/* want_rbp */
-  0xDEADBEEFBADECAFEL,		/* want_r12 */
-  0xFFEEDDCCBBAA9988L,		/* want_r13 */
-  0x0011223344556677L,		/* want_r14 */
-  0x1234432156788765L,		/* want_r15 */
+  CNST_LIMB(0x1234567887654321),	/* want_rbx */
+  CNST_LIMB(0x89ABCDEFFEDCBA98),	/* want_rbp */
+  CNST_LIMB(0xDEADBEEFBADECAFE),	/* want_r12 */
+  CNST_LIMB(0xFFEEDDCCBBAA9988),	/* want_r13 */
+  CNST_LIMB(0x0011223344556677),	/* want_r14 */
+  CNST_LIMB(0x1234432156788765),	/* want_r15 */
 
-  0xFEEDABBACAAFBEED,		/* JUNK_RAX */
-  0xAB78DE89FF5125BB,		/* JUNK_R10 */
-  0x1238901890189031		/* JUNK_R11 */
+  CNST_LIMB(0xFEEDABBACAAFBEED),	/* JUNK_RAX */
+  CNST_LIMB(0xAB78DE89FF5125BB),	/* JUNK_R10 */
+  CNST_LIMB(0x1238901890189031)		/* JUNK_R11 */
 
   /* rest of array used for dynamic values.  */
 };
--- gcc/gmp/tests/memory.c	Wed Aug 12 17:26:19 2009 +0200
+++ gcc/gmp/tests/memory.c	Mon Sep 14 15:45:40 2009 +0200
@@ -88,12 +88,12 @@
   tests_memory_list = h;
 
   rptr = __gmp_default_allocate (size + 2 * sizeof (mp_limb_t));
-  ptr = (void *) ((long) rptr + sizeof (mp_limb_t));
+  ptr = (void *) ((gmp_intptr_t) rptr + sizeof (mp_limb_t));
 
-  *((mp_limb_t *) ((long) ptr - sizeof (mp_limb_t)))
+  *((mp_limb_t *) ((gmp_intptr_t) ptr - sizeof (mp_limb_t)))
     = PATTERN1 - ((mp_limb_t) ptr);
   PATTERN2_var = PATTERN2 - ((mp_limb_t) ptr);
-  memcpy ((void *) ((long) ptr + size), &PATTERN2_var, sizeof (mp_limb_t));
+  memcpy ((void *) ((gmp_intptr_t) ptr + size), &PATTERN2_var, sizeof (mp_limb_t));
 
   h->size = size;
   h->ptr = ptr;
@@ -109,16 +109,16 @@
 
   if (new_size == 0)
     {
-      fprintf (stderr, "tests_reallocate(): attempt to reallocate 0x%lX to 0 bytes\n",
-	       (unsigned long) ptr);
+      fprintf (stderr, "tests_reallocate(): attempt to reallocate %p to 0 bytes\n",
+	       ptr);
       abort ();
     }
 
   hp = tests_memory_find (ptr);
   if (hp == NULL)
     {
-      fprintf (stderr, "tests_reallocate(): attempt to reallocate bad pointer 0x%lX\n",
-	       (unsigned long) ptr);
+      fprintf (stderr, "tests_reallocate(): attempt to reallocate bad pointer %p\n",
+	       ptr);
       abort ();
     }
   h = *hp;
@@ -130,28 +130,28 @@
       abort ();
     }
 
-  if (*((mp_limb_t *) ((long) ptr - sizeof (mp_limb_t)))
+  if (*((mp_limb_t *) ((gmp_intptr_t) ptr - sizeof (mp_limb_t)))
       != PATTERN1 - ((mp_limb_t) ptr))
     {
       fprintf (stderr, "in realloc: redzone clobbered before block\n");
       abort ();
     }
   PATTERN2_var = PATTERN2 - ((mp_limb_t) ptr);
-  if (memcmp ((void *) ((long) ptr + h->size), &PATTERN2_var, sizeof (mp_limb_t)))
+  if (memcmp ((void *) ((gmp_intptr_t) ptr + h->size), &PATTERN2_var, sizeof (mp_limb_t)))
     {
       fprintf (stderr, "in realloc: redzone clobbered after block\n");
       abort ();
     }
 
-  rptr = __gmp_default_reallocate ((void *) ((long) ptr - sizeof (mp_limb_t)),
+  rptr = __gmp_default_reallocate ((void *) ((gmp_intptr_t) ptr - sizeof (mp_limb_t)),
 				 old_size + 2 * sizeof (mp_limb_t),
 				 new_size + 2 * sizeof (mp_limb_t));
-  ptr = (void *) ((long) rptr + sizeof (mp_limb_t));
+  ptr = (void *) ((gmp_intptr_t) rptr + sizeof (mp_limb_t));
 
-  *((mp_limb_t *) ((long) ptr - sizeof (mp_limb_t)))
+  *((mp_limb_t *) ((gmp_intptr_t) ptr - sizeof (mp_limb_t)))
     = PATTERN1 - ((mp_limb_t) ptr);
   PATTERN2_var = PATTERN2 - ((mp_limb_t) ptr);
-  memcpy ((void *) ((long) ptr + new_size), &PATTERN2_var, sizeof (mp_limb_t));
+  memcpy ((void *) ((gmp_intptr_t) ptr + new_size), &PATTERN2_var, sizeof (mp_limb_t));
 
   h->size = new_size;
   h->ptr = ptr;
@@ -164,8 +164,8 @@
   struct header  **hp = tests_memory_find (ptr);
   if (hp == NULL)
     {
-      fprintf (stderr, "tests_free(): attempt to free bad pointer 0x%lX\n",
-	       (unsigned long) ptr);
+      fprintf (stderr, "tests_free(): attempt to free bad pointer %p\n",
+	       ptr);
       abort ();
     }
   return hp;
@@ -180,20 +180,20 @@
 
   *hp = h->next;  /* unlink */
 
-  if (*((mp_limb_t *) ((long) ptr - sizeof (mp_limb_t)))
+  if (*((mp_limb_t *) ((gmp_intptr_t) ptr - sizeof (mp_limb_t)))
       != PATTERN1 - ((mp_limb_t) ptr))
     {
       fprintf (stderr, "in free: redzone clobbered before block\n");
       abort ();
     }
   PATTERN2_var = PATTERN2 - ((mp_limb_t) ptr);
-  if (memcmp ((void *) ((long) ptr + h->size), &PATTERN2_var, sizeof (mp_limb_t)))
+  if (memcmp ((void *) ((gmp_intptr_t) ptr + h->size), &PATTERN2_var, sizeof (mp_limb_t)))
     {
       fprintf (stderr, "in free: redzone clobbered after block\n");
       abort ();
     }
 
-  __gmp_default_free ((void *) ((long) ptr - sizeof(mp_limb_t)),
+  __gmp_default_free ((void *) ((gmp_intptr_t) ptr - sizeof(mp_limb_t)),
 		      h->size + 2 * sizeof (mp_limb_t));
   __gmp_default_free (h, sizeof (*h));
 }
--- gcc/gmp/tests/misc.c	Wed Aug 12 17:26:19 2009 +0200
+++ gcc/gmp/tests/misc.c	Mon Sep 14 15:45:40 2009 +0200
@@ -132,8 +132,8 @@
 void *
 align_pointer (void *p, size_t align)
 {
-  unsigned long  d;
-  d = ((unsigned long) p) & (align-1);
+  gmp_intptr_t d;
+  d = ((gmp_intptr_t) p) & (align-1);
   d = (d != 0 ? align-d : 0);
   return (void *) (((char *) p) + d);
 }
--- gcc/gmp/tests/mpq/t-get_str.c	Wed Aug 12 17:26:19 2009 +0200
+++ gcc/gmp/tests/mpq/t-get_str.c	Mon Sep 14 15:45:40 2009 +0200
@@ -65,8 +65,8 @@
     {
       printf ("mpq_get_str wrong return value (passing non-NULL)\n");
       printf ("  base %d\n", base);
-      printf ("  got  0x%lX\n", (unsigned long) ret);
-      printf ("  want 0x%lX\n", (unsigned long) want);
+      printf ("  got  %p\n", ret);
+      printf ("  want %p\n", want);
       abort ();
     }
   if (strcmp (str, want) != 0)
