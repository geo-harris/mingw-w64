# -*- python -*-
# ex: set syntax=python:

import datetime, os

from ConfigParser import RawConfigParser as ConfigParser
gConfig = ConfigParser()
gConfig.read("config.ini")

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [ BuildSlave(slaveName, gConfig.get("slaves", slaveName), max_builds=1)
                  for slaveName in (
                    "linux64", "linuxvm", "vista64-cyg32", "vista64-mingw32",
                    "xenofears-linux64", "jkbeard-linux64",
                    "upload-slave"
                  ) ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler
allBuilderNames=["linux-x86_64-x86_64",
                 "linux-x86_64-x86",
                 "linux-x86-x86_64",
                 "linux-x86-x86",
                 "cygwin-x86-x86_64",
                 "cygwin-x86-x86",
                 "mingw-x86-x86_64",
                 "mingw-x86-x86"]
c['schedulers'] = []
c['schedulers'].append(scheduler.Scheduler(name="all", branch=None,
                                           treeStableTimer=2*60,
                                           builderNames=allBuilderNames))

# linux x86_64 host
c['schedulers'].append(scheduler.Triggerable(name="trigger-linux-x86_64-x86_64",
                                             builderNames=["linux-x86_64-x86_64"]))
c['schedulers'].append(scheduler.Triggerable(name="trigger-linux-x86_64-x86",
                                             builderNames=["linux-x86_64-x86"]))
# linux x86 host
c['schedulers'].append(scheduler.Triggerable(name="trigger-linux-x86-x86_64",
                                             builderNames=["linux-x86-x86_64"]))
c['schedulers'].append(scheduler.Triggerable(name="trigger-linux-x86-x86",
                                             builderNames=["linux-x86-x86"]))
# cygwin x86 host
c['schedulers'].append(scheduler.Triggerable(name="trigger-cygwin-x86-x86_64",
                                             builderNames=["cygwin-x86-x86_64"]))
c['schedulers'].append(scheduler.Triggerable(name="trigger-cygwin-x86-x86",
                                             builderNames=["cygwin-x86-x86"]))
# mingw x86 host
c['schedulers'].append(scheduler.Triggerable(name="trigger-mingw-x86-x86_64",
                                             builderNames=["mingw-x86-x86_64"]))
c['schedulers'].append(scheduler.Triggerable(name="trigger-mingw-x86-x86",
                                             builderNames=["mingw-x86-x86"]))

c['schedulers'].append(scheduler.Nightly(name="nightly-src",
                                         builderNames=["src-package"],
                                         branch=None,
                                         properties={'is_nightly': True},
                                         hour=6))
#c['schedulers'].append(scheduler.Scheduler(name="nightly-src",
#                                           builderNames=["src-package"],
#                                           branch=None,
#                                           properties={'is_nightly': True,
#                                                       'target_arch': 'x86_64-w64-mingw32'},
#                                           treeStableTimer=9999999,
#                                           fileIsImportant=None))
#c['schedulers'].append(scheduler.Try_Jobdir(name="try",
#                                            jobdir="/opt/buildbot/mingw-w64/master/try",
#                                            builderNames=allBuilderNames))
c['schedulers'].append(scheduler.Triggerable(name="sourceforge-upload",
                                             builderNames=["uploader"]))

####### BUILDERS

from scripts.factories import mingw64factory
from scripts.factories.sfuploadfactory import SourceForgeUploadFactory
from scripts.factories.nightlysrcpackage import NightlySrcPackageFactory

c['builders'] = [{'name':       'linux-x86_64-x86_64',
                  'slavenames': ['linux64', 'xenofears-linux64', 'jkbeard-linux64'],
                  'builddir':   'linux-x86_64-x86_64',
                  'factory':    mingw64factory.Mingw64Linux64Factory(),
                  },
                 {'name':       'linux-x86_64-x86',
                  'slavenames': ['linux64', 'xenofears-linux64', 'jkbeard-linux64'],
                  'builddir':   'linux-x86_64-x86',
                  'factory':    mingw64factory.Mingw32Linux64Factory(),
                  },
                 {'name':       'linux-x86-x86_64',
                  'slavenames': ['linuxvm'],
                  'builddir':   'linux-x86-x86_64',
                  'factory':    mingw64factory.Mingw64Linux32Factory(),
                  },
                 {'name':       'linux-x86-x86',
                  'slavenames': ['linuxvm'],
                  'builddir':   'linux-x86-x86',
                  'factory':    mingw64factory.Mingw32Linux32Factory(),
                  },
                 {'name':       'cygwin-x86-x86_64',
                  'slavenames': ['vista64-cyg32'],
                  'builddir':   'cygwin-x86-x86_64',
                  'factory':    mingw64factory.Mingw64CygwinFactory(),
                  },
                 {'name':       'cygwin-x86-x86',
                  'slavenames': ['vista64-cyg32'],
                  'builddir':   'cygwin-x86-x86',
                  'factory':    mingw64factory.Mingw32CygwinFactory(),
                  },
                 {'name':       'mingw-x86-x86_64',
                  'slavenames': ['vista64-mingw32'],
                  'builddir':   'mingw-x86-x86_64',
                  'factory':    mingw64factory.Mingw64MingwFactory(),
                  },
                 {'name':       'mingw-x86-x86',
                  'slavenames': ['vista64-mingw32'],
                  'builddir':   'mingw-x86-x86',
                  'factory':    mingw64factory.Mingw32MingwFactory(),
                  },
                 {'name':       'uploader',
                  'slavenames': ['upload-slave'],
                  'builddir':   'master-uploader',
                  'factory':    SourceForgeUploadFactory(),
                 },
                 {'name':       'src-package',
                  'slavenames': ['upload-slave'],
                  'builddir':   'master-src-package',
                  'factory':    NightlySrcPackageFactory(),
                 }
                ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from scripts.trysubmitter import TrySubmitter
from scripts.forcebuilder import ForceBuilderSlave, ForceBuilderSrc

web_status = html.WebStatus(http_port=8010,
                            allowForce=True)
web_status.putChild("try",
                    TrySubmitter("try",
                                 builders=allBuilderNames,
                                 userpass=(gConfig.get("try", "user"),
                                           gConfig.get("try", "password"))))
web_status.putChild("force",
                    ForceBuilderSlave(builders=allBuilderNames,
                                      userpass=(gConfig.get("force", "user"),
                                                gConfig.get("force", "password")),
                                      properties={'src_archive'         : 'mingw-w64-src.tar.bz2',
                                                  'datestamp'           : datetime.date.today().strftime("_%Y%m%d"),
                                                  'masterdir'           : os.getcwd(),
                                                  'gcc_config_args'     : '--enable-fully-dynamic-string --disable-multilib',
                                                  'mingw_config_args'   : '',
                                                  'binutils_config_args': '',
                                                  'is_nightly'          : False}))
web_status.putChild("forcesrc",
                    ForceBuilderSrc(builders=allBuilderNames,
                                    userpass=(gConfig.get("force", "user"),
                                              gConfig.get("force", "password")),
                                    properties={'src_archive'         : 'mingw-w64-src.tar.bz2',
                                                'datestamp'           : '_custom',
                                                'masterdir'           : os.getcwd(),
                                                'gcc_config_args'     : '--enable-fully-dynamic-string --disable-multilib',
                                                'mingw_config_args'   : '',
                                                'binutils_config_args': '',
                                                'gmp_version'         : gConfig.get("libraries", "gmp"),
                                                'mpfr_version'        : gConfig.get("libraries", "mpfr"),
                                                'binutils_branch'     : 'trunk',
                                                'gcc_branch'          : 'trunk',
                                                'mingw_branch'        : 'trunk',
                                                #'binutils_revision'   : 'head',
                                                'gcc_revision'        : 'head',
                                                'mingw_revision'      : 'head',
                                                'is_nightly'          : False}))
c['status'].append(web_status)

# comcast is blocking outbound smtp traffic...
#from buildbot.status import mail
#c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                     extraRecipients=["mingw-w64-buildbot-status@mailinator.com",
#                                                      "nightstrike+w64buildbot@gmail.com"],
#                                     sendToInterestedUsers=False))

from buildbot.status import words
c['status'].append(words.IRC(host="127.0.0.1", password=gConfig.get("irc", "password"),
                             nick=gConfig.get("irc", "user"),
                             channels=["#mingw-w64"]))

# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "password"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
from buildbot import manhole
c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Mingw-w64"
c['projectURL'] = "http://mingw-w64.sourceforge.net/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"
