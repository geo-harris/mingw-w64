;
; Definition file of BDEUI.dll
; Automatic generated by gendef
; written by Kai Tietz 2008
;
LIBRARY "BDEUI.dll"
EXPORTS
; public: __cdecl BuiVolume::BuiVolume(void)__ptr64 
??0BuiVolume@@QEAA@XZ
; public: __cdecl BuiVolume::BuiVolume(bool)__ptr64 
??0BuiVolume@@QEAA@_N@Z
; protected: __cdecl VolumeFveStatus::VolumeFveStatus(void)__ptr64 
??0VolumeFveStatus@@IEAA@XZ
; public: __cdecl VolumeFveStatus::VolumeFveStatus(unsigned long,long,enum _FVE_WIPING_STATE)__ptr64 
??0VolumeFveStatus@@QEAA@KJW4_FVE_WIPING_STATE@@@Z
; public: __cdecl BuiVolume::~BuiVolume(void)__ptr64 
??1BuiVolume@@QEAA@XZ
; public: class BuiVolume &__ptr64 __cdecl BuiVolume::operator =(class BuiVolume const &__ptr64 )__ptr64 
??4BuiVolume@@QEAAAEAV0@AEBV0@@Z
; public: class VolumeFveStatus &__ptr64 __cdecl VolumeFveStatus::operator =(class VolumeFveStatus const &__ptr64 )__ptr64 
??4VolumeFveStatus@@QEAAAEAV0@AEBV0@@Z
; public: long __cdecl BuiVolume::AddSmartCard(struct HWND__ *__ptr64)__ptr64 
?AddSmartCard@BuiVolume@@QEAAJPEAUHWND__@@@Z
; private: long __cdecl BuiVolume::AllowForegroundWindowDisplay(void)__ptr64 
?AllowForegroundWindowDisplay@BuiVolume@@AEAAJXZ
; public: long __cdecl BuiVolume::AttemptAutoUnlock(void)__ptr64 
?AttemptAutoUnlock@BuiVolume@@QEAAJXZ
; private: long __cdecl BuiVolume::BasicDispatch(long,unsigned short const *__ptr64,unsigned short const *__ptr64,int *__ptr64,long *__ptr64)__ptr64 
?BasicDispatch@BuiVolume@@AEAAJJPEBG0PEAHPEAJ@Z
; private: long __cdecl BuiVolume::BasicDispatch(long,unsigned short const *__ptr64,unsigned short const *__ptr64,long *__ptr64)__ptr64 
?BasicDispatch@BuiVolume@@AEAAJJPEBG0PEAJ@Z
; private: long __cdecl BuiVolume::BasicDispatch(long,unsigned short const *__ptr64,int *__ptr64,long *__ptr64)__ptr64 
?BasicDispatch@BuiVolume@@AEAAJJPEBGPEAHPEAJ@Z
; private: long __cdecl BuiVolume::BasicDispatch(long,unsigned short const *__ptr64,long *__ptr64)__ptr64 
?BasicDispatch@BuiVolume@@AEAAJJPEBGPEAJ@Z
; private: long __cdecl BuiVolume::BasicDispatch(long,unsigned short const *__ptr64,unsigned short *__ptr64 *__ptr64)__ptr64 
?BasicDispatch@BuiVolume@@AEAAJJPEBGPEAPEAG@Z
; private: long __cdecl BuiVolume::BasicDispatch(long,unsigned short const *__ptr64,struct tagVARIANT *__ptr64)__ptr64 
?BasicDispatch@BuiVolume@@AEAAJJPEBGPEAUtagVARIANT@@@Z
; long __cdecl BuisCreateElevatedProxyObject(struct HWND__ *__ptr64,struct IDispatch *__ptr64 *__ptr64)
?BuisCreateElevatedProxyObject@@YAJPEAUHWND__@@PEAPEAUIDispatch@@@Z
; long __cdecl BuisCreateProxyObject(struct IDispatch *__ptr64 *__ptr64)
?BuisCreateProxyObject@@YAJPEAPEAUIDispatch@@@Z
; long __cdecl BuisDetectExistingWizard(unsigned short const *__ptr64,unsigned short const *__ptr64,unsigned short const *__ptr64,void *__ptr64 *__ptr64)
?BuisDetectExistingWizard@@YAJPEBG00PEAPEAX@Z
; bool __cdecl BuisIsFipsEnabled(void)
?BuisIsFipsEnabled@@YA_NXZ
; long __cdecl BuisIsHardwareReadyForConversion(void)
?BuisIsHardwareReadyForConversion@@YAJXZ
; long __cdecl BuisLaunchHelp(struct _GUID const &__ptr64 )
?BuisLaunchHelp@@YAJAEBU_GUID@@@Z
; public: bool __cdecl BuiVolume::CanBeResumed(void)const __ptr64 
?CanBeResumed@BuiVolume@@QEBA_NXZ
; private: bool __cdecl BuiVolume::CanRefreshStatus(void)const __ptr64 
?CanRefreshStatus@BuiVolume@@AEBA_NXZ
; public: void __cdecl BuiVolume::ClearProxyObject(void)__ptr64 
?ClearProxyObject@BuiVolume@@QEAAXXZ
; public: long __cdecl BuiVolume::Decrypt(void)__ptr64 
?Decrypt@BuiVolume@@QEAAJXZ
; public: static void __cdecl BuiVolume::DeleteVolumeList(struct _BuiVolumeNode *__ptr64 *__ptr64)
?DeleteVolumeList@BuiVolume@@SAXPEAPEAU_BuiVolumeNode@@@Z
; public: long __cdecl BuiVolume::Disable(void)__ptr64 
?Disable@BuiVolume@@QEAAJXZ
; public: long __cdecl BuiVolume::DisableAutoUnlock(void)__ptr64 
?DisableAutoUnlock@BuiVolume@@QEAAJXZ
; private: long __cdecl BuiVolume::Dispatch(long,struct tagDISPPARAMS *__ptr64,long *__ptr64)__ptr64 
?Dispatch@BuiVolume@@AEAAJJPEAUtagDISPPARAMS@@PEAJ@Z
; private: long __cdecl BuiVolume::Dispatch(long,struct tagDISPPARAMS *__ptr64,struct tagVARIANT *__ptr64)__ptr64 
?Dispatch@BuiVolume@@AEAAJJPEAUtagDISPPARAMS@@PEAUtagVARIANT@@@Z
; public: long __cdecl BuiVolume::EnableAutoUnlock(void)__ptr64 
?EnableAutoUnlock@BuiVolume@@QEAAJXZ
; public: bool __cdecl VolumeFveStatus::FailedDryRun(void)const __ptr64 
?FailedDryRun@VolumeFveStatus@@QEBA_NXZ
; private: long __cdecl BuiVolume::FindMountPoint(void)__ptr64 
?FindMountPoint@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::FormatNameAndMountPoint(void)__ptr64 
?FormatNameAndMountPoint@BuiVolume@@AEAAJXZ
; public: static long __cdecl BuiVolume::GetAllVolumes(struct _BuiVolumeNode *__ptr64 *__ptr64)
?GetAllVolumes@BuiVolume@@SAJPEAPEAU_BuiVolumeNode@@@Z
; public: double __cdecl BuiVolume::GetConvertedPercent(void)const __ptr64 
?GetConvertedPercent@BuiVolume@@QEBANXZ
; public: long __cdecl BuiVolume::GetDescription(unsigned short *__ptr64 *__ptr64)__ptr64 
?GetDescription@BuiVolume@@QEAAJPEAPEAG@Z
; public: long __cdecl VolumeFveStatus::GetLastConvertStatus(void)const __ptr64 
?GetLastConvertStatus@VolumeFveStatus@@QEBAJXZ
; public: static long __cdecl BuiVolume::GetOsVolume(class BuiVolume *__ptr64 *__ptr64)
?GetOsVolume@BuiVolume@@SAJPEAPEAV1@@Z
; public: long __cdecl BuiVolume::GetPasswordId(unsigned short *__ptr64 *__ptr64)__ptr64 
?GetPasswordId@BuiVolume@@QEAAJPEAPEAG@Z
; public: unsigned long __cdecl VolumeFveStatus::GetStatusFlags(void)const __ptr64 
?GetStatusFlags@VolumeFveStatus@@QEBAKXZ
; public: unsigned long __cdecl BuiVolume::GetWipeCount(void)const __ptr64 
?GetWipeCount@BuiVolume@@QEBAKXZ
; public: double __cdecl BuiVolume::GetWipedPercent(void)const __ptr64 
?GetWipedPercent@BuiVolume@@QEBANXZ
; public: bool __cdecl BuiVolume::HasAutoUnlockVolumesBound(void)__ptr64 
?HasAutoUnlockVolumesBound@BuiVolume@@QEAA_NXZ
; public: bool __cdecl VolumeFveStatus::HasExternalKey(void)const __ptr64 
?HasExternalKey@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasPassphraseProtector(void)const __ptr64 
?HasPassphraseProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasPinProtector(void)const __ptr64 
?HasPinProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasRecoveryData(void)const __ptr64 
?HasRecoveryData@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasRecoveryPassword(void)const __ptr64 
?HasRecoveryPassword@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasSmartCardProtector(void)const __ptr64 
?HasSmartCardProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasStartupKeyProtector(void)const __ptr64 
?HasStartupKeyProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasTpmProtector(void)const __ptr64 
?HasTpmProtector@VolumeFveStatus@@QEBA_NXZ
; public: long __cdecl BuiVolume::ImplicitPauseConversion(void)__ptr64 
?ImplicitPauseConversion@BuiVolume@@QEAAJXZ
; public: long __cdecl BuiVolume::Init(unsigned short *__ptr64)__ptr64 
?Init@BuiVolume@@QEAAJPEAG@Z
; private: void __cdecl BuiVolume::InitMembers(void)__ptr64 
?InitMembers@BuiVolume@@AEAAXXZ
; public: bool __cdecl BuiVolume::IsAutoUnlockEnabled(void)__ptr64 
?IsAutoUnlockEnabled@BuiVolume@@QEAA_NXZ
; public: bool __cdecl VolumeFveStatus::IsConverting(void)const __ptr64 
?IsConverting@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsCsvMetadataVolume(void)const __ptr64 
?IsCsvMetadataVolume@VolumeFveStatus@@QEBA_NXZ
; public: long __cdecl BuiVolume::IsCurrentPINEnhanced(int *__ptr64)__ptr64 
?IsCurrentPINEnhanced@BuiVolume@@QEAAJPEAH@Z
; public: bool __cdecl VolumeFveStatus::IsDecrypted(void)const __ptr64 
?IsDecrypted@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsDecrypting(void)const __ptr64 
?IsDecrypting@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsDisabled(void)const __ptr64 
?IsDisabled@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsEDriveVolume(void)const __ptr64 
?IsEDriveVolume@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsEncrypted(void)const __ptr64 
?IsEncrypted@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsEncrypting(void)const __ptr64 
?IsEncrypting@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl BuiVolume::IsFveNotifyNecessary(void)const __ptr64 
?IsFveNotifyNecessary@BuiVolume@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsLocked(void)const __ptr64 
?IsLocked@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsOn(void)const __ptr64 
?IsOn@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsOsVolume(void)const __ptr64 
?IsOsVolume@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsPartiallyConverted(void)const __ptr64 
?IsPartiallyConverted@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsPaused(void)const __ptr64 
?IsPaused@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsPreProvisioned(void)const __ptr64 
?IsPreProvisioned@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsRoamingDevice(void)const __ptr64 
?IsRoamingDevice@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsSecure(void)const __ptr64 
?IsSecure@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsUnknownFveVersion(void)const __ptr64 
?IsUnknownFveVersion@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsWiping(void)const __ptr64 
?IsWiping@VolumeFveStatus@@QEBA_NXZ
; public: long __cdecl BuiVolume::LaunchUpdate(void)__ptr64 
?LaunchUpdate@BuiVolume@@QEAAJXZ
; public: long __cdecl BuiVolume::LaunchWizard(unsigned short)__ptr64 
?LaunchWizard@BuiVolume@@QEAAJG@Z
; public: bool __cdecl BuiVolume::ManagementRequiresElevation(void)const __ptr64 
?ManagementRequiresElevation@BuiVolume@@QEBA_NXZ
; public: static unsigned int const BuiVolume::NO_DRIVE_LETTER
?NO_DRIVE_LETTER@BuiVolume@@2IB
; public: long __cdecl BuiVolume::NeedsDiscoveryVolumeUpdate(int *__ptr64)__ptr64 
?NeedsDiscoveryVolumeUpdate@BuiVolume@@QEAAJPEAH@Z
; public: bool __cdecl VolumeFveStatus::NeedsRestart(void)const __ptr64 
?NeedsRestart@VolumeFveStatus@@QEBA_NXZ
; public: long __cdecl BuiVolume::PauseConversion(void)__ptr64 
?PauseConversion@BuiVolume@@QEAAJXZ
; private: long __cdecl BuiVolume::ProxyAddSmartCard(struct HWND__ *__ptr64)__ptr64 
?ProxyAddSmartCard@BuiVolume@@AEAAJPEAUHWND__@@@Z
; private: long __cdecl BuiVolume::ProxyAreVolumesBound(void)__ptr64 
?ProxyAreVolumesBound@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyAttemptAutoUnlock(void)__ptr64 
?ProxyAttemptAutoUnlock@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyDecrypt(void)__ptr64 
?ProxyDecrypt@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyDisable(void)__ptr64 
?ProxyDisable@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyDisableAutoUnlock(void)__ptr64 
?ProxyDisableAutoUnlock@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyEnableAutoUnlock(void)__ptr64 
?ProxyEnableAutoUnlock@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyGetDescription(unsigned short *__ptr64 *__ptr64)__ptr64 
?ProxyGetDescription@BuiVolume@@AEAAJPEAPEAG@Z
; private: long __cdecl BuiVolume::ProxyGetPasswordId(unsigned short *__ptr64 *__ptr64)__ptr64 
?ProxyGetPasswordId@BuiVolume@@AEAAJPEAPEAG@Z
; private: long __cdecl BuiVolume::ProxyGetProcessId(unsigned long *__ptr64)__ptr64 
?ProxyGetProcessId@BuiVolume@@AEAAJPEAK@Z
; private: long __cdecl BuiVolume::ProxyImplicitPauseConversion(void)__ptr64 
?ProxyImplicitPauseConversion@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyIsAutoUnlockEnabled(void)__ptr64 
?ProxyIsAutoUnlockEnabled@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyLaunchUpdate(void)__ptr64 
?ProxyLaunchUpdate@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyLaunchWizard(unsigned short)__ptr64 
?ProxyLaunchWizard@BuiVolume@@AEAAJG@Z
; private: long __cdecl BuiVolume::ProxyNeedsDiscoveryVolumeUpdate(int *__ptr64)__ptr64 
?ProxyNeedsDiscoveryVolumeUpdate@BuiVolume@@AEAAJPEAH@Z
; private: long __cdecl BuiVolume::ProxyPauseConversion(void)__ptr64 
?ProxyPauseConversion@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyRemovePassphrase(void)__ptr64 
?ProxyRemovePassphrase@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyRemoveSmartCard(bool)__ptr64 
?ProxyRemoveSmartCard@BuiVolume@@AEAAJ_N@Z
; private: long __cdecl BuiVolume::ProxyResumeConversion(void)__ptr64 
?ProxyResumeConversion@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyServiceDiscoveryVolume(void)__ptr64 
?ProxyServiceDiscoveryVolume@BuiVolume@@AEAAJXZ
; private: long __cdecl BuiVolume::ProxyUnlockVolumeWithKey(unsigned short const *__ptr64,int *__ptr64)__ptr64 
?ProxyUnlockVolumeWithKey@BuiVolume@@AEAAJPEBGPEAH@Z
; private: long __cdecl BuiVolume::ProxyUnlockVolumeWithPassphrase(unsigned short const *__ptr64,int *__ptr64)__ptr64 
?ProxyUnlockVolumeWithPassphrase@BuiVolume@@AEAAJPEBGPEAH@Z
; private: long __cdecl BuiVolume::ProxyUnlockVolumeWithPassword(unsigned short const *__ptr64,int *__ptr64)__ptr64 
?ProxyUnlockVolumeWithPassword@BuiVolume@@AEAAJPEBGPEAH@Z
; private: long __cdecl BuiVolume::ProxyUnlockVolumeWithSmartCard(struct HWND__ *__ptr64,int *__ptr64)__ptr64 
?ProxyUnlockVolumeWithSmartCard@BuiVolume@@AEAAJPEAUHWND__@@PEAH@Z
; private: long __cdecl BuiVolume::ProxyUpgradeVolume(void)__ptr64 
?ProxyUpgradeVolume@BuiVolume@@AEAAJXZ
; public: long __cdecl BuiVolume::RefreshStatus(bool)__ptr64 
?RefreshStatus@BuiVolume@@QEAAJ_N@Z
; public: long __cdecl BuiVolume::RemovePassphrase(void)__ptr64 
?RemovePassphrase@BuiVolume@@QEAAJXZ
; public: long __cdecl BuiVolume::RemoveSmartCard(bool)__ptr64 
?RemoveSmartCard@BuiVolume@@QEAAJ_N@Z
; public: long __cdecl BuiVolume::ResumeConversion(void)__ptr64 
?ResumeConversion@BuiVolume@@QEAAJXZ
; public: void __cdecl BuiVolume::ResumeStatusRefreshing(void)__ptr64 
?ResumeStatusRefreshing@BuiVolume@@QEAAXXZ
; public: long __cdecl BuiVolume::ServiceDiscoveryVolume(void)__ptr64 
?ServiceDiscoveryVolume@BuiVolume@@QEAAJXZ
; public: void __cdecl BuiVolume::SetProxyObject(struct IDispatch *__ptr64)__ptr64 
?SetProxyObject@BuiVolume@@QEAAXPEAUIDispatch@@@Z
; public: void __cdecl BuiVolume::SuspendStatusRefreshing(void)__ptr64 
?SuspendStatusRefreshing@BuiVolume@@QEAAXXZ
; public: bool __cdecl BuiVolume::UnlockRequiresElevation(void)const __ptr64 
?UnlockRequiresElevation@BuiVolume@@QEBA_NXZ
; public: long __cdecl BuiVolume::UnlockWithKey(unsigned short const *__ptr64,int *__ptr64)__ptr64 
?UnlockWithKey@BuiVolume@@QEAAJPEBGPEAH@Z
; public: long __cdecl BuiVolume::UnlockWithPassphrase(unsigned short const *__ptr64,int *__ptr64)__ptr64 
?UnlockWithPassphrase@BuiVolume@@QEAAJPEBGPEAH@Z
; public: long __cdecl BuiVolume::UnlockWithPassword(unsigned short const *__ptr64,int *__ptr64)__ptr64 
?UnlockWithPassword@BuiVolume@@QEAAJPEBGPEAH@Z
; public: long __cdecl BuiVolume::UnlockWithSmartCard(struct HWND__ *__ptr64,int *__ptr64)__ptr64 
?UnlockWithSmartCard@BuiVolume@@QEAAJPEAUHWND__@@PEAH@Z
; public: long __cdecl BuiVolume::UpgradeVolume(void)__ptr64 
?UpgradeVolume@BuiVolume@@QEAAJXZ
