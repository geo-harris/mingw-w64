;
; Definition file of USERCPL.dll
; Automatic generated by gendef
; written by Kai Tietz 2008
;
LIBRARY "USERCPL.dll"
EXPORTS
; protected: __cdecl VolumeFveStatus::VolumeFveStatus(void)__ptr64 
??0VolumeFveStatus@@IEAA@XZ
; public: __cdecl VolumeFveStatus::VolumeFveStatus(unsigned long,long,enum _FVE_WIPING_STATE)__ptr64 
??0VolumeFveStatus@@QEAA@KJW4_FVE_WIPING_STATE@@@Z
; public: class BuiVolume &__ptr64 __cdecl BuiVolume::operator =(class BuiVolume const &__ptr64 )__ptr64 
??4BuiVolume@@QEAAAEAV0@AEBV0@@Z
; public: class VolumeFveStatus &__ptr64 __cdecl VolumeFveStatus::operator =(class VolumeFveStatus const &__ptr64 )__ptr64 
??4VolumeFveStatus@@QEAAAEAV0@AEBV0@@Z
; public: bool __cdecl VolumeFveStatus::FailedDryRun(void)const __ptr64 
?FailedDryRun@VolumeFveStatus@@QEBA_NXZ
; public: long __cdecl VolumeFveStatus::GetLastConvertStatus(void)const __ptr64 
?GetLastConvertStatus@VolumeFveStatus@@QEBAJXZ
; public: unsigned long __cdecl VolumeFveStatus::GetStatusFlags(void)const __ptr64 
?GetStatusFlags@VolumeFveStatus@@QEBAKXZ
; public: bool __cdecl VolumeFveStatus::HasExternalKey(void)const __ptr64 
?HasExternalKey@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasPassphraseProtector(void)const __ptr64 
?HasPassphraseProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasPinProtector(void)const __ptr64 
?HasPinProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasRecoveryData(void)const __ptr64 
?HasRecoveryData@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasRecoveryPassword(void)const __ptr64 
?HasRecoveryPassword@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasSmartCardProtector(void)const __ptr64 
?HasSmartCardProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasStartupKeyProtector(void)const __ptr64 
?HasStartupKeyProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::HasTpmProtector(void)const __ptr64 
?HasTpmProtector@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsConverting(void)const __ptr64 
?IsConverting@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsCsvMetadataVolume(void)const __ptr64 
?IsCsvMetadataVolume@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsDecrypted(void)const __ptr64 
?IsDecrypted@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsDecrypting(void)const __ptr64 
?IsDecrypting@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsDisabled(void)const __ptr64 
?IsDisabled@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsEDriveVolume(void)const __ptr64 
?IsEDriveVolume@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsEncrypted(void)const __ptr64 
?IsEncrypted@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsEncrypting(void)const __ptr64 
?IsEncrypting@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsLocked(void)const __ptr64 
?IsLocked@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsOn(void)const __ptr64 
?IsOn@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsOsVolume(void)const __ptr64 
?IsOsVolume@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsPartiallyConverted(void)const __ptr64 
?IsPartiallyConverted@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsPaused(void)const __ptr64 
?IsPaused@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsPreProvisioned(void)const __ptr64 
?IsPreProvisioned@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsRoamingDevice(void)const __ptr64 
?IsRoamingDevice@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsSecure(void)const __ptr64 
?IsSecure@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsUnknownFveVersion(void)const __ptr64 
?IsUnknownFveVersion@VolumeFveStatus@@QEBA_NXZ
; public: bool __cdecl VolumeFveStatus::IsWiping(void)const __ptr64 
?IsWiping@VolumeFveStatus@@QEBA_NXZ
; public: static unsigned int const BuiVolume::NO_DRIVE_LETTER
?NO_DRIVE_LETTER@BuiVolume@@2IB
; public: bool __cdecl VolumeFveStatus::NeedsRestart(void)const __ptr64 
?NeedsRestart@VolumeFveStatus@@QEBA_NXZ
DllCanUnloadNow
DllGetClassObject
DllRegisterServer
DllUnregisterServer
