;
; Definition file of MSDART.DLL
; Automatic generated by gendef
; written by Kai Tietz 2008
;
LIBRARY "MSDART.DLL"
EXPORTS
; public: __thiscall CCritSec::CCritSec(void)
??0CCritSec@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CDoubleList::CDoubleList(void)
??0CDoubleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(unsigned short const *)
??0CEXAutoBackupFile@@QAE@PBG@Z ; has WINAPI (@4)
; public: __thiscall CEXAutoBackupFile::CEXAutoBackupFile(void)
??0CEXAutoBackupFile@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CExFileOperation::CExFileOperation(void)
??0CExFileOperation@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CFakeLock::CFakeLock(void)
??0CFakeLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLKRHashTable::CLKRHashTable(char const *,unsigned long const(__stdcall *)(void const *),unsigned long(__stdcall *)(unsigned long),bool(__stdcall *)(unsigned long,unsigned long),void(__stdcall *)(void const *,int),double,unsigned long,unsigned long,bool,bool,class CLKRhashAllocator *)
??0CLKRHashTable@@QAE@PBDP6G?BKPBX@ZP6GKK@ZP6G_NKK@ZP6GX1H@ZNKK_N6PAVCLKRhashAllocator@@@Z ; has WINAPI (@48)
; public: __thiscall CLKRHashTableStats::CLKRHashTableStats(void)
??0CLKRHashTableStats@@QAE@XZ ; has WINAPI (@0)
; protected: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(class CLKRHashTable *,short)
??0CLKRHashTable_Iterator@@IAE@PAVCLKRHashTable@@F@Z ; has WINAPI (@8)
; public: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(class CLKRHashTable_Iterator const &)
??0CLKRHashTable_Iterator@@QAE@ABV0@@Z ; has WINAPI (@4)
; public: __thiscall CLKRHashTable_Iterator::CLKRHashTable_Iterator(void)
??0CLKRHashTable_Iterator@@QAE@XZ ; has WINAPI (@0)
; private: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const(__stdcall *)(void const *),unsigned long(__stdcall *)(unsigned long),bool(__stdcall *)(unsigned long,unsigned long),void(__stdcall *)(void const *,int),double,unsigned long,class CLKRHashTable *,bool,bool,class CLKRhashAllocator *)
??0CLKRLinearHashTable@@AAE@PBDP6G?BKPBX@ZP6GKK@ZP6G_NKK@ZP6GX1H@ZNKPAVCLKRHashTable@@_N7PAVCLKRhashAllocator@@@Z ; has WINAPI (@48)
; public: __thiscall CLKRLinearHashTable::CLKRLinearHashTable(char const *,unsigned long const(__stdcall *)(void const *),unsigned long(__stdcall *)(unsigned long),bool(__stdcall *)(unsigned long,unsigned long),void(__stdcall *)(void const *,int),double,unsigned long,unsigned long,bool,bool,class CLKRhashAllocator *)
??0CLKRLinearHashTable@@QAE@PBDP6G?BKPBX@ZP6GKK@ZP6G_NKK@ZP6GX1H@ZNKK_N6PAVCLKRhashAllocator@@@Z ; has WINAPI (@48)
; protected: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(class CLKRLinearHashTable *,class CNodeClump *,unsigned long,short)
??0CLKRLinearHashTable_Iterator@@IAE@PAVCLKRLinearHashTable@@PAVCNodeClump@@KF@Z ; has WINAPI (@16)
; public: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(class CLKRLinearHashTable_Iterator const &)
??0CLKRLinearHashTable_Iterator@@QAE@ABV0@@Z ; has WINAPI (@4)
; public: __thiscall CLKRLinearHashTable_Iterator::CLKRLinearHashTable_Iterator(void)
??0CLKRLinearHashTable_Iterator@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLKRhashDefaultAllocator::CLKRhashDefaultAllocator(void)
??0CLKRhashDefaultAllocator@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLockedDoubleList::CLockedDoubleList(void)
??0CLockedDoubleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLockedSingleList::CLockedSingleList(void)
??0CLockedSingleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock2::CReaderWriterLock2(void)
??0CReaderWriterLock2@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock3::CReaderWriterLock3(void)
??0CReaderWriterLock3@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock3AR::CReaderWriterLock3AR(void)
??0CReaderWriterLock3AR@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock::CReaderWriterLock(void)
??0CReaderWriterLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CSingleList::CSingleList(void)
??0CSingleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CSmallSpinLock::CSmallSpinLock(void)
??0CSmallSpinLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CSpinLock::CSpinLock(void)
??0CSpinLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CCritSec::~CCritSec(void)
??1CCritSec@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CDoubleList::~CDoubleList(void)
??1CDoubleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CEXAutoBackupFile::~CEXAutoBackupFile(void)
??1CEXAutoBackupFile@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CExFileOperation::~CExFileOperation(void)
??1CExFileOperation@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CFakeLock::~CFakeLock(void)
??1CFakeLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLKRHashTable::~CLKRHashTable(void)
??1CLKRHashTable@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLKRHashTable_Iterator::~CLKRHashTable_Iterator(void)
??1CLKRHashTable_Iterator@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLKRLinearHashTable::~CLKRLinearHashTable(void)
??1CLKRLinearHashTable@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLKRLinearHashTable_Iterator::~CLKRLinearHashTable_Iterator(void)
??1CLKRLinearHashTable_Iterator@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLockedDoubleList::~CLockedDoubleList(void)
??1CLockedDoubleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CLockedSingleList::~CLockedSingleList(void)
??1CLockedSingleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock2::~CReaderWriterLock2(void)
??1CReaderWriterLock2@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock3::~CReaderWriterLock3(void)
??1CReaderWriterLock3@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock3AR::~CReaderWriterLock3AR(void)
??1CReaderWriterLock3AR@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CReaderWriterLock::~CReaderWriterLock(void)
??1CReaderWriterLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CSingleList::~CSingleList(void)
??1CSingleList@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CSmallSpinLock::~CSmallSpinLock(void)
??1CSmallSpinLock@@QAE@XZ ; has WINAPI (@0)
; public: __thiscall CSpinLock::~CSpinLock(void)
??1CSpinLock@@QAE@XZ ; has WINAPI (@0)
; public: class <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL> &__thiscall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::operator =(class <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL> const &)
??4?$CLockBase@$00$00$02$00$02$01@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL> &__thiscall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::operator =(class <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL> const &)
??4?$CLockBase@$01$00$00$00$02$01@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL> &__thiscall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::operator =(class <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL> const &)
??4?$CLockBase@$02$00$00$00$00$00@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL> &__thiscall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::operator =(class <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL> const &)
??4?$CLockBase@$03$00$00$01$02$02@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL> &__thiscall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::operator =(class <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL> const &)
??4?$CLockBase@$04$01$01$00$02$01@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL> &__thiscall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::operator =(class <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL> const &)
??4?$CLockBase@$05$01$01$00$02$01@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL> &__thiscall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::operator =(class <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL> const &)
??4?$CLockBase@$06$01$00$00$02$01@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL> &__thiscall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::operator =(class <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL> const &)
??4?$CLockBase@$07$01$00$00$02$01@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CCritSec &__thiscall CCritSec::operator =(class CCritSec const &)
??4CCritSec@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CDoubleList &__thiscall CDoubleList::operator =(class CDoubleList const &)
??4CDoubleList@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CEXAutoBackupFile &__thiscall CEXAutoBackupFile::operator =(class CEXAutoBackupFile const &)
??4CEXAutoBackupFile@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CExFileOperation &__thiscall CExFileOperation::operator =(class CExFileOperation const &)
??4CExFileOperation@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CFakeLock &__thiscall CFakeLock::operator =(class CFakeLock const &)
??4CFakeLock@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CLKRHashTableStats &__thiscall CLKRHashTableStats::operator =(class CLKRHashTableStats const &)
??4CLKRHashTableStats@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CLKRHashTable_Iterator &__thiscall CLKRHashTable_Iterator::operator =(class CLKRHashTable_Iterator const &)
??4CLKRHashTable_Iterator@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CLKRLinearHashTable_Iterator &__thiscall CLKRLinearHashTable_Iterator::operator =(class CLKRLinearHashTable_Iterator const &)
??4CLKRLinearHashTable_Iterator@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CLockedDoubleList &__thiscall CLockedDoubleList::operator =(class CLockedDoubleList const &)
??4CLockedDoubleList@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CLockedSingleList &__thiscall CLockedSingleList::operator =(class CLockedSingleList const &)
??4CLockedSingleList@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CMdVersionInfo &__thiscall CMdVersionInfo::operator =(class CMdVersionInfo const &)
??4CMdVersionInfo@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CReaderWriterLock2 &__thiscall CReaderWriterLock2::operator =(class CReaderWriterLock2 const &)
??4CReaderWriterLock2@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CReaderWriterLock3 &__thiscall CReaderWriterLock3::operator =(class CReaderWriterLock3 const &)
??4CReaderWriterLock3@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CReaderWriterLock3AR &__thiscall CReaderWriterLock3AR::operator =(class CReaderWriterLock3AR const &)
??4CReaderWriterLock3AR@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CReaderWriterLock &__thiscall CReaderWriterLock::operator =(class CReaderWriterLock const &)
??4CReaderWriterLock@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CSingleList &__thiscall CSingleList::operator =(class CSingleList const &)
??4CSingleList@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CSmallSpinLock &__thiscall CSmallSpinLock::operator =(class CSmallSpinLock const &)
??4CSmallSpinLock@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: class CSpinLock &__thiscall CSpinLock::operator =(class CSpinLock const &)
??4CSpinLock@@QAEAAV0@ABV0@@Z ; has WINAPI (@4)
; public: bool __thiscall CLKRHashTable_Iterator::operator ==(class CLKRHashTable_Iterator const &)const 
??8CLKRHashTable_Iterator@@QBE_NABV0@@Z ; has WINAPI (@4)
; public: bool __thiscall CLKRLinearHashTable_Iterator::operator ==(class CLKRLinearHashTable_Iterator const &)const 
??8CLKRLinearHashTable_Iterator@@QBE_NABV0@@Z ; has WINAPI (@4)
; public: bool __thiscall CLKRHashTable_Iterator::operator !=(class CLKRHashTable_Iterator const &)const 
??9CLKRHashTable_Iterator@@QBE_NABV0@@Z ; has WINAPI (@4)
; public: bool __thiscall CLKRLinearHashTable_Iterator::operator !=(class CLKRLinearHashTable_Iterator const &)const 
??9CLKRLinearHashTable_Iterator@@QBE_NABV0@@Z ; has WINAPI (@4)
; const CLKRhashDefaultAllocator::$vftable
??_7CLKRhashDefaultAllocator@@6B@ DATA
; public: virtual void *__thiscall CLKRhashDefaultAllocator::Alloc(unsigned int,enum CLKRhashAllocator::Type)
?Alloc@CLKRhashDefaultAllocator@@UAEPAXIW4Type@CLKRhashAllocator@@@Z ; has WINAPI (@8)
; public: unsigned long __thiscall CLKRHashTable::Apply(enum LK_ACTION(__stdcall *)(void const *,void *),void *,enum LK_LOCKTYPE)
?Apply@CLKRHashTable@@QAEKP6G?AW4LK_ACTION@@PBXPAX@Z1W4LK_LOCKTYPE@@@Z ; has WINAPI (@12)
; public: unsigned long __thiscall CLKRLinearHashTable::Apply(enum LK_ACTION(__stdcall *)(void const *,void *),void *,enum LK_LOCKTYPE)
?Apply@CLKRLinearHashTable@@QAEKP6G?AW4LK_ACTION@@PBXPAX@Z1W4LK_LOCKTYPE@@@Z ; has WINAPI (@12)
; public: unsigned long __thiscall CLKRHashTable::ApplyIf(enum LK_PREDICATE(__stdcall *)(void const *,void *),enum LK_ACTION(__stdcall *)(void const *,void *),void *,enum LK_LOCKTYPE)
?ApplyIf@CLKRHashTable@@QAEKP6G?AW4LK_PREDICATE@@PBXPAX@ZP6G?AW4LK_ACTION@@01@Z1W4LK_LOCKTYPE@@@Z ; has WINAPI (@16)
; public: unsigned long __thiscall CLKRLinearHashTable::ApplyIf(enum LK_PREDICATE(__stdcall *)(void const *,void *),enum LK_ACTION(__stdcall *)(void const *,void *),void *,enum LK_LOCKTYPE)
?ApplyIf@CLKRLinearHashTable@@QAEKP6G?AW4LK_PREDICATE@@PBXPAX@ZP6G?AW4LK_ACTION@@01@Z1W4LK_LOCKTYPE@@@Z ; has WINAPI (@16)
; public: long __thiscall CEXAutoBackupFile::BackupFile(unsigned short const *)
?BackupFile@CEXAutoBackupFile@@QAEJPBG@Z ; has WINAPI (@4)
; public: class CLKRHashTable_Iterator __thiscall CLKRHashTable::Begin(void)
?Begin@CLKRHashTable@@QAE?AVCLKRHashTable_Iterator@@XZ ; has WINAPI (@4)
; public: class CLKRLinearHashTable_Iterator __thiscall CLKRLinearHashTable::Begin(void)
?Begin@CLKRLinearHashTable@@QAE?AVCLKRLinearHashTable_Iterator@@XZ ; has WINAPI (@4)
; public: static long __stdcall CLKRHashTableStats::BucketIndex(long)
?BucketIndex@CLKRHashTableStats@@SGJJ@Z ; has WINAPI (@4)
; public: static long __stdcall CLKRHashTableStats::BucketSize(long)
?BucketSize@CLKRHashTableStats@@SGJJ@Z ; has WINAPI (@4)
; public: static long const *__stdcall CLKRHashTableStats::BucketSizes(void)
?BucketSizes@CLKRHashTableStats@@SGPBJXZ ; has WINAPI (@0)
; public: int __thiscall CLKRHashTable::CheckTable(void)const 
?CheckTable@CLKRHashTable@@QBEHXZ ; has WINAPI (@0)
; public: int __thiscall CLKRLinearHashTable::CheckTable(void)const 
?CheckTable@CLKRLinearHashTable@@QBEHXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CCritSec::ClassName(void)
?ClassName@CCritSec@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CFakeLock::ClassName(void)
?ClassName@CFakeLock@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CLKRHashTable::ClassName(void)
?ClassName@CLKRHashTable@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CLKRLinearHashTable::ClassName(void)
?ClassName@CLKRLinearHashTable@@SGPBGXZ ; has WINAPI (@0)
; public: virtual unsigned short const *__thiscall CLKRhashDefaultAllocator::ClassName(void)
?ClassName@CLKRhashDefaultAllocator@@UAEPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CReaderWriterLock2::ClassName(void)
?ClassName@CReaderWriterLock2@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CReaderWriterLock3::ClassName(void)
?ClassName@CReaderWriterLock3@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CReaderWriterLock3AR::ClassName(void)
?ClassName@CReaderWriterLock3AR@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CReaderWriterLock::ClassName(void)
?ClassName@CReaderWriterLock@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CSmallSpinLock::ClassName(void)
?ClassName@CSmallSpinLock@@SGPBGXZ ; has WINAPI (@0)
; public: static unsigned short const *__stdcall CSpinLock::ClassName(void)
?ClassName@CSpinLock@@SGPBGXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::Clear(void)
?Clear@CLKRHashTable@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::Clear(void)
?Clear@CLKRLinearHashTable@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CCritSec::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CCritSec@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CFakeLock::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CFakeLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::ConvertExclusiveToShared(void)const 
?ConvertExclusiveToShared@CLKRHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::ConvertExclusiveToShared(void)const 
?ConvertExclusiveToShared@CLKRLinearHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock2::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CReaderWriterLock2@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CReaderWriterLock3@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3AR::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CReaderWriterLock3AR@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CReaderWriterLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSmallSpinLock::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CSmallSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSpinLock::ConvertExclusiveToShared(void)
?ConvertExclusiveToShared@CSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CCritSec::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CCritSec@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CFakeLock::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CFakeLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::ConvertSharedToExclusive(void)const 
?ConvertSharedToExclusive@CLKRHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::ConvertSharedToExclusive(void)const 
?ConvertSharedToExclusive@CLKRLinearHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock2::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CReaderWriterLock2@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CReaderWriterLock3@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3AR::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CReaderWriterLock3AR@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CReaderWriterLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSmallSpinLock::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CSmallSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSpinLock::ConvertSharedToExclusive(void)
?ConvertSharedToExclusive@CSpinLock@@QAEXXZ ; has WINAPI (@0)
; long __stdcall CreateHolder(struct IGPDispenser *,int,unsigned int,struct IGPHolder **)
?CreateHolder@@YGJPAUIGPDispenser@@HIPAPAUIGPHolder@@@Z ; has WINAPI (@16)
; public: unsigned long __thiscall CLKRHashTable::DeleteIf(enum LK_PREDICATE(__stdcall *)(void const *,void *),void *)
?DeleteIf@CLKRHashTable@@QAEKP6G?AW4LK_PREDICATE@@PBXPAX@Z1@Z ; has WINAPI (@8)
; public: unsigned long __thiscall CLKRLinearHashTable::DeleteIf(enum LK_PREDICATE(__stdcall *)(void const *,void *),void *)
?DeleteIf@CLKRLinearHashTable@@QAEKP6G?AW4LK_PREDICATE@@PBXPAX@Z1@Z ; has WINAPI (@8)
; public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteKey(unsigned long)
?DeleteKey@CLKRHashTable@@QAE?AW4LK_RETCODE@@K@Z ; has WINAPI (@4)
; public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteKey(unsigned long)
?DeleteKey@CLKRLinearHashTable@@QAE?AW4LK_RETCODE@@K@Z ; has WINAPI (@4)
; public: enum LK_RETCODE __thiscall CLKRHashTable::DeleteRecord(void const *)
?DeleteRecord@CLKRHashTable@@QAE?AW4LK_RETCODE@@PBX@Z ; has WINAPI (@4)
; public: enum LK_RETCODE __thiscall CLKRLinearHashTable::DeleteRecord(void const *)
?DeleteRecord@CLKRLinearHashTable@@QAE?AW4LK_RETCODE@@PBX@Z ; has WINAPI (@4)
; public: class CLKRHashTable_Iterator __thiscall CLKRHashTable::End(void)
?End@CLKRHashTable@@QAE?AVCLKRHashTable_Iterator@@XZ ; has WINAPI (@4)
; public: class CLKRLinearHashTable_Iterator __thiscall CLKRLinearHashTable::End(void)
?End@CLKRLinearHashTable@@QAE?AVCLKRLinearHashTable_Iterator@@XZ ; has WINAPI (@4)
; public: bool __thiscall CLKRHashTable::EqualRange(unsigned long,class CLKRHashTable_Iterator &,class CLKRHashTable_Iterator &)
?EqualRange@CLKRHashTable@@QAE_NKAAVCLKRHashTable_Iterator@@0@Z ; has WINAPI (@12)
; public: bool __thiscall CLKRLinearHashTable::EqualRange(unsigned long,class CLKRLinearHashTable_Iterator &,class CLKRLinearHashTable_Iterator &)
?EqualRange@CLKRLinearHashTable@@QAE_NKAAVCLKRLinearHashTable_Iterator@@0@Z ; has WINAPI (@12)
; public: bool __thiscall CLKRHashTable::Erase(class CLKRHashTable_Iterator &,class CLKRHashTable_Iterator &)
?Erase@CLKRHashTable@@QAE_NAAVCLKRHashTable_Iterator@@0@Z ; has WINAPI (@8)
; public: bool __thiscall CLKRHashTable::Erase(class CLKRHashTable_Iterator &)
?Erase@CLKRHashTable@@QAE_NAAVCLKRHashTable_Iterator@@@Z ; has WINAPI (@4)
; public: bool __thiscall CLKRLinearHashTable::Erase(class CLKRLinearHashTable_Iterator &,class CLKRLinearHashTable_Iterator &)
?Erase@CLKRLinearHashTable@@QAE_NAAVCLKRLinearHashTable_Iterator@@0@Z ; has WINAPI (@8)
; public: bool __thiscall CLKRLinearHashTable::Erase(class CLKRLinearHashTable_Iterator &)
?Erase@CLKRLinearHashTable@@QAE_NAAVCLKRLinearHashTable_Iterator@@@Z ; has WINAPI (@4)
; public: long __thiscall CExFileOperation::FOCopyFile(unsigned short const *,unsigned short const *,int)
?FOCopyFile@CExFileOperation@@QAEJPBG0H@Z ; has WINAPI (@12)
; public: long __thiscall CExFileOperation::FOCopyFileDACLS(unsigned short const *,unsigned short const *)
?FOCopyFileDACLS@CExFileOperation@@QAEJPBG0@Z ; has WINAPI (@8)
; public: long __thiscall CExFileOperation::FODeleteFile(unsigned short const *)
?FODeleteFile@CExFileOperation@@QAEJPBG@Z ; has WINAPI (@4)
; public: long __thiscall CExFileOperation::FOMoveFile(unsigned short const *,unsigned short const *)
?FOMoveFile@CExFileOperation@@QAEJPBG0@Z ; has WINAPI (@8)
; public: long __thiscall CExFileOperation::FOReplaceFile(unsigned short const *,unsigned short const *)
?FOReplaceFile@CExFileOperation@@QAEJPBG0@Z ; has WINAPI (@8)
; public: bool __thiscall CLKRHashTable::Find(unsigned long,class CLKRHashTable_Iterator &)
?Find@CLKRHashTable@@QAE_NKAAVCLKRHashTable_Iterator@@@Z ; has WINAPI (@8)
; public: bool __thiscall CLKRLinearHashTable::Find(unsigned long,class CLKRLinearHashTable_Iterator &)
?Find@CLKRLinearHashTable@@QAE_NKAAVCLKRLinearHashTable_Iterator@@@Z ; has WINAPI (@8)
; public: enum LK_RETCODE __thiscall CLKRHashTable::FindKey(unsigned long,void const **)const 
?FindKey@CLKRHashTable@@QBE?AW4LK_RETCODE@@KPAPBX@Z ; has WINAPI (@8)
; public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindKey(unsigned long,void const **)const 
?FindKey@CLKRLinearHashTable@@QBE?AW4LK_RETCODE@@KPAPBX@Z ; has WINAPI (@8)
; public: enum LK_RETCODE __thiscall CLKRHashTable::FindRecord(void const *)const 
?FindRecord@CLKRHashTable@@QBE?AW4LK_RETCODE@@PBX@Z ; has WINAPI (@4)
; public: enum LK_RETCODE __thiscall CLKRLinearHashTable::FindRecord(void const *)const 
?FindRecord@CLKRLinearHashTable@@QBE?AW4LK_RETCODE@@PBX@Z ; has WINAPI (@4)
; public: class CListEntry *const __thiscall CDoubleList::First(void)const 
?First@CDoubleList@@QBEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: class CListEntry *const __thiscall CLockedDoubleList::First(void)
?First@CLockedDoubleList@@QAEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: virtual bool __thiscall CLKRhashDefaultAllocator::Free(void *,enum CLKRhashAllocator::Type)
?Free@CLKRhashDefaultAllocator@@UAE_NPAXW4Type@CLKRhashAllocator@@@Z ; has WINAPI (@8)
; public: int __thiscall CEXAutoBackupFile::GetBackupFile(unsigned short **)
?GetBackupFile@CEXAutoBackupFile@@QAEHPAPAG@Z ; has WINAPI (@4)
; public: unsigned short __thiscall CLKRHashTable::GetBucketLockSpinCount(void)const 
?GetBucketLockSpinCount@CLKRHashTable@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CLKRLinearHashTable::GetBucketLockSpinCount(void)const 
?GetBucketLockSpinCount@CLKRLinearHashTable@@QBEGXZ ; has WINAPI (@0)
; public: static double __stdcall CCritSec::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CCritSec@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CFakeLock::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CFakeLock@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CReaderWriterLock2::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CReaderWriterLock2@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CReaderWriterLock3::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CReaderWriterLock3@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CReaderWriterLock3AR::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CReaderWriterLock3AR@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CReaderWriterLock::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CReaderWriterLock@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CSmallSpinLock::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CSmallSpinLock@@SGNXZ ; has WINAPI (@0)
; public: static double __stdcall CSpinLock::GetDefaultSpinAdjustmentFactor(void)
?GetDefaultSpinAdjustmentFactor@CSpinLock@@SGNXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CCritSec::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CCritSec@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CFakeLock::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CFakeLock@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CReaderWriterLock2::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CReaderWriterLock2@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CReaderWriterLock3::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CReaderWriterLock3@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CReaderWriterLock3AR::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CReaderWriterLock3AR@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CReaderWriterLock::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CReaderWriterLock@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CSmallSpinLock::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CSmallSpinLock@@SGGXZ ; has WINAPI (@0)
; public: static unsigned short __stdcall CSpinLock::GetDefaultSpinCount(void)
?GetDefaultSpinCount@CSpinLock@@SGGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CCritSec::GetSpinCount(void)const 
?GetSpinCount@CCritSec@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CFakeLock::GetSpinCount(void)const 
?GetSpinCount@CFakeLock@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CReaderWriterLock2::GetSpinCount(void)const 
?GetSpinCount@CReaderWriterLock2@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CReaderWriterLock3::GetSpinCount(void)const 
?GetSpinCount@CReaderWriterLock3@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CReaderWriterLock3AR::GetSpinCount(void)const 
?GetSpinCount@CReaderWriterLock3AR@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CReaderWriterLock::GetSpinCount(void)const 
?GetSpinCount@CReaderWriterLock@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CSmallSpinLock::GetSpinCount(void)const 
?GetSpinCount@CSmallSpinLock@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CSpinLock::GetSpinCount(void)const 
?GetSpinCount@CSpinLock@@QBEGXZ ; has WINAPI (@0)
; public: class CLKRHashTableStats __thiscall CLKRHashTable::GetStatistics(void)const 
?GetStatistics@CLKRHashTable@@QBE?AVCLKRHashTableStats@@XZ ; has WINAPI (@4)
; public: class CLKRHashTableStats __thiscall CLKRLinearHashTable::GetStatistics(void)const 
?GetStatistics@CLKRLinearHashTable@@QBE?AVCLKRHashTableStats@@XZ ; has WINAPI (@4)
; public: unsigned short __thiscall CLKRHashTable::GetTableLockSpinCount(void)const 
?GetTableLockSpinCount@CLKRHashTable@@QBEGXZ ; has WINAPI (@0)
; public: unsigned short __thiscall CLKRLinearHashTable::GetTableLockSpinCount(void)const 
?GetTableLockSpinCount@CLKRLinearHashTable@@QBEGXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::GetVersionExW(struct _OSVERSIONINFOW *)
?GetVersionExW@CMdVersionInfo@@SAHPAU_OSVERSIONINFOW@@@Z ; has WINAPI (@0)
; public: class CListEntry const *const __thiscall CDoubleList::HeadNode(void)const 
?HeadNode@CDoubleList@@QBEQBVCListEntry@@XZ ; has WINAPI (@0)
; public: class CListEntry const *const __thiscall CLockedDoubleList::HeadNode(void)const 
?HeadNode@CLockedDoubleList@@QBEQBVCListEntry@@XZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable_Iterator::Increment(void)
?Increment@CLKRHashTable_Iterator@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable_Iterator::Increment(void)
?Increment@CLKRLinearHashTable_Iterator@@QAE_NXZ ; has WINAPI (@0)
; private: static int __cdecl CMdVersionInfo::InitializeVersionInfo(void)
?InitializeVersionInfo@CMdVersionInfo@@CAHXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::Insert(void const *,class CLKRHashTable_Iterator &,bool)
?Insert@CLKRHashTable@@QAE_NPBXAAVCLKRHashTable_Iterator@@_N@Z ; has WINAPI (@12)
; public: bool __thiscall CLKRLinearHashTable::Insert(void const *,class CLKRLinearHashTable_Iterator &,bool)
?Insert@CLKRLinearHashTable@@QAE_NPBXAAVCLKRLinearHashTable_Iterator@@_N@Z ; has WINAPI (@12)
; public: void __thiscall CDoubleList::InsertHead(class CListEntry *const)
?InsertHead@CDoubleList@@QAEXQAVCListEntry@@@Z ; has WINAPI (@4)
; public: void __thiscall CLockedDoubleList::InsertHead(class CListEntry *const)
?InsertHead@CLockedDoubleList@@QAEXQAVCListEntry@@@Z ; has WINAPI (@4)
; public: enum LK_RETCODE __thiscall CLKRHashTable::InsertRecord(void const *,bool,void const **)
?InsertRecord@CLKRHashTable@@QAE?AW4LK_RETCODE@@PBX_NPAPBX@Z ; has WINAPI (@12)
; public: enum LK_RETCODE __thiscall CLKRLinearHashTable::InsertRecord(void const *,bool,void const **)
?InsertRecord@CLKRLinearHashTable@@QAE?AW4LK_RETCODE@@PBX_NPAPBX@Z ; has WINAPI (@12)
; public: void __thiscall CDoubleList::InsertTail(class CListEntry *const)
?InsertTail@CDoubleList@@QAEXQAVCListEntry@@@Z ; has WINAPI (@4)
; public: void __thiscall CLockedDoubleList::InsertTail(class CListEntry *const)
?InsertTail@CLockedDoubleList@@QAEXQAVCListEntry@@@Z ; has WINAPI (@4)
; public: bool __thiscall CDoubleList::IsEmpty(void)const 
?IsEmpty@CDoubleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLockedDoubleList::IsEmpty(void)const 
?IsEmpty@CLockedDoubleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLockedSingleList::IsEmpty(void)const 
?IsEmpty@CLockedSingleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSingleList::IsEmpty(void)const 
?IsEmpty@CSingleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLockedDoubleList::IsLocked(void)const 
?IsLocked@CLockedDoubleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLockedSingleList::IsLocked(void)const 
?IsLocked@CLockedSingleList@@QBE_NXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsMillnm(void)
?IsMillnm@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: bool __thiscall CCritSec::IsReadLocked(void)const 
?IsReadLocked@CCritSec@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::IsReadLocked(void)const 
?IsReadLocked@CFakeLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::IsReadLocked(void)const 
?IsReadLocked@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::IsReadLocked(void)const 
?IsReadLocked@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock2::IsReadLocked(void)const 
?IsReadLocked@CReaderWriterLock2@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::IsReadLocked(void)const 
?IsReadLocked@CReaderWriterLock3@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::IsReadLocked(void)const 
?IsReadLocked@CReaderWriterLock3AR@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock::IsReadLocked(void)const 
?IsReadLocked@CReaderWriterLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSmallSpinLock::IsReadLocked(void)const 
?IsReadLocked@CSmallSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::IsReadLocked(void)const 
?IsReadLocked@CSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CCritSec::IsReadUnlocked(void)const 
?IsReadUnlocked@CCritSec@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::IsReadUnlocked(void)const 
?IsReadUnlocked@CFakeLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::IsReadUnlocked(void)const 
?IsReadUnlocked@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::IsReadUnlocked(void)const 
?IsReadUnlocked@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock2::IsReadUnlocked(void)const 
?IsReadUnlocked@CReaderWriterLock2@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::IsReadUnlocked(void)const 
?IsReadUnlocked@CReaderWriterLock3@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::IsReadUnlocked(void)const 
?IsReadUnlocked@CReaderWriterLock3AR@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock::IsReadUnlocked(void)const 
?IsReadUnlocked@CReaderWriterLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSmallSpinLock::IsReadUnlocked(void)const 
?IsReadUnlocked@CSmallSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::IsReadUnlocked(void)const 
?IsReadUnlocked@CSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLockedDoubleList::IsUnlocked(void)const 
?IsUnlocked@CLockedDoubleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLockedSingleList::IsUnlocked(void)const 
?IsUnlocked@CLockedSingleList@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::IsUsable(void)const 
?IsUsable@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::IsUsable(void)const 
?IsUsable@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::IsValid(void)const 
?IsValid@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable_Iterator::IsValid(void)const 
?IsValid@CLKRHashTable_Iterator@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::IsValid(void)const 
?IsValid@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable_Iterator::IsValid(void)const 
?IsValid@CLKRLinearHashTable_Iterator@@QBE_NXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWin2k(void)
?IsWin2k@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWin2korLater(void)
?IsWin2korLater@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWin95(void)
?IsWin95@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWin98(void)
?IsWin98@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWin98orLater(void)
?IsWin98orLater@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWin9x(void)
?IsWin9x@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWinNT4(void)
?IsWinNT4@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWinNT(void)
?IsWinNT@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: static int __cdecl CMdVersionInfo::IsWinNt4orLater(void)
?IsWinNt4orLater@CMdVersionInfo@@SAHXZ ; has WINAPI (@0)
; public: bool __thiscall CCritSec::IsWriteLocked(void)const 
?IsWriteLocked@CCritSec@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::IsWriteLocked(void)const 
?IsWriteLocked@CFakeLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::IsWriteLocked(void)const 
?IsWriteLocked@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::IsWriteLocked(void)const 
?IsWriteLocked@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock2::IsWriteLocked(void)const 
?IsWriteLocked@CReaderWriterLock2@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::IsWriteLocked(void)const 
?IsWriteLocked@CReaderWriterLock3@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::IsWriteLocked(void)const 
?IsWriteLocked@CReaderWriterLock3AR@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock::IsWriteLocked(void)const 
?IsWriteLocked@CReaderWriterLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSmallSpinLock::IsWriteLocked(void)const 
?IsWriteLocked@CSmallSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::IsWriteLocked(void)const 
?IsWriteLocked@CSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CCritSec::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CCritSec@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CFakeLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock2::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CReaderWriterLock2@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CReaderWriterLock3@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CReaderWriterLock3AR@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CReaderWriterLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSmallSpinLock::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CSmallSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::IsWriteUnlocked(void)const 
?IsWriteUnlocked@CSpinLock@@QBE_NXZ ; has WINAPI (@0)
; public: unsigned long const __thiscall CLKRHashTable_Iterator::Key(void)const 
?Key@CLKRHashTable_Iterator@@QBE?BKXZ ; has WINAPI (@0)
; public: unsigned long const __thiscall CLKRLinearHashTable_Iterator::Key(void)const 
?Key@CLKRLinearHashTable_Iterator@@QBE?BKXZ ; has WINAPI (@0)
; public: class CListEntry *const __thiscall CDoubleList::Last(void)const 
?Last@CDoubleList@@QBEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: class CListEntry *const __thiscall CLockedDoubleList::Last(void)
?Last@CLockedDoubleList@@QAEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: void __thiscall CLockedDoubleList::Lock(void)
?Lock@CLockedDoubleList@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLockedSingleList::Lock(void)
?Lock@CLockedSingleList@@QAEXXZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::LockType(void)
?LockType@?$CLockBase@$00$00$02$00$02$01@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::LockType(void)
?LockType@?$CLockBase@$01$00$00$00$02$01@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::LockType(void)
?LockType@?$CLockBase@$02$00$00$00$00$00@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::LockType(void)
?LockType@?$CLockBase@$03$00$00$01$02$02@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::LockType(void)
?LockType@?$CLockBase@$04$01$01$00$02$01@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::LockType(void)
?LockType@?$CLockBase@$05$01$01$00$02$01@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::LockType(void)
?LockType@?$CLockBase@$06$01$00$00$02$01@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_LOCKTYPE __stdcall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::LockType(void)
?LockType@?$CLockBase@$07$01$00$00$02$01@@SG?AW4LOCK_LOCKTYPE@@XZ ; has WINAPI (@0)
; public: unsigned long __thiscall CLKRHashTable::MaxSize(void)const 
?MaxSize@CLKRHashTable@@QBEKXZ ; has WINAPI (@0)
; public: unsigned long __thiscall CLKRLinearHashTable::MaxSize(void)const 
?MaxSize@CLKRLinearHashTable@@QBEKXZ ; has WINAPI (@0)
; unsigned long __cdecl MpHeapCompact(void *)
?MpHeapCompact@@YAKPAX@Z ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::MultiKeys(void)const 
?MultiKeys@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::MultiKeys(void)const 
?MultiKeys@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::MutexType(void)
?MutexType@?$CLockBase@$00$00$02$00$02$01@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::MutexType(void)
?MutexType@?$CLockBase@$01$00$00$00$02$01@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::MutexType(void)
?MutexType@?$CLockBase@$02$00$00$00$00$00@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::MutexType(void)
?MutexType@?$CLockBase@$03$00$00$01$02$02@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::MutexType(void)
?MutexType@?$CLockBase@$04$01$01$00$02$01@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::MutexType(void)
?MutexType@?$CLockBase@$05$01$01$00$02$01@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::MutexType(void)
?MutexType@?$CLockBase@$06$01$00$00$02$01@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RW_MUTEX __stdcall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::MutexType(void)
?MutexType@?$CLockBase@$07$01$00$00$02$01@@SG?AW4LOCK_RW_MUTEX@@XZ ; has WINAPI (@0)
; public: int __thiscall CLKRHashTable::NumSubTables(void)const 
?NumSubTables@CLKRHashTable@@QBEHXZ ; has WINAPI (@0)
; public: static enum LK_TABLESIZE __stdcall CLKRHashTable::NumSubTables(unsigned long &,unsigned long &,bool)
?NumSubTables@CLKRHashTable@@SG?AW4LK_TABLESIZE@@AAK0_N@Z ; has WINAPI (@12)
; public: int __thiscall CLKRLinearHashTable::NumSubTables(void)const 
?NumSubTables@CLKRLinearHashTable@@QBEHXZ ; has WINAPI (@0)
; public: static enum LK_TABLESIZE __stdcall CLKRLinearHashTable::NumSubTables(unsigned long &,unsigned long &,bool)
?NumSubTables@CLKRLinearHashTable@@SG?AW4LK_TABLESIZE@@AAK0_N@Z ; has WINAPI (@12)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$00$00$02$00$02$01@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$01$00$00$00$02$01@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$02$00$00$00$00$00@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$03$00$00$01$02$02@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$04$01$01$00$02$01@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$05$01$01$00$02$01@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$06$01$00$00$02$01@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: static enum LOCK_PERLOCK_SPIN __stdcall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::PerLockSpin(void)
?PerLockSpin@?$CLockBase@$07$01$00$00$02$01@@SG?AW4LOCK_PERLOCK_SPIN@@XZ ; has WINAPI (@0)
; public: class CSingleListEntry *const __thiscall CLockedSingleList::Pop(void)
?Pop@CLockedSingleList@@QAEQAVCSingleListEntry@@XZ ; has WINAPI (@0)
; public: class CSingleListEntry *const __thiscall CSingleList::Pop(void)
?Pop@CSingleList@@QAEQAVCSingleListEntry@@XZ ; has WINAPI (@0)
; public: void __thiscall CLockedSingleList::Push(class CSingleListEntry *const)
?Push@CLockedSingleList@@QAEXQAVCSingleListEntry@@@Z ; has WINAPI (@4)
; public: void __thiscall CSingleList::Push(class CSingleListEntry *const)
?Push@CSingleList@@QAEXQAVCSingleListEntry@@@Z ; has WINAPI (@4)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::QueueType(void)
?QueueType@?$CLockBase@$00$00$02$00$02$01@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::QueueType(void)
?QueueType@?$CLockBase@$01$00$00$00$02$01@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::QueueType(void)
?QueueType@?$CLockBase@$02$00$00$00$00$00@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::QueueType(void)
?QueueType@?$CLockBase@$03$00$00$01$02$02@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::QueueType(void)
?QueueType@?$CLockBase@$04$01$01$00$02$01@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::QueueType(void)
?QueueType@?$CLockBase@$05$01$01$00$02$01@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::QueueType(void)
?QueueType@?$CLockBase@$06$01$00$00$02$01@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_QUEUE_TYPE __stdcall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::QueueType(void)
?QueueType@?$CLockBase@$07$01$00$00$02$01@@SG?AW4LOCK_QUEUE_TYPE@@XZ ; has WINAPI (@0)
; public: void __thiscall CCritSec::ReadLock(void)
?ReadLock@CCritSec@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CFakeLock::ReadLock(void)
?ReadLock@CFakeLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::ReadLock(void)const 
?ReadLock@CLKRHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::ReadLock(void)const 
?ReadLock@CLKRLinearHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock2::ReadLock(void)
?ReadLock@CReaderWriterLock2@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3::ReadLock(void)
?ReadLock@CReaderWriterLock3@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3AR::ReadLock(void)
?ReadLock@CReaderWriterLock3AR@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock::ReadLock(void)
?ReadLock@CReaderWriterLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSmallSpinLock::ReadLock(void)
?ReadLock@CSmallSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSpinLock::ReadLock(void)
?ReadLock@CSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: bool __thiscall CCritSec::ReadOrWriteLock(void)
?ReadOrWriteLock@CCritSec@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::ReadOrWriteLock(void)
?ReadOrWriteLock@CFakeLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::ReadOrWriteLock(void)
?ReadOrWriteLock@CReaderWriterLock3@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::ReadOrWriteLock(void)
?ReadOrWriteLock@CReaderWriterLock3AR@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::ReadOrWriteLock(void)
?ReadOrWriteLock@CSpinLock@@QAE_NXZ ; has WINAPI (@0)
; public: void __thiscall CCritSec::ReadOrWriteUnlock(bool)
?ReadOrWriteUnlock@CCritSec@@QAEX_N@Z ; has WINAPI (@4)
; public: void __thiscall CFakeLock::ReadOrWriteUnlock(bool)
?ReadOrWriteUnlock@CFakeLock@@QAEX_N@Z ; has WINAPI (@4)
; public: void __thiscall CReaderWriterLock3::ReadOrWriteUnlock(bool)
?ReadOrWriteUnlock@CReaderWriterLock3@@QAEX_N@Z ; has WINAPI (@4)
; public: void __thiscall CReaderWriterLock3AR::ReadOrWriteUnlock(bool)
?ReadOrWriteUnlock@CReaderWriterLock3AR@@QAEX_N@Z ; has WINAPI (@4)
; public: void __thiscall CSpinLock::ReadOrWriteUnlock(bool)
?ReadOrWriteUnlock@CSpinLock@@QAEX_N@Z ; has WINAPI (@4)
; public: void __thiscall CCritSec::ReadUnlock(void)
?ReadUnlock@CCritSec@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CFakeLock::ReadUnlock(void)
?ReadUnlock@CFakeLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::ReadUnlock(void)const 
?ReadUnlock@CLKRHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::ReadUnlock(void)const 
?ReadUnlock@CLKRLinearHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock2::ReadUnlock(void)
?ReadUnlock@CReaderWriterLock2@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3::ReadUnlock(void)
?ReadUnlock@CReaderWriterLock3@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3AR::ReadUnlock(void)
?ReadUnlock@CReaderWriterLock3AR@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock::ReadUnlock(void)
?ReadUnlock@CReaderWriterLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSmallSpinLock::ReadUnlock(void)
?ReadUnlock@CSmallSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSpinLock::ReadUnlock(void)
?ReadUnlock@CSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void const *__thiscall CLKRHashTable_Iterator::Record(void)const 
?Record@CLKRHashTable_Iterator@@QBEPBXXZ ; has WINAPI (@0)
; public: void const *__thiscall CLKRLinearHashTable_Iterator::Record(void)const 
?Record@CLKRLinearHashTable_Iterator@@QBEPBXXZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::Recursion(void)
?Recursion@?$CLockBase@$00$00$02$00$02$01@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::Recursion(void)
?Recursion@?$CLockBase@$01$00$00$00$02$01@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::Recursion(void)
?Recursion@?$CLockBase@$02$00$00$00$00$00@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::Recursion(void)
?Recursion@?$CLockBase@$03$00$00$01$02$02@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::Recursion(void)
?Recursion@?$CLockBase@$04$01$01$00$02$01@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::Recursion(void)
?Recursion@?$CLockBase@$05$01$01$00$02$01@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::Recursion(void)
?Recursion@?$CLockBase@$06$01$00$00$02$01@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static enum LOCK_RECURSION __stdcall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::Recursion(void)
?Recursion@?$CLockBase@$07$01$00$00$02$01@@SG?AW4LOCK_RECURSION@@XZ ; has WINAPI (@0)
; public: static void __cdecl CMdVersionInfo::ReleaseVersionInfo(void)
?ReleaseVersionInfo@CMdVersionInfo@@SAXXZ ; has WINAPI (@0)
; public: static void __stdcall CDoubleList::RemoveEntry(class CListEntry *const)
?RemoveEntry@CDoubleList@@SGXQAVCListEntry@@@Z ; has WINAPI (@4)
; public: void __thiscall CLockedDoubleList::RemoveEntry(class CListEntry *const)
?RemoveEntry@CLockedDoubleList@@QAEXQAVCListEntry@@@Z ; has WINAPI (@4)
; public: class CListEntry *const __thiscall CDoubleList::RemoveHead(void)
?RemoveHead@CDoubleList@@QAEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: class CListEntry *const __thiscall CLockedDoubleList::RemoveHead(void)
?RemoveHead@CLockedDoubleList@@QAEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: class CListEntry *const __thiscall CDoubleList::RemoveTail(void)
?RemoveTail@CDoubleList@@QAEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: class CListEntry *const __thiscall CLockedDoubleList::RemoveTail(void)
?RemoveTail@CLockedDoubleList@@QAEQAVCListEntry@@XZ ; has WINAPI (@0)
; public: long __thiscall CEXAutoBackupFile::RestoreFile(void)
?RestoreFile@CEXAutoBackupFile@@QAEJXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::SetBucketLockSpinCount(unsigned short)
?SetBucketLockSpinCount@CLKRHashTable@@QAEXG@Z ; has WINAPI (@4)
; public: void __thiscall CLKRLinearHashTable::SetBucketLockSpinCount(unsigned short)
?SetBucketLockSpinCount@CLKRLinearHashTable@@QAEXG@Z ; has WINAPI (@4)
; public: static void __stdcall CCritSec::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CCritSec@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CFakeLock::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CFakeLock@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CReaderWriterLock2::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CReaderWriterLock2@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CReaderWriterLock3::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CReaderWriterLock3@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CReaderWriterLock3AR::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CReaderWriterLock3AR@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CReaderWriterLock::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CReaderWriterLock@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CSmallSpinLock::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CSmallSpinLock@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CSpinLock::SetDefaultSpinAdjustmentFactor(double)
?SetDefaultSpinAdjustmentFactor@CSpinLock@@SGXN@Z ; has WINAPI (@8)
; public: static void __stdcall CCritSec::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CCritSec@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CFakeLock::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CFakeLock@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CReaderWriterLock2::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CReaderWriterLock2@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CReaderWriterLock3::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CReaderWriterLock3@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CReaderWriterLock3AR::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CReaderWriterLock3AR@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CReaderWriterLock::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CReaderWriterLock@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CSmallSpinLock::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CSmallSpinLock@@SGXG@Z ; has WINAPI (@4)
; public: static void __stdcall CSpinLock::SetDefaultSpinCount(unsigned short)
?SetDefaultSpinCount@CSpinLock@@SGXG@Z ; has WINAPI (@4)
; public: bool __thiscall CCritSec::SetSpinCount(unsigned short)
?SetSpinCount@CCritSec@@QAE_NG@Z ; has WINAPI (@4)
; public: static unsigned long __stdcall CCritSec::SetSpinCount(class CCriticalSection **,unsigned long)
?SetSpinCount@CCritSec@@SGKPAPAVCCriticalSection@@K@Z ; has WINAPI (@8)
; public: bool __thiscall CFakeLock::SetSpinCount(unsigned short)
?SetSpinCount@CFakeLock@@QAE_NG@Z ; has WINAPI (@4)
; public: bool __thiscall CReaderWriterLock2::SetSpinCount(unsigned short)
?SetSpinCount@CReaderWriterLock2@@QAE_NG@Z ; has WINAPI (@4)
; public: bool __thiscall CReaderWriterLock3::SetSpinCount(unsigned short)
?SetSpinCount@CReaderWriterLock3@@QAE_NG@Z ; has WINAPI (@4)
; public: bool __thiscall CReaderWriterLock3AR::SetSpinCount(unsigned short)
?SetSpinCount@CReaderWriterLock3AR@@QAE_NG@Z ; has WINAPI (@4)
; public: bool __thiscall CReaderWriterLock::SetSpinCount(unsigned short)
?SetSpinCount@CReaderWriterLock@@QAE_NG@Z ; has WINAPI (@4)
; public: bool __thiscall CSmallSpinLock::SetSpinCount(unsigned short)
?SetSpinCount@CSmallSpinLock@@QAE_NG@Z ; has WINAPI (@4)
; public: bool __thiscall CSpinLock::SetSpinCount(unsigned short)
?SetSpinCount@CSpinLock@@QAE_NG@Z ; has WINAPI (@4)
; public: void __thiscall CLKRHashTable::SetTableLockSpinCount(unsigned short)
?SetTableLockSpinCount@CLKRHashTable@@QAEXG@Z ; has WINAPI (@4)
; public: void __thiscall CLKRLinearHashTable::SetTableLockSpinCount(unsigned short)
?SetTableLockSpinCount@CLKRLinearHashTable@@QAEXG@Z ; has WINAPI (@4)
; public: unsigned long __thiscall CLKRHashTable::Size(void)const 
?Size@CLKRHashTable@@QBEKXZ ; has WINAPI (@0)
; public: unsigned long __thiscall CLKRLinearHashTable::Size(void)const 
?Size@CLKRLinearHashTable@@QBEKXZ ; has WINAPI (@0)
; public: void __thiscall CSingleList::Swap(class CSingleList &)
?Swap@CSingleList@@QAEXAAV1@@Z ; has WINAPI (@4)
; public: bool __thiscall CReaderWriterLock3::TryConvertSharedToExclusive(void)
?TryConvertSharedToExclusive@CReaderWriterLock3@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::TryConvertSharedToExclusive(void)
?TryConvertSharedToExclusive@CReaderWriterLock3AR@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CCritSec::TryReadLock(void)
?TryReadLock@CCritSec@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::TryReadLock(void)
?TryReadLock@CFakeLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock2::TryReadLock(void)
?TryReadLock@CReaderWriterLock2@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::TryReadLock(void)
?TryReadLock@CReaderWriterLock3@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::TryReadLock(void)
?TryReadLock@CReaderWriterLock3AR@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock::TryReadLock(void)
?TryReadLock@CReaderWriterLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSmallSpinLock::TryReadLock(void)
?TryReadLock@CSmallSpinLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::TryReadLock(void)
?TryReadLock@CSpinLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::TryReadOrWriteLock(bool &)
?TryReadOrWriteLock@CReaderWriterLock3@@QAE_NAA_N@Z ; has WINAPI (@4)
; public: bool __thiscall CReaderWriterLock3AR::TryReadOrWriteLock(bool &)
?TryReadOrWriteLock@CReaderWriterLock3AR@@QAE_NAA_N@Z ; has WINAPI (@4)
; public: bool __thiscall CCritSec::TryWriteLock(void)
?TryWriteLock@CCritSec@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CFakeLock::TryWriteLock(void)
?TryWriteLock@CFakeLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock2::TryWriteLock(void)
?TryWriteLock@CReaderWriterLock2@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3::TryWriteLock(void)
?TryWriteLock@CReaderWriterLock3@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock3AR::TryWriteLock(void)
?TryWriteLock@CReaderWriterLock3AR@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CReaderWriterLock::TryWriteLock(void)
?TryWriteLock@CReaderWriterLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSmallSpinLock::TryWriteLock(void)
?TryWriteLock@CSmallSpinLock@@QAE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CSpinLock::TryWriteLock(void)
?TryWriteLock@CSpinLock@@QAE_NXZ ; has WINAPI (@0)
; public: long __thiscall CEXAutoBackupFile::UndoBackup(void)
?UndoBackup@CEXAutoBackupFile@@QAEJXZ ; has WINAPI (@0)
; public: void __thiscall CLockedDoubleList::Unlock(void)
?Unlock@CLockedDoubleList@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLockedSingleList::Unlock(void)
?Unlock@CLockedSingleList@@QAEXXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRHashTable::ValidSignature(void)const 
?ValidSignature@CLKRHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: bool __thiscall CLKRLinearHashTable::ValidSignature(void)const 
?ValidSignature@CLKRLinearHashTable@@QBE_NXZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x1ULL,0x1ULL,0x3ULL,0x1ULL,0x3ULL,0x2ULL>::WaitType(void)
?WaitType@?$CLockBase@$00$00$02$00$02$01@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x2ULL,0x1ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::WaitType(void)
?WaitType@?$CLockBase@$01$00$00$00$02$01@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x3ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL,0x1ULL>::WaitType(void)
?WaitType@?$CLockBase@$02$00$00$00$00$00@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x4ULL,0x1ULL,0x1ULL,0x2ULL,0x3ULL,0x3ULL>::WaitType(void)
?WaitType@?$CLockBase@$03$00$00$01$02$02@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x5ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::WaitType(void)
?WaitType@?$CLockBase@$04$01$01$00$02$01@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x6ULL,0x2ULL,0x2ULL,0x1ULL,0x3ULL,0x2ULL>::WaitType(void)
?WaitType@?$CLockBase@$05$01$01$00$02$01@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x7ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::WaitType(void)
?WaitType@?$CLockBase@$06$01$00$00$02$01@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: static enum LOCK_WAIT_TYPE __stdcall <0x8ULL,0x2ULL,0x1ULL,0x1ULL,0x3ULL,0x2ULL>::WaitType(void)
?WaitType@?$CLockBase@$07$01$00$00$02$01@@SG?AW4LOCK_WAIT_TYPE@@XZ ; has WINAPI (@0)
; public: void __thiscall CCritSec::WriteLock(void)
?WriteLock@CCritSec@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CFakeLock::WriteLock(void)
?WriteLock@CFakeLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::WriteLock(void)
?WriteLock@CLKRHashTable@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::WriteLock(void)
?WriteLock@CLKRLinearHashTable@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock2::WriteLock(void)
?WriteLock@CReaderWriterLock2@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3::WriteLock(void)
?WriteLock@CReaderWriterLock3@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3AR::WriteLock(void)
?WriteLock@CReaderWriterLock3AR@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock::WriteLock(void)
?WriteLock@CReaderWriterLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSmallSpinLock::WriteLock(void)
?WriteLock@CSmallSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSpinLock::WriteLock(void)
?WriteLock@CSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CCritSec::WriteUnlock(void)
?WriteUnlock@CCritSec@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CFakeLock::WriteUnlock(void)
?WriteUnlock@CFakeLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRHashTable::WriteUnlock(void)const 
?WriteUnlock@CLKRHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CLKRLinearHashTable::WriteUnlock(void)const 
?WriteUnlock@CLKRLinearHashTable@@QBEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock2::WriteUnlock(void)
?WriteUnlock@CReaderWriterLock2@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3::WriteUnlock(void)
?WriteUnlock@CReaderWriterLock3@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock3AR::WriteUnlock(void)
?WriteUnlock@CReaderWriterLock3AR@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CReaderWriterLock::WriteUnlock(void)
?WriteUnlock@CReaderWriterLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSmallSpinLock::WriteUnlock(void)
?WriteUnlock@CSmallSpinLock@@QAEXXZ ; has WINAPI (@0)
; public: void __thiscall CSpinLock::WriteUnlock(void)
?WriteUnlock@CSpinLock@@QAEXXZ ; has WINAPI (@0)
; protected: void __thiscall CLKRLinearHashTable_Iterator::_AddRef(int)const 
?_AddRef@CLKRLinearHashTable_Iterator@@IBEXH@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_AddRefRecord(void const *,int)const 
?_AddRefRecord@CLKRLinearHashTable@@ABEXPBXH@Z ; Check!!! Couldn't determine function argument count. Function doesn't return. 
; private: class CNodeClump *const __thiscall CLKRLinearHashTable::_AllocateNodeClump(void)
?_AllocateNodeClump@CLKRLinearHashTable@@AAEQAVCNodeClump@@XZ ; has WINAPI (@0)
; private: class CSegment *const __thiscall CLKRLinearHashTable::_AllocateSegment(void)const 
?_AllocateSegment@CLKRLinearHashTable@@ABEQAVCSegment@@XZ ; has WINAPI (@0)
; private: class CDirEntry *const __thiscall CLKRLinearHashTable::_AllocateSegmentDirectory(unsigned int)
?_AllocateSegmentDirectory@CLKRLinearHashTable@@AAEQAVCDirEntry@@I@Z ; has WINAPI (@4)
; private: class CLKRLinearHashTable *const __thiscall CLKRHashTable::_AllocateSubTable(char const *,unsigned long const(__stdcall *)(void const *),unsigned long(__stdcall *)(unsigned long),bool(__stdcall *)(unsigned long,unsigned long),void(__stdcall *)(void const *,int),double,unsigned long,class CLKRHashTable *,bool,bool)
?_AllocateSubTable@CLKRHashTable@@AAEQAVCLKRLinearHashTable@@PBDP6G?BKPBX@ZP6GKK@ZP6G_NKK@ZP6GX1H@ZNKPAV1@_N7@Z ; has WINAPI (@44)
; private: class CLKRLinearHashTable **const __thiscall CLKRHashTable::_AllocateSubTableArray(unsigned int)
?_AllocateSubTableArray@CLKRHashTable@@AAEQAPAVCLKRLinearHashTable@@I@Z ; has WINAPI (@4)
; private: unsigned long __thiscall CLKRLinearHashTable::_Apply(enum LK_ACTION(__stdcall *)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)
?_Apply@CLKRLinearHashTable@@AAEKP6G?AW4LK_ACTION@@PBXPAX@Z1W4LK_LOCKTYPE@@AAW4LK_PREDICATE@@@Z ; has WINAPI (@16)
; private: unsigned long __thiscall CLKRLinearHashTable::_ApplyIf(enum LK_PREDICATE(__stdcall *)(void const *,void *),enum LK_ACTION(__stdcall *)(void const *,void *),void *,enum LK_LOCKTYPE,enum LK_PREDICATE &)
?_ApplyIf@CLKRLinearHashTable@@AAEKP6G?AW4LK_PREDICATE@@PBXPAX@ZP6G?AW4LK_ACTION@@01@Z1W4LK_LOCKTYPE@@AAW42@@Z ; has WINAPI (@20)
; private: class CBucket *const __thiscall CLKRLinearHashTable::_Bucket(unsigned long)const 
?_Bucket@CLKRLinearHashTable@@ABEQAVCBucket@@K@Z ; has WINAPI (@4)
; private: unsigned long __thiscall CLKRLinearHashTable::_BucketAddress(unsigned long)const 
?_BucketAddress@CLKRLinearHashTable@@ABEKK@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_BucketLock(class CBucket *const,enum LK_LOCKTYPE)const 
?_BucketLock@CLKRLinearHashTable@@ABEXQAVCBucket@@W4LK_LOCKTYPE@@@Z ; has WINAPI (@8)
; private: void __thiscall CLKRLinearHashTable::_BucketReadLock(class CBucket *const)const 
?_BucketReadLock@CLKRLinearHashTable@@ABEXQAVCBucket@@@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_BucketReadUnlock(class CBucket *const)const 
?_BucketReadUnlock@CLKRLinearHashTable@@ABEXQAVCBucket@@@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_BucketUnlock(class CBucket *const,enum LK_LOCKTYPE)const 
?_BucketUnlock@CLKRLinearHashTable@@ABEXQAVCBucket@@W4LK_LOCKTYPE@@@Z ; has WINAPI (@8)
; private: void __thiscall CLKRLinearHashTable::_BucketWriteLock(class CBucket *const)const 
?_BucketWriteLock@CLKRLinearHashTable@@ABEXQAVCBucket@@@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_BucketWriteUnlock(class CBucket *const)const 
?_BucketWriteUnlock@CLKRLinearHashTable@@ABEXQAVCBucket@@@Z ; has WINAPI (@4)
; private: unsigned long __thiscall CLKRHashTable::_CalcKeyHash(unsigned long)const 
?_CalcKeyHash@CLKRHashTable@@ABEKK@Z ; has WINAPI (@4)
; private: unsigned long __thiscall CLKRLinearHashTable::_CalcKeyHash(unsigned long)const 
?_CalcKeyHash@CLKRLinearHashTable@@ABEKK@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_Clear(bool)
?_Clear@CLKRLinearHashTable@@AAEX_N@Z ; has WINAPI (@4)
; private: bool __thiscall CReaderWriterLock2::_CmpExch(long,long)
?_CmpExch@CReaderWriterLock2@@AAE_NJJ@Z ; has WINAPI (@8)
; private: bool __thiscall CReaderWriterLock3::_CmpExch(long,long)
?_CmpExch@CReaderWriterLock3@@AAE_NJJ@Z ; has WINAPI (@8)
; private: bool __thiscall CReaderWriterLock3AR::_CmpExch(long,long)
?_CmpExch@CReaderWriterLock3AR@@AAE_NJJ@Z ; has WINAPI (@8)
; private: bool __thiscall CReaderWriterLock::_CmpExch(long,long)
?_CmpExch@CReaderWriterLock@@AAE_NJJ@Z ; has WINAPI (@8)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Contract(void)
?_Contract@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@XZ ; has WINAPI (@0)
; private: static long __stdcall CReaderWriterLock3::_CurrentThreadId(void)
?_CurrentThreadId@CReaderWriterLock3@@CGJXZ ; has WINAPI (@0)
; private: static long __stdcall CReaderWriterLock3AR::_CurrentThreadId(void)
?_CurrentThreadId@CReaderWriterLock3AR@@CGJXZ ; has WINAPI (@0)
; private: static long __stdcall CSmallSpinLock::_CurrentThreadId(void)
?_CurrentThreadId@CSmallSpinLock@@CGJXZ ; has WINAPI (@0)
; private: static long __stdcall CSpinLock::_CurrentThreadId(void)
?_CurrentThreadId@CSpinLock@@CGJXZ ; has WINAPI (@0)
; private: unsigned long __thiscall CLKRLinearHashTable::_DeleteIf(enum LK_PREDICATE(__stdcall *)(void const *,void *),void *,enum LK_PREDICATE &)
?_DeleteIf@CLKRLinearHashTable@@AAEKP6G?AW4LK_PREDICATE@@PBXPAX@Z1AAW42@@Z ; has WINAPI (@12)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteKey(unsigned long,unsigned long)
?_DeleteKey@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@KK@Z ; has WINAPI (@8)
; private: bool __thiscall CLKRLinearHashTable::_DeleteNode(class CBucket *const,class CNodeClump *&,class CNodeClump *&,int &)
?_DeleteNode@CLKRLinearHashTable@@AAE_NQAVCBucket@@AAPAVCNodeClump@@1AAH@Z ; has WINAPI (@16)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_DeleteRecord(void const *,unsigned long)
?_DeleteRecord@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@PBXK@Z ; has WINAPI (@8)
; private: bool __thiscall CLKRLinearHashTable::_EqualKeys(unsigned long,unsigned long)const 
?_EqualKeys@CLKRLinearHashTable@@ABE_NKK@Z ; Check!!! Couldn't determine function argument count. Function doesn't return. 
; private: bool __thiscall CLKRLinearHashTable::_Erase(class CLKRLinearHashTable_Iterator &,unsigned long)
?_Erase@CLKRLinearHashTable@@AAE_NAAVCLKRLinearHashTable_Iterator@@K@Z ; has WINAPI (@8)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Expand(void)
?_Expand@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@XZ ; has WINAPI (@0)
; private: unsigned long const __thiscall CLKRHashTable::_ExtractKey(void const *)const 
?_ExtractKey@CLKRHashTable@@ABE?BKPBX@Z ; Check!!! Couldn't determine function argument count. Function doesn't return. 
; private: unsigned long const __thiscall CLKRLinearHashTable::_ExtractKey(void const *)const 
?_ExtractKey@CLKRLinearHashTable@@ABE?BKPBX@Z ; Check!!! Couldn't determine function argument count. Function doesn't return. 
; private: class CBucket *const __thiscall CLKRLinearHashTable::_FindBucket(unsigned long,bool)const 
?_FindBucket@CLKRLinearHashTable@@ABEQAVCBucket@@K_N@Z ; has WINAPI (@8)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindKey(unsigned long,unsigned long,void const **,class CLKRLinearHashTable_Iterator *)const 
?_FindKey@CLKRLinearHashTable@@ABE?AW4LK_RETCODE@@KKPAPBXPAVCLKRLinearHashTable_Iterator@@@Z ; has WINAPI (@16)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_FindRecord(void const *,unsigned long)const 
?_FindRecord@CLKRLinearHashTable@@ABE?AW4LK_RETCODE@@PBXK@Z ; has WINAPI (@8)
; private: bool __thiscall CLKRLinearHashTable::_FreeNodeClump(class CNodeClump *)
?_FreeNodeClump@CLKRLinearHashTable@@AAE_NPAVCNodeClump@@@Z ; has WINAPI (@4)
; private: bool __thiscall CLKRLinearHashTable::_FreeSegment(class CSegment *)const 
?_FreeSegment@CLKRLinearHashTable@@ABE_NPAVCSegment@@@Z ; has WINAPI (@4)
; private: bool __thiscall CLKRLinearHashTable::_FreeSegmentDirectory(void)
?_FreeSegmentDirectory@CLKRLinearHashTable@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CLKRHashTable::_FreeSubTable(class CLKRLinearHashTable *)
?_FreeSubTable@CLKRHashTable@@AAE_NPAVCLKRLinearHashTable@@@Z ; has WINAPI (@4)
; private: bool __thiscall CLKRHashTable::_FreeSubTableArray(class CLKRLinearHashTable **)
?_FreeSubTableArray@CLKRHashTable@@AAE_NPAPAVCLKRLinearHashTable@@@Z ; has WINAPI (@4)
; private: unsigned long __thiscall CLKRLinearHashTable::_H0(unsigned long)const 
?_H0@CLKRLinearHashTable@@ABEKK@Z ; has WINAPI (@4)
; private: static unsigned long __stdcall CLKRLinearHashTable::_H0(unsigned long,unsigned long)
?_H0@CLKRLinearHashTable@@CGKKK@Z ; has WINAPI (@8)
; private: unsigned long __thiscall CLKRLinearHashTable::_H1(unsigned long)const 
?_H1@CLKRLinearHashTable@@ABEKK@Z ; has WINAPI (@4)
; private: static unsigned long __stdcall CLKRLinearHashTable::_H1(unsigned long,unsigned long)
?_H1@CLKRLinearHashTable@@CGKKK@Z ; has WINAPI (@8)
; protected: bool __thiscall CLKRHashTable_Iterator::_Increment(bool)
?_Increment@CLKRHashTable_Iterator@@IAE_N_N@Z ; has WINAPI (@4)
; protected: bool __thiscall CLKRLinearHashTable_Iterator::_Increment(bool)
?_Increment@CLKRLinearHashTable_Iterator@@IAE_N_N@Z ; has WINAPI (@4)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_Initialize(unsigned long const(__stdcall *)(void const *),unsigned long(__stdcall *)(unsigned long),bool(__stdcall *)(unsigned long,unsigned long),void(__stdcall *)(void const *,int),char const *,double,unsigned long)
?_Initialize@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@P6G?BKPBX@ZP6GKK@ZP6G_NKK@ZP6GX0H@ZPBDNK@Z ; has WINAPI (@32)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_InsertRecord(void const *,unsigned long,bool,void const **,class CLKRLinearHashTable_Iterator *)
?_InsertRecord@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@PBXK_NPAPBXPAVCLKRLinearHashTable_Iterator@@@Z ; has WINAPI (@20)
; private: void __thiscall CLKRHashTable::_InsertThisIntoGlobalList(void)
?_InsertThisIntoGlobalList@CLKRHashTable@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CLKRLinearHashTable::_InsertThisIntoGlobalList(void)
?_InsertThisIntoGlobalList@CLKRLinearHashTable@@AAEXXZ ; has WINAPI (@0)
; private: bool __thiscall CSpinLock::_IsLocked(void)const 
?_IsLocked@CSpinLock@@ABE_NXZ ; has WINAPI (@0)
; private: int __thiscall CLKRLinearHashTable::_IsNodeCompact(class CBucket *const)const 
?_IsNodeCompact@CLKRLinearHashTable@@ABEHQAVCBucket@@@Z ; has WINAPI (@4)
; private: bool __thiscall CLKRHashTable::_IsValidIterator(class CLKRHashTable_Iterator const &)const 
?_IsValidIterator@CLKRHashTable@@ABE_NABVCLKRHashTable_Iterator@@@Z ; has WINAPI (@4)
; private: bool __thiscall CLKRLinearHashTable::_IsValidIterator(class CLKRLinearHashTable_Iterator const &)const 
?_IsValidIterator@CLKRLinearHashTable@@ABE_NABVCLKRLinearHashTable_Iterator@@@Z ; has WINAPI (@4)
; private: void __thiscall CSpinLock::_Lock(void)
?_Lock@CSpinLock@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CReaderWriterLock2::_LockSpin(bool)
?_LockSpin@CReaderWriterLock2@@AAEX_N@Z ; has WINAPI (@4)
; private: void __thiscall CReaderWriterLock3::_LockSpin(enum CReaderWriterLock3::SPIN_TYPE)
?_LockSpin@CReaderWriterLock3@@AAEXW4SPIN_TYPE@1@@Z ; has WINAPI (@4)
; private: void __thiscall CReaderWriterLock3AR::_LockSpin(enum CReaderWriterLock3AR::SPIN_TYPE)
?_LockSpin@CReaderWriterLock3AR@@AAEXW4SPIN_TYPE@1@@Z ; has WINAPI (@4)
; private: void __thiscall CReaderWriterLock::_LockSpin(bool)
?_LockSpin@CReaderWriterLock@@AAEX_N@Z ; has WINAPI (@4)
; private: void __thiscall CSmallSpinLock::_LockSpin(void)
?_LockSpin@CSmallSpinLock@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CSpinLock::_LockSpin(void)
?_LockSpin@CSpinLock@@AAEXXZ ; has WINAPI (@0)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_MergeRecordSets(class CBucket *,class CNodeClump *,class CNodeClump *)
?_MergeRecordSets@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@PAVCBucket@@PAVCNodeClump@@1@Z ; has WINAPI (@12)
; private: static enum LK_PREDICATE __stdcall CLKRLinearHashTable::_PredTrue(void const *,void *)
?_PredTrue@CLKRLinearHashTable@@CG?AW4LK_PREDICATE@@PBXPAX@Z ; has WINAPI (@8)
; private: void __thiscall CReaderWriterLock2::_ReadLockSpin(void)
?_ReadLockSpin@CReaderWriterLock2@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CReaderWriterLock3::_ReadLockSpin(enum CReaderWriterLock3::SPIN_TYPE)
?_ReadLockSpin@CReaderWriterLock3@@AAEXW4SPIN_TYPE@1@@Z ; has WINAPI (@4)
; private: void __thiscall CReaderWriterLock3AR::_ReadLockSpin(enum CReaderWriterLock3AR::SPIN_TYPE)
?_ReadLockSpin@CReaderWriterLock3AR@@AAEXW4SPIN_TYPE@1@@Z ; has WINAPI (@4)
; private: void __thiscall CReaderWriterLock::_ReadLockSpin(void)
?_ReadLockSpin@CReaderWriterLock@@AAEXXZ ; has WINAPI (@0)
; private: bool __thiscall CLKRLinearHashTable::_ReadOrWriteLock(void)const 
?_ReadOrWriteLock@CLKRLinearHashTable@@ABE_NXZ ; has WINAPI (@0)
; private: void __thiscall CLKRLinearHashTable::_ReadOrWriteUnlock(bool)const 
?_ReadOrWriteUnlock@CLKRLinearHashTable@@ABEX_N@Z ; has WINAPI (@4)
; private: void __thiscall CLKRHashTable::_RemoveThisFromGlobalList(void)
?_RemoveThisFromGlobalList@CLKRHashTable@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CLKRLinearHashTable::_RemoveThisFromGlobalList(void)
?_RemoveThisFromGlobalList@CLKRLinearHashTable@@AAEXXZ ; has WINAPI (@0)
; private: unsigned long __thiscall CLKRLinearHashTable::_SegIndex(unsigned long)const 
?_SegIndex@CLKRLinearHashTable@@ABEKK@Z ; has WINAPI (@4)
; private: class CSegment *&__thiscall CLKRLinearHashTable::_Segment(unsigned long)const 
?_Segment@CLKRLinearHashTable@@ABEAAPAVCSegment@@K@Z ; has WINAPI (@4)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SetSegVars(enum LK_TABLESIZE,unsigned long)
?_SetSegVars@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@W4LK_TABLESIZE@@K@Z ; has WINAPI (@8)
; private: enum LK_RETCODE __thiscall CLKRLinearHashTable::_SplitRecordSet(class CNodeClump *,class CNodeClump *,unsigned long,unsigned long,unsigned long,class CNodeClump *)
?_SplitRecordSet@CLKRLinearHashTable@@AAE?AW4LK_RETCODE@@PAVCNodeClump@@0KKK0@Z ; has WINAPI (@24)
; private: class CLKRLinearHashTable *__thiscall CLKRHashTable::_SubTable(unsigned long)const 
?_SubTable@CLKRHashTable@@ABEPAVCLKRLinearHashTable@@K@Z ; has WINAPI (@4)
; private: int __thiscall CLKRHashTable::_SubTableIndex(class CLKRLinearHashTable *)const 
?_SubTableIndex@CLKRHashTable@@ABEHPAVCLKRLinearHashTable@@@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_TableLock(enum LK_LOCKTYPE)
?_TableLock@CLKRLinearHashTable@@AAEXW4LK_LOCKTYPE@@@Z ; has WINAPI (@4)
; private: void __thiscall CLKRLinearHashTable::_TableUnlock(enum LK_LOCKTYPE)
?_TableUnlock@CLKRLinearHashTable@@AAEXW4LK_LOCKTYPE@@@Z ; has WINAPI (@4)
; private: bool __thiscall CSmallSpinLock::_TryLock(void)
?_TryLock@CSmallSpinLock@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CSpinLock::_TryLock(void)
?_TryLock@CSpinLock@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock2::_TryReadLock(void)
?_TryReadLock@CReaderWriterLock2@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock3::_TryReadLock(void)
?_TryReadLock@CReaderWriterLock3@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock3AR::_TryReadLock(void)
?_TryReadLock@CReaderWriterLock3AR@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock::_TryReadLock(void)
?_TryReadLock@CReaderWriterLock@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock3::_TryReadLockRecursive(void)
?_TryReadLockRecursive@CReaderWriterLock3@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock3AR::_TryReadLockRecursive(void)
?_TryReadLockRecursive@CReaderWriterLock3AR@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock3::_TryWriteLock2(void)
?_TryWriteLock2@CReaderWriterLock3@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock3AR::_TryWriteLock2(void)
?_TryWriteLock2@CReaderWriterLock3AR@@AAE_NXZ ; has WINAPI (@0)
; private: bool __thiscall CReaderWriterLock2::_TryWriteLock(long)
?_TryWriteLock@CReaderWriterLock2@@AAE_NJ@Z ; has WINAPI (@4)
; private: bool __thiscall CReaderWriterLock3::_TryWriteLock(long)
?_TryWriteLock@CReaderWriterLock3@@AAE_NJ@Z ; has WINAPI (@4)
; private: bool __thiscall CReaderWriterLock3AR::_TryWriteLock(long)
?_TryWriteLock@CReaderWriterLock3AR@@AAE_NJ@Z ; has WINAPI (@4)
; private: bool __thiscall CReaderWriterLock::_TryWriteLock(void)
?_TryWriteLock@CReaderWriterLock@@AAE_NXZ ; has WINAPI (@0)
; private: void __thiscall CSpinLock::_Unlock(void)
?_Unlock@CSpinLock@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CReaderWriterLock2::_WriteLockSpin(void)
?_WriteLockSpin@CReaderWriterLock2@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CReaderWriterLock3::_WriteLockSpin(void)
?_WriteLockSpin@CReaderWriterLock3@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CReaderWriterLock3AR::_WriteLockSpin(void)
?_WriteLockSpin@CReaderWriterLock3AR@@AAEXXZ ; has WINAPI (@0)
; private: void __thiscall CReaderWriterLock::_WriteLockSpin(void)
?_WriteLockSpin@CReaderWriterLock@@AAEXXZ ; has WINAPI (@0)
; private: long __thiscall CExFileOperation::_getFileSecurity(unsigned short const *)
?_getFileSecurity@CExFileOperation@@AAEJPBG@Z ; has WINAPI (@4)
; private: long __thiscall CExFileOperation::_setFileSecurity(unsigned short const *)
?_setFileSecurity@CExFileOperation@@AAEJPBG@Z ; has WINAPI (@4)
; public: int __thiscall CEXAutoBackupFile::fHaveBackup(void)
?fHaveBackup@CEXAutoBackupFile@@QAEHXZ ; has WINAPI (@0)
; long const *const const /public: static long const *__stdcall CLKRHashTableStats::BucketSizes(void)/::'0x2ULL'::s_aBucketSizes
?s_aBucketSizes@?1??BucketSizes@CLKRHashTableStats@@SGPBJXZ@4QBJB ; Check!!! Couldn't determine function argument count. Function doesn't return. 
; private: static class CLKRhashDefaultAllocator CLKRHashTable::sm_DefaultAllocator
?sm_DefaultAllocator@CLKRHashTable@@0VCLKRhashDefaultAllocator@@A DATA
; protected: static double CCritSec::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CCritSec@@1NA DATA
; protected: static double CFakeLock::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CFakeLock@@1NA DATA
; protected: static double CReaderWriterLock2::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CReaderWriterLock2@@1NA DATA
; protected: static double CReaderWriterLock3::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CReaderWriterLock3@@1NA DATA
; protected: static double CReaderWriterLock3AR::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CReaderWriterLock3AR@@1NA DATA
; protected: static double CReaderWriterLock::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CReaderWriterLock@@1NA DATA
; protected: static double CSmallSpinLock::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CSmallSpinLock@@1NA DATA
; protected: static double CSpinLock::sm_dblDfltSpinAdjFctr
?sm_dblDfltSpinAdjFctr@CSpinLock@@1NA DATA
; private: static class CLockedDoubleList CLKRHashTable::sm_llGlobalList
?sm_llGlobalList@CLKRHashTable@@0VCLockedDoubleList@@A DATA
; private: static class CLockedDoubleList CLKRLinearHashTable::sm_llGlobalList
?sm_llGlobalList@CLKRLinearHashTable@@0VCLockedDoubleList@@A DATA
; private: static struct _OSVERSIONINFOW *CMdVersionInfo::sm_lpOSVERSIONINFO
?sm_lpOSVERSIONINFO@CMdVersionInfo@@0PAU_OSVERSIONINFOW@@A DATA
; private: static unsigned long(__stdcall *)(struct _RTL_CRITICAL_SECTION *,unsigned long)CCriticalSection::sm_pfnSetCriticalSectionSpinCount
?sm_pfnSetCriticalSectionSpinCount@CCriticalSection@@0P6GKPAU_RTL_CRITICAL_SECTION@@K@ZA DATA
; private: static int(__stdcall *)(struct _RTL_CRITICAL_SECTION *)CCriticalSection::sm_pfnTryEnterCriticalSection
?sm_pfnTryEnterCriticalSection@CCriticalSection@@0P6GHPAU_RTL_CRITICAL_SECTION@@@ZA DATA
; protected: static unsigned short CCritSec::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CCritSec@@1GA DATA
; protected: static unsigned short CFakeLock::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CFakeLock@@1GA DATA
; protected: static unsigned short CReaderWriterLock2::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CReaderWriterLock2@@1GA DATA
; protected: static unsigned short CReaderWriterLock3::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CReaderWriterLock3@@1GA DATA
; protected: static unsigned short CReaderWriterLock3AR::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CReaderWriterLock3AR@@1GA DATA
; protected: static unsigned short CReaderWriterLock::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CReaderWriterLock@@1GA DATA
; protected: static unsigned short CSmallSpinLock::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CSmallSpinLock@@1GA DATA
; protected: static unsigned short CSpinLock::sm_wDefaultSpinCount
?sm_wDefaultSpinCount@CSpinLock@@1GA DATA
DllBidEntryPoint@36
_DllMain@12@12
FXMemAttach@0
FXMemDetach@0
_GetAllocCounters@0@0
GetIUMS@0
_IrtlAssert@16@16
IrtlTrace@0
MPCSInitialize@0
MPCSUninitialize@0
MPDeleteCriticalSection@0
MPInitializeCriticalSection@0
MPInitializeCriticalSectionAndSpinCount@0
MpGetHeapHandle@0
MpHeapAlloc@0
MpHeapCreate@0
MpHeapDestroy@0
MpHeapFree@0
MpHeapReAlloc@0
MpHeapSize@0
MpHeapValidate@0
SetIUMS@0
SetMemHook@0
UMSEnterCSWraper@0
mpCalloc@0
mpFree@0
mpMalloc@0
mpRealloc@0
